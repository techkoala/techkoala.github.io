<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - TechKoala - Input/Output </title>
        <link>https://www.techkoala.top/posts/</link>
        <description>所有文章 | TechKoala - Input/Output </description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>admin@techkoala.top (TechKoala)</managingEditor>
            <webMaster>admin@techkoala.top (TechKoala)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 09 Sep 2020 16:14:29 &#43;0800</lastBuildDate><atom:link href="https://www.techkoala.top/posts/" rel="self" type="application/rss+xml" /><item>
    <title>5G NR 系列：波束赋形</title>
    <link>https://www.techkoala.top/beamforming/</link>
    <pubDate>Wed, 09 Sep 2020 16:14:29 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://www.techkoala.top/beamforming/</guid>
    <description><![CDATA[<blockquote>
<p>什么是波束赋形？波束赋形的基本原理是什么？5G 怎样实现波束赋形？</p>
</blockquote>
<blockquote>
<p>注：本文系全文转载，原文信息如下：</p>
<p>作者：无线深海</p>
<p>链接：https://zhuanlan.zhihu.com/p/144971077</p>
<p>来源：知乎</p>
<p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
</blockquote>
<h2 id="什么是波束赋形">什么是波束赋形？</h2>
<p><strong>波束赋形</strong>这个概念可以拆分成<strong>波束</strong>和<strong>赋形</strong>这两个词来理解。</p>
<ul>
<li><strong>波束</strong>里的<strong>波</strong>字可以认为是电磁波，<strong>束</strong>字的本意是“捆绑”，因此波束的含义是捆绑在一起集中传播的电磁波</li>
<li><strong>赋形</strong>可以简单地理解为“赋予一定的形状”</li>
</ul>
<p>合起来，波束赋形的意思就是<strong>赋予一定形状集中传播的电磁波</strong>。</p>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_12.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_12.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_12.webp" data-sub-html="<h2>分散与集中的光线</h2>">
        
    </a><figcaption class="image-caption">分散与集中的光线</figcaption>
    </figure>
<p>其实，我们常见的光也是一种电磁波，灯泡作为一个点光源，发出的光没有方向性，只能不断向四周耗散；而手电筒则可以把光集中到一个方向发射，能量更为聚焦，从而照地更远。</p>
<p>无线基站也是同理，如下图所示，如果天线的信号全向发射的话，这几个手机只能收到有限的信号，大部分能量都浪费掉了。</p>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_17.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_17.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_17.webp" data-sub-html="<h2>分散与集中的电磁波</h2>">
        
    </a><figcaption class="image-caption">分散与集中的电磁波</figcaption>
    </figure>
<p>而如果能通过波束赋形把信号聚焦成几个波束，专门指向各个手机发射的话，承载信号的电磁能量就能传播地更远，而且手机收到的信号也就会更强。</p>
<p>因此，波束赋形在无线通信中大有可为。</p>
<h2 id="波束赋形的基本原理是什么">波束赋形的基本原理是什么？</h2>
<p>波束赋形的物理学原理，其实就是波的干涉现象。</p>
<p>频率相同的两列波叠加，使某些区域的振动加强，某些区域的振动减弱，而且振动加强的区域和振动减弱的区域相互隔开。</p>
<p>想象一下，在湖边漫步时，你和女朋友在相距很近的两点激起水波，两朵涟漪不断散开，然后交叠起来，形成了下面的图样。</p>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_10.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_10.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_10.webp" data-sub-html="<h2>波的干涉现象</h2>">
        
    </a><figcaption class="image-caption">波的干涉现象</figcaption>
    </figure>
<p>可以看出，有的地方水波增强，有的地方则减弱，并且增强和减弱的地方间隔分布，在最中间的狭窄区域最为明显。</p>
<p>如果波峰和波峰，或者波谷和波谷相遇，则能量相加，波峰更高，波谷更深。这种情况叫做相长干涉。</p>
<p>反之，如果波峰和波谷相遇，两者则相互抵消，震动归于静寂。这种情况叫做相消干涉。</p>
<p>如果把这个现象抽象一下，可以得到下图：</p>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_07.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_07.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_07.webp" data-sub-html="<h2>波的干涉</h2>">
        
    </a><figcaption class="image-caption">波的干涉</figcaption>
    </figure>
<p>在两个馈源正中间的地方由于相长干涉，能量最强，可以认为形成了一个定向的波束，也叫做主瓣；两边则由于相消干涉能量抵消，形成了零陷，再往两边又是相长干涉，但弱于最中间，因此称作旁瓣。</p>
<p>如果我们能继续增强正中央主瓣的能量，使其宽度更窄，并抑制两边的旁瓣，就可以得到干净利落的波束了。</p>
<p>其实，普通天线一直在做这样的事情。</p>
<p>天线内部排布着一系列的电磁波源，称作振子，或者天线单元。这些天线单元也利用干涉原理来形成定向的波束。</p>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_04.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_04.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_04.webp" data-sub-html="<h2>单列天线</h2>">
        
    </a><figcaption class="image-caption">单列天线</figcaption>
    </figure>
<p>由上图可以看出，纵向排列的天线单元越多，最中间的可集中的能量也就越多，波束也就越窄。</p>
<p>但这只是一个垂直截面而已，其实完整的波束在空间是三维的，水平和垂直的宽度可能截然不同。</p>
<p>下图是一个天线的振子排列，以及辐射能量三维分布图。</p>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_06.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_06.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_06.webp" data-sub-html="<h2>纵向双列天线</h2>">
        
    </a><figcaption class="image-caption">纵向双列天线</figcaption>
    </figure>
<p>可以看出，上述天线内振源的排布方式为纵向，横向的数量很少，因此其波束在垂直方向的能量集中，而水平方向的角度还是比较宽的，像一个薄薄的大饼。</p>
<p>这种传统的天线水平方向的辐射角度多为 60 度，进行大面积的地面信号覆盖是一把好手，但要垂直覆盖高楼就有些力不从心了，称作“波束赋形”还是不够格。</p>
<p>如果我们把这些天线单元的排布改成矩形，电磁波辐射能量将在最中央形成一个很粗的主瓣，周边是一圈的旁瓣，这就有点波束赋形的意思了。</p>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_01.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_01.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_01.webp" data-sub-html="<h2>矩形天线</h2>">
        
    </a><figcaption class="image-caption">矩形天线</figcaption>
    </figure>
<p>为了让波束更窄能量更集中，天线单元还需要更多更密，水平和垂直两个维度也都要兼顾，原本的天线就变成了大规模天线阵列。</p>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_05.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_05.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_05.webp" data-sub-html="<h2>大规模矩形天线</h2>">
        
    </a><figcaption class="image-caption">大规模矩形天线</figcaption>
    </figure>
<p>这下，生成的波束就犀利多了，用大规模天线阵列来支持波束赋形，稳了！</p>
<p>但是这样还有问题，那就是这个最大波束位于正中央，且其传播方向和天线阵列垂直，而手机是一直随着用户移动的，所在的位置完全不确定，主波束虽然犀利，但照射不到手机上也是白搭。</p>
<p>那么，能不能让波束偏移一定的角度，对准手机来发射呢？</p>
<p>首先我们看看中央的主波束的形成过程：多列波的相位相同，也就是波峰和波谷在同一时间是对齐的，则它们到达手机时，就可以相长干涉，信号通过叠加得以增强。</p>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_02.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_02.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_02.webp" data-sub-html="<h2>到达同相，相长干涉</h2>">
        
    </a><figcaption class="image-caption">到达同相，相长干涉</figcaption>
    </figure>
<p>如果手机和天线阵列有一定的夹角，则各列波到达手机时，相位难以对齐，可能是波峰和波谷相遇，也可能是在其他相位进行叠加，难以达到相长干涉，信号叠加的效果。</p>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_15.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_15.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_15.webp" data-sub-html="<h2>到达异相，无法相长</h2>">
        
    </a><figcaption class="image-caption">到达异相，无法相长</figcaption>
    </figure>
<p>这可咋办？总不能通过旋转天线来让波束跟随手机吧？</p>
<p>其实，周期性是波最大的特点，不同的相位总是周期性的出现，错过了这个波峰，还有下一个波峰要来，因此相位是可以调整的。</p>
<p>通过调整不同天线单元发射信号的振幅和相位（权值），即使它们的传播路径各不相同，只要在到达手机的时候相位相同，就可以达到信号叠加增强的结果，相当于天线阵列把信号对准了手机。</p>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_14.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_14.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_14.webp" data-sub-html="<h2>相位控制</h2>">
        
    </a><figcaption class="image-caption">相位控制</figcaption>
    </figure>
<p>下图是一个示例，可以看出天线阵列通过调整发射信号的相位，让波束偏移了 θ 度，从而可以精确对准手机发射信号。</p>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_13.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_13.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_13.webp" data-sub-html="<h2>相位控制</h2>">
        
    </a><figcaption class="image-caption">相位控制</figcaption>
    </figure>
<h2 id="5g-怎样实现波束赋形">5G 怎样实现波束赋形？</h2>
<p>由此可见，波束赋形的关键在于天线单元相位的管控，也就是天线权值的处理。</p>
<p>根据波束赋形处理位置和方式的不同，可分为</p>
<ul>
<li>数字波束赋形</li>
<li>模拟波束赋形</li>
<li>混合波束赋形</li>
</ul>
<h3 id="模拟波束赋形">模拟波束赋形</h3>
<p>所谓模拟波束赋形，就是通过处理射频信号权值，通过移相器来完成天线相位的调整，处理的位置相对靠后。</p>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_16.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_16.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_16.webp" data-sub-html="<h2>模拟波束赋形</h2>">
        
    </a><figcaption class="image-caption">模拟波束赋形</figcaption>
    </figure>
<p>模拟波束赋形的特点是基带处理的通道数量远小于天线单元的数量，因此容量上受到限制，并且天线的赋形完全是靠硬件搭建的，还会受到器件精度的影响，使性能受到一定的制约。</p>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_08.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_08.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_08.webp" data-sub-html="<h2>模拟波束赋形框图</h2>">
        
    </a><figcaption class="image-caption">模拟波束赋形框图</figcaption>
    </figure>
<h3 id="数字波束赋形">数字波束赋形</h3>
<p>数字波束赋形则在基带模块的时候就进行了天线权值的处理，基带处理的通道数和天线单元的数量相等，因此需要为每路数据配置一套射频链路。</p>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_11.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_11.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_11.webp" data-sub-html="<h2>数字波束赋形</h2>">
        
    </a><figcaption class="image-caption">数字波束赋形</figcaption>
    </figure>
<p>数字波束赋形的优点是</p>
<ul>
<li>赋形精度高</li>
<li>实现灵活</li>
<li>天线权值变换响应及时</li>
</ul>
<p>缺点是</p>
<ul>
<li>基带处理能力要求高</li>
<li>系统复杂</li>
<li>设备体积大</li>
<li>成本较高</li>
</ul>
<p>Sub6G 频段，作为当前 5G 容量的主力军，载波带宽可达 100MHz，一般采用采用数字波束赋形，通过 64 通道发射来实现小区内时频资源的多用户复用，下行最大可同时发射 24 路独立信号，上行独立接收 12 路数据，扛起了 5G 超高速率的大旗。</p>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_09.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_09.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_09.webp" data-sub-html="<h2>数字波束赋形框图</h2>">
        
    </a><figcaption class="image-caption">数字波束赋形框图</figcaption>
    </figure>
<p>在毫米波 mmWave 频段，由于频谱资源非常充沛，一个 5G 载波的带宽可达 400MHz，如果单个 AAU 支持两个载波的话，带宽就达到了惊人的 800MHz！</p>
<p>如果还要像 Sub6G 频段的设备一样支持数字波束赋形的话，对基带处理能力要求太高，并且射频部分功放的数量也要数倍增加，实现成本过高，功耗更是大得吓人。</p>
<h3 id="混合波束赋形">混合波束赋形</h3>
<p>因此，业界将数字波束赋形和模拟波束赋形结合起来，使在模拟端可调幅调相的波束赋形，结合基带的数字波束赋形，称之为混合波束赋形。</p>
<p>混合波束赋形数字和模拟融合了两者的优点：</p>
<ul>
<li>基带处理的通道数目明显小于模拟天线单元的数量</li>
<li>复杂度大幅下降</li>
<li>成本降低</li>
<li>系统性能接近全数字波束赋形</li>
<li>非常适用于高频系统</li>
</ul>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_03.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_03.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/5G/Beamforming/Beamforming_03.webp" data-sub-html="<h2>混合波束赋形框图</h2>">
        
    </a><figcaption class="image-caption">混合波束赋形框图</figcaption>
    </figure>
<p>这样一来，毫米波频段的设备基带处理的通道数较少，一般为 4T4R，但天线单元众多，可达 512 个，其容量的主要来源是超大带宽和波束赋形。</p>
<p>在波束赋形和 Massive MIMO 的加成之下，5G 在 Sub6G 频谱下单载波最多可达 7Gbps 的小区峰值速率，在毫米波频谱下单载波也最多达到了约 4.8Gbps 的小区峰值速率。</p>]]></description>
</item><item>
    <title>3GPP Releases</title>
    <link>https://www.techkoala.top/3gpp_releases/</link>
    <pubDate>Thu, 03 Sep 2020 15:16:34 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://www.techkoala.top/3gpp_releases/</guid>
    <description><![CDATA[<blockquote>
<p>Meanings of 3GPP releases</p>
</blockquote>
<h2 id="3gpp-release-schedule-and-summary">3GPP Release schedule and summary</h2>
<table>
<thead>
<tr>
<th>3GPP RELEASE</th>
<th>RELEASE DATE</th>
<th>DETAILS</th>
</tr>
</thead>
<tbody>
<tr>
<td>Phase 1</td>
<td>1992</td>
<td>Basic GSM</td>
</tr>
<tr>
<td>Phase 2</td>
<td>1995</td>
<td>GSM features including EFR Codec</td>
</tr>
<tr>
<td>Release 96</td>
<td>Q1 1997</td>
<td>GSM Updates, 14.4 kbps user data</td>
</tr>
<tr>
<td>Release 97</td>
<td>Q1 1998</td>
<td>GSM additional features, GPRS</td>
</tr>
<tr>
<td>Release 98</td>
<td>Q1 1999</td>
<td>GSM additional features, GPRS for PCS 1900, AMR, EDGE</td>
</tr>
<tr>
<td>Release 99</td>
<td>Q1 2000</td>
<td>3G UMTS incorporating WCDMA radio access</td>
</tr>
<tr>
<td>Release 4</td>
<td>Q2 2001</td>
<td>UMTS all-IP Core Network</td>
</tr>
<tr>
<td>Release 5</td>
<td>Q1 2002</td>
<td>IMS and HSDPA</td>
</tr>
<tr>
<td>Release 6</td>
<td>Q4 2004</td>
<td>HSUPA, MBMS, IMS enhancements, Push to Talk over Cellular, operation with WLAN</td>
</tr>
<tr>
<td>Release 7</td>
<td>Q4 2007</td>
<td>Improvements in QoS &amp; latency, VoIP, HSPA+, NFC integration, EDGE Evolution</td>
</tr>
<tr>
<td>Release 8</td>
<td>Q4 2008</td>
<td>Introduction of LTE, SAE, OFDMA, MIMO, Dual Cell HSDPA</td>
</tr>
<tr>
<td>Release 9</td>
<td>Q4 2009</td>
<td>WiMAX / LTE / UMTS interoperability, Dual Cell HSDPA with MIMO, Dual Cell HSUPA, LTE HeNB</td>
</tr>
<tr>
<td>Release 10</td>
<td>Q1 2011</td>
<td>LTE-Advanced, Backwards compatibility with Release 8 (LTE), Multi-Cell HSDPA</td>
</tr>
<tr>
<td>Release 11</td>
<td>Q3 2012</td>
<td>Heterogeneous networks (HetNet), Coordinated Multipoint (CoMP), In device Coexistence (IDC), Advanced IP interconnection of Services,</td>
</tr>
<tr>
<td>Release 12</td>
<td>March 2015</td>
<td>Enhanced Small Cells operation, Carrier Aggregation (2 uplink carriers, 3 downlink carriers, FDD/TDD carrier</td>
</tr>
<tr>
<td>Release 13</td>
<td>Q1 2016</td>
<td>LTE-U / LTE-LAA, LTE-M, Elevation beamforming / Full Dimension MIMO, Indoor positioning, LTE-M Cat 1.4MHz &amp; Cat 200kHz introduced</td>
</tr>
<tr>
<td>Release 14</td>
<td>Mid 2017</td>
<td>Elements on road to 5G</td>
</tr>
<tr>
<td>Release 15</td>
<td>End 2018</td>
<td>5G Phase 1 specification</td>
</tr>
<tr>
<td>Release 16</td>
<td>2020</td>
<td>5G Phase 2 specification</td>
</tr>
<tr>
<td>Release 17</td>
<td>~Sept 2021</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="参考">参考</h2>
<ul>
<li>[1] <a href="https://www.electronics-notes.com/articles/connectivity/3gpp/standards-releases.php" target="_blank" rel="noopener noreffer">3GPP Specification Release Numbers</a></li>
</ul>]]></description>
</item><item>
    <title>全站迁移到 Vercel</title>
    <link>https://www.techkoala.top/migrated_to_vercel/</link>
    <pubDate>Wed, 26 Aug 2020 16:18:53 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://www.techkoala.top/migrated_to_vercel/</guid>
    <description><![CDATA[<blockquote>
<p>加速访问！</p>
</blockquote>
<h2 id="when">When</h2>
<p>网站已于 2020-8-26 迁移至 <a href="https://vercel.com" target="_blank" rel="noopener noreffer">Vercel</a></p>
<h2 id="why">Why</h2>
<p>鉴于目前 <code>Github</code> 以及 <code>Cloudflare</code> 在国内的访问速度一日不如一日，所以开始寻找了替代服务。刚好有 V2er 发帖求助相同的需求，于是顺着<a href="https://www.v2ex.com/t/701487" target="_blank" rel="noopener noreffer">帖子</a>的推荐选择了 <code>Vercel</code>。</p>
<h2 id="what">What</h2>
<p>下面是 <code>Vercel</code> 官网的介绍：</p>
<div class="details admonition quote open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-quote-right fa-fw"></i>引用<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Vercel is a cloud platform for <strong>static sites</strong> and <strong>Serverless Functions</strong> that fits perfectly with your workflow. It enables developers to host <strong>Jamstack</strong> websites and web services that <strong>deploy instantly</strong>, <strong>scale automatically</strong>, and requires <strong>no supervision</strong>, all with <strong>no configuration</strong>.</div>
        </div>
    </div>
<p>相比于 <code>Github Pages</code>、<code>Netlify</code> 等，<code>Vercel</code> 拥有<strong>台湾</strong>和<strong>香港</strong>节点，对国内用户更加友好，并且免费套餐足够应付小流量情况了。</p>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Vercel/vercel.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Vercel/vercel.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Vercel/vercel.webp" data-sub-html="<h2>Vercel</h2>">
        
    </a><figcaption class="image-caption">Vercel</figcaption>
    </figure>
<h2 id="how">How</h2>
<p>此前，本网站是托管在 <code>Github Pages</code>,然后通过 <code>Clouflare</code> 进行代理访问，因此只需要在 <code>Cloudfalre</code> 原配置上就行修改即可。</p>
<ol>
<li>首先，直接使用 <code>Github</code> 账号（或 <code>Gitlab</code> 等）登录 <code>Vercel</code> 即可（<strong>注：</strong> 不可以使用 <code>QQ</code> 邮箱为主邮箱的 <code>Github</code> 账号，<code>Vercel</code> 不识别部分邮箱域名，如果你是，请到 <code>Github</code> 修改主邮箱）</li>
</ol>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Vercel/import.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Vercel/import.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Vercel/import.webp" data-sub-html="<h2>导入 Github 项目</h2>">
        
    </a><figcaption class="image-caption">导入 Github 项目</figcaption>
    </figure>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Vercel/import2.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Vercel/import2.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Vercel/import2.webp" data-sub-html="<h2>选择需要导入的文件夹，默认为根文件夹</h2>">
        
    </a><figcaption class="image-caption">选择需要导入的文件夹，默认为根文件夹</figcaption>
    </figure>
<ol start="2">
<li>完成导入后，配置你的预编译设置（由于本站是在本地使用 <code>Hugo</code> 编译好后 <code>push</code> 到 <code>Github</code> 上的所以这里选择 <code>Other</code>，然后勾选 <code>OVERRIDE</code>，不填写编译内容，表示不需要进行编译）如果你想要 <code>Vercel</code> 代替你编译，可以在这里选择相应的配置。</li>
</ol>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Vercel/build.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Vercel/build.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Vercel/build.webp" data-sub-html="<h2>编译选项</h2>">
        
    </a><figcaption class="image-caption">编译选项</figcaption>
    </figure>
<ol start="3">
<li>待你完成编译配置后，等待 <code>Vercel</code> 完成编译和部署，你就可以得到一个可以访问的网站了，当然域名是一个二级域名。接下来我们配置自定义域名，首先点击你的项目，进入 设置 &gt; 域名。然后添加你的域名，一开始你添加好的域名不会和图片上一样，会显示为正确配置，这是因为我们还需要到 <code>Cloudflare</code> 进行调整。</li>
</ol>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Vercel/domain.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Vercel/domain.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Vercel/domain.webp" data-sub-html="<h2>域名设置</h2>">
        
    </a><figcaption class="image-caption">域名设置</figcaption>
    </figure>
<ol start="4">
<li>
<p>来到 Cloudflare 的 DNS 配置页面，首先删除此前指向 Github Pages 的两个解析，然后添加一个<code>CNAME</code>类型的解析，设置名字设置为<code>www</code>,内容填入<code>cname.vercel-dns.com</code>；</p>
<p><strong>注：</strong> 关键一步是，这里一定要设置<code>Proxy Status</code>为<code>DNS only</code>，否则，你的网站依然会经过 <code>Cloudflare</code> 的代理来访问。</p>
</li>
</ol>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Vercel/cloudflare.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Vercel/cloudflare.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Vercel/cloudflare.webp" data-sub-html="<h2>Cloudflare DNS 配置</h2>">
        
    </a><figcaption class="image-caption">Cloudflare DNS 配置</figcaption>
    </figure>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>信息<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">这里我还添加一个 <code>A</code> 记录指向<code>76.76.21.21</code>，因为我默认将根域名跳转到<code>www</code>。这个根据实际情况决定，但同样记得设置设置<code>Proxy Status</code>为<code>DNS only</code>。</div>
        </div>
    </div>
<h2 id="参考">参考</h2>
<ul>
<li>[1] <a href="https://vercel.com/docs/introduction" target="_blank" rel="noopener noreffer">Introduction to Vercel</a></li>
</ul>]]></description>
</item><item>
    <title>DNS 列表</title>
    <link>https://www.techkoala.top/dns_list/</link>
    <pubDate>Fri, 21 Aug 2020 18:44:20 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://www.techkoala.top/dns_list/</guid>
    <description><![CDATA[<blockquote>
<p>列举国内外常用的 DNS</p>
</blockquote>
<h2 id="ipv4">IPv4</h2>
<h3 id="国内">国内</h3>
<h4 id="知名-dns-服务">知名 DNS 服务</h4>
<table>
<thead>
<tr>
<th>名称</th>
<th>IP 地址（首选）</th>
<th>IP 地址（备选）</th>
</tr>
</thead>
<tbody>
<tr>
<td>114 常规 DNS</td>
<td>114.114.114.114</td>
<td>114.114.115.115</td>
</tr>
<tr>
<td>114 拦截钓鱼病毒木马网站</td>
<td>114.114.114.119</td>
<td>114.114.115.119</td>
</tr>
<tr>
<td>114 拦截色情网站</td>
<td>114.114.114.110</td>
<td>114.114.115.110</td>
</tr>
<tr>
<td>阿里 AliDNS</td>
<td>223.5.5.5</td>
<td>223.6.6.6</td>
</tr>
<tr>
<td>百度 BaiduDNS</td>
<td>180.76.76.76</td>
<td></td>
</tr>
<tr>
<td>DNSPod DNS+</td>
<td>119.29.29.29</td>
<td>182.254.116.116</td>
</tr>
<tr>
<td>CNNIC SDNS</td>
<td>1.2.4.8</td>
<td>210.2.4.8</td>
</tr>
<tr>
<td>oneDNS</td>
<td>117.50.11.11</td>
<td>52.80.66.66</td>
</tr>
<tr>
<td>DNS 派电信/移动/铁通</td>
<td>101.226.4.6</td>
<td>218.30.118.6</td>
</tr>
<tr>
<td>DNS 派联通</td>
<td>123.125.81.6</td>
<td>140.207.198.6</td>
</tr>
</tbody>
</table>
<h4 id="全国各地电信-dns-服务器-ip-地址">全国各地电信 DNS 服务器 IP 地址</h4>
<table>
<thead>
<tr>
<th>名称</th>
<th>IP 地址（首选）</th>
<th>IP 地址（备选）</th>
</tr>
</thead>
<tbody>
<tr>
<td>安徽电信 DNS</td>
<td>61.132.163.68</td>
<td>202.102.213.68</td>
</tr>
<tr>
<td>北京电信 DNS</td>
<td>219.141.136.10</td>
<td>219.141.140.10</td>
</tr>
<tr>
<td>重庆电信 DNS</td>
<td>61.128.192.68</td>
<td>61.128.128.68</td>
</tr>
<tr>
<td>福建电信 DNS</td>
<td>218.85.152.99</td>
<td>218.85.157.99</td>
</tr>
<tr>
<td>甘肃电信 DNS</td>
<td>202.100.64.68</td>
<td>61.178.0.93</td>
</tr>
<tr>
<td>广东电信 DNS</td>
<td>202.96.128.86</td>
<td>202.96.128.166</td>
</tr>
<tr>
<td></td>
<td>202.96.134.33</td>
<td>202.96.128.68</td>
</tr>
<tr>
<td>广西电信 DNS</td>
<td>202.103.225.68</td>
<td>202.103.224.68</td>
</tr>
<tr>
<td>贵州电信 DNS</td>
<td>202.98.192.67</td>
<td>202.98.198.167</td>
</tr>
<tr>
<td>河南电信 DNS</td>
<td>222.88.88.88</td>
<td>222.85.85.85</td>
</tr>
<tr>
<td>黑龙江电信</td>
<td>219.147.198.230</td>
<td>219.147.198.242</td>
</tr>
<tr>
<td>湖北电信 DNS</td>
<td>202.103.24.68</td>
<td>202.103.0.68</td>
</tr>
<tr>
<td>湖南电信 DNS</td>
<td>222.246.129.80</td>
<td>59.51.78.211</td>
</tr>
<tr>
<td>江苏电信 DNS</td>
<td>218.2.2.2</td>
<td>218.4.4.4</td>
</tr>
<tr>
<td></td>
<td>61.147.37.1</td>
<td>218.2.135.1</td>
</tr>
<tr>
<td>江西电信 DNS</td>
<td>202.101.224.69</td>
<td>202.101.226.68</td>
</tr>
<tr>
<td>内蒙古电信</td>
<td>219.148.162.31</td>
<td>222.74.39.50</td>
</tr>
<tr>
<td>山东电信 DNS</td>
<td>219.146.1.66</td>
<td>219.147.1.66</td>
</tr>
<tr>
<td>陕西电信 DNS</td>
<td>218.30.19.40</td>
<td>61.134.1.4</td>
</tr>
<tr>
<td>上海电信 DNS</td>
<td>202.96.209.133</td>
<td>116.228.111.118</td>
</tr>
<tr>
<td></td>
<td>202.96.209.5</td>
<td>180.168.255.118</td>
</tr>
<tr>
<td>四川电信 DNS</td>
<td>61.139.2.69</td>
<td>218.6.200.139</td>
</tr>
<tr>
<td>天津电信 DNS</td>
<td>219.150.32.132</td>
<td>219.146.0.132</td>
</tr>
<tr>
<td>云南电信 DNS</td>
<td>222.172.200.68</td>
<td>61.166.150.123</td>
</tr>
<tr>
<td>浙江电信 DNS</td>
<td>202.101.172.35</td>
<td>61.153.177.196</td>
</tr>
<tr>
<td></td>
<td>61.153.81.75</td>
<td>60.191.244.5</td>
</tr>
</tbody>
</table>
<h4 id="全国各地联通-dns-服务器-ip-地址">全国各地联通 DNS 服务器 IP 地址</h4>
<table>
<thead>
<tr>
<th>名称</th>
<th>IP 地址（首选）</th>
<th>IP 地址（备选）</th>
</tr>
</thead>
<tbody>
<tr>
<td>北京联通 DNS</td>
<td>123.123.123.123</td>
<td>123.123.123.124</td>
</tr>
<tr>
<td></td>
<td>202.106.0.20</td>
<td>202.106.195.68</td>
</tr>
<tr>
<td>重庆联通 DNS</td>
<td>221.5.203.98</td>
<td>221.7.92.98</td>
</tr>
<tr>
<td>广东联通 DNS</td>
<td>210.21.196.6</td>
<td>221.5.88.88</td>
</tr>
<tr>
<td>河北联通 DNS</td>
<td>202.99.160.68</td>
<td>202.99.166.4</td>
</tr>
<tr>
<td>河南联通 DNS</td>
<td>202.102.224.68</td>
<td>202.102.227.68</td>
</tr>
<tr>
<td>黑龙江联通</td>
<td>202.97.224.69</td>
<td>202.97.224.68</td>
</tr>
<tr>
<td>吉林联通 DNS</td>
<td>202.98.0.68</td>
<td>202.98.5.68</td>
</tr>
<tr>
<td>江苏联通 DNS</td>
<td>221.6.4.66</td>
<td>221.6.4.67</td>
</tr>
<tr>
<td>内蒙古联通</td>
<td>202.99.224.68</td>
<td>202.99.224.8</td>
</tr>
<tr>
<td>山东联通 DNS</td>
<td>202.102.128.68</td>
<td>202.102.152.3</td>
</tr>
<tr>
<td></td>
<td>202.102.134.68</td>
<td>202.102.154.3</td>
</tr>
<tr>
<td>山西联通 DNS</td>
<td>202.99.192.66</td>
<td>202.99.192.68</td>
</tr>
<tr>
<td>陕西联通 DNS</td>
<td>221.11.1.67</td>
<td>221.11.1.68</td>
</tr>
<tr>
<td>上海联通 DNS</td>
<td>210.22.70.3</td>
<td>210.22.84.3</td>
</tr>
<tr>
<td>四川联通 DNS</td>
<td>119.6.6.6</td>
<td>124.161.87.155</td>
</tr>
<tr>
<td>天津联通 DNS</td>
<td>202.99.104.68</td>
<td>202.99.96.68</td>
</tr>
<tr>
<td>浙江联通 DNS</td>
<td>221.12.1.227</td>
<td>221.12.33.227</td>
</tr>
<tr>
<td>辽宁联通 DNS</td>
<td>202.96.69.38</td>
<td>202.96.64.68</td>
</tr>
</tbody>
</table>
<h4 id="全国各地移动-dns-服务器-ip-地址">全国各地移动 DNS 服务器 IP 地址</h4>
<table>
<thead>
<tr>
<th>名称</th>
<th>IP 地址（首选）</th>
<th>IP 地址（备选）</th>
</tr>
</thead>
<tbody>
<tr>
<td>江苏移动 DNS</td>
<td>221.131.143.69</td>
<td>112.4.0.55</td>
</tr>
<tr>
<td>安徽移动 DNS</td>
<td>211.138.180.2</td>
<td>211.138.180.3</td>
</tr>
<tr>
<td>山东移动 DNS</td>
<td>218.201.96.130</td>
<td>211.137.191.26</td>
</tr>
</tbody>
</table>
<h3 id="香港地区">香港地区</h3>
<table>
<thead>
<tr>
<th>名称</th>
<th>IP 地址（首选）</th>
<th>IP 地址（备选）</th>
</tr>
</thead>
<tbody>
<tr>
<td>香港宽频 DNS</td>
<td>203.80.96.10</td>
<td></td>
</tr>
<tr>
<td>和记环球电讯 DNS</td>
<td>202.45.84.58</td>
<td>202.45.84.59</td>
</tr>
<tr>
<td>Pacific SuperNet DNS</td>
<td>202.14.67.4</td>
<td>202.14.67.14</td>
</tr>
</tbody>
</table>
<h3 id="台湾地区">台湾地区</h3>
<table>
<thead>
<tr>
<th>名称</th>
<th>IP 地址（首选）</th>
<th>IP 地址（备选）</th>
</tr>
</thead>
<tbody>
<tr>
<td>中华电信 DNS</td>
<td>168.95.1.1</td>
<td>168.95.192.1</td>
</tr>
<tr>
<td>数位联合电信 DNS</td>
<td>139.175.252.16</td>
<td>139.175.55.244</td>
</tr>
<tr>
<td>台湾网路资讯</td>
<td>101.101.101.101</td>
<td>101.102.103.104</td>
</tr>
</tbody>
</table>
<h3 id="韩国">韩国</h3>
<table>
<thead>
<tr>
<th>名称</th>
<th>IP 地址（首选）</th>
<th>IP 地址（备选）</th>
</tr>
</thead>
<tbody>
<tr>
<td>KT olleh DNS</td>
<td>168.126.63.1</td>
<td>168.126.63.2</td>
</tr>
<tr>
<td>SK Broadband DNS</td>
<td>210.220.163.82</td>
<td>219.250.36.130</td>
</tr>
<tr>
<td>LG U+ DNS</td>
<td>164.124.101.2</td>
<td>203.248.252.2</td>
</tr>
<tr>
<td></td>
<td>164.124.107.9</td>
<td>203.248.242.2</td>
</tr>
</tbody>
</table>
<h3 id="美国">美国</h3>
<table>
<thead>
<tr>
<th>名称</th>
<th>IP 地址（首选）</th>
<th>IP 地址（备选）</th>
</tr>
</thead>
<tbody>
<tr>
<td>Cloudflare DNS</td>
<td>1.1.1.1</td>
<td>1.0.0.1</td>
</tr>
<tr>
<td>Google DNS</td>
<td>8.8.8.8</td>
<td>8.8.4.4</td>
</tr>
<tr>
<td>IBM Quad9</td>
<td>9.9.9.9</td>
<td>149.112.112.112</td>
</tr>
<tr>
<td>DNS.SB</td>
<td>185.222.222.222</td>
<td>185.184.222.222</td>
</tr>
<tr>
<td>OpenDNS</td>
<td>208.67.222.222</td>
<td>208.67.220.220</td>
</tr>
<tr>
<td>V2EX DNS</td>
<td>199.91.73.222</td>
<td>178.79.131.110</td>
</tr>
<tr>
<td>HE Public DNS</td>
<td>74.82.42.42</td>
<td>66.220.18.42</td>
</tr>
</tbody>
</table>
<h3 id="其他地区">其他地区</h3>
<table>
<thead>
<tr>
<th>名称</th>
<th>IP 地址（首选）</th>
<th>IP 地址（备选）</th>
</tr>
</thead>
<tbody>
<tr>
<td>俄罗斯 Yandex Public DNS</td>
<td>77.88.8.8</td>
<td>77.88.8.1</td>
</tr>
<tr>
<td>俄罗斯 SafeDNS</td>
<td>195.46.39.39</td>
<td>195.46.39.40</td>
</tr>
<tr>
<td>德国 DNS.WATCH Public DNS</td>
<td>84.200.69.80</td>
<td>84.200.70.40</td>
</tr>
<tr>
<td>瑞士 xiala.net Public DNS</td>
<td>77.109.148.136</td>
<td>77.109.148.137</td>
</tr>
<tr>
<td>丹麦 UncensoredDNS</td>
<td>91.239.100.100</td>
<td>89.233.43.71</td>
</tr>
<tr>
<td>荷兰 Freenom World Public DNS</td>
<td>80.80.80.80</td>
<td>80.80.81.81</td>
</tr>
</tbody>
</table>
<h2 id="ipv6">IPv6</h2>
<h3 id="国内-1">国内</h3>
<table>
<thead>
<tr>
<th>名称</th>
<th>IP 地址（首选）</th>
<th>IP 地址（备选）</th>
</tr>
</thead>
<tbody>
<tr>
<td>百度</td>
<td>2400:da00::6666</td>
<td></td>
</tr>
<tr>
<td>阿里</td>
<td>2400:3200::1</td>
<td>2400:3200:baba::1</td>
</tr>
<tr>
<td>CNNIC</td>
<td>2001:dc7:1000::1</td>
<td></td>
</tr>
<tr>
<td>下一代互联网北京研究中心</td>
<td>240C::6666</td>
<td>240C::6644</td>
</tr>
</tbody>
</table>
<h4 id="高校">高校</h4>
<table>
<thead>
<tr>
<th>名称</th>
<th>IP 地址（首选）</th>
<th>IP 地址（备选）</th>
</tr>
</thead>
<tbody>
<tr>
<td>北京邮电大学</td>
<td>2001:da8:202:10::36</td>
<td>2001:da8:202:10::37</td>
</tr>
<tr>
<td>上海交通大学</td>
<td>2001:da8:8000:1:202:120:2:100</td>
<td>2001:da8:8000:1:202:120:2:101</td>
</tr>
<tr>
<td>中科院网络信息中心</td>
<td>2001:cc0:2fff:1::6666</td>
<td></td>
</tr>
<tr>
<td>北京交通大学</td>
<td>2001:da8:205:2060::188</td>
<td></td>
</tr>
<tr>
<td>清华大学</td>
<td>2001:da8:ff:305:20c:29ff:fe1f:a92a</td>
<td></td>
</tr>
<tr>
<td>清华大学 TUNA 协会</td>
<td>2001:da8::666</td>
<td></td>
</tr>
<tr>
<td>北京科技大学</td>
<td>2001:da8:208:10::6</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="台湾地区-1">台湾地区</h3>
<table>
<thead>
<tr>
<th>名称</th>
<th>IP 地址（首选）</th>
<th>IP 地址（备选）</th>
</tr>
</thead>
<tbody>
<tr>
<td>中华电信</td>
<td>2001:b000:168::1</td>
<td>2001:b000:168::2</td>
</tr>
<tr>
<td>台湾网路资讯</td>
<td>2001:de4::101</td>
<td>2001:de4::102</td>
</tr>
</tbody>
</table>
<h3 id="美国-1">美国</h3>
<table>
<thead>
<tr>
<th>名称</th>
<th>IP 地址（首选）</th>
<th>IP 地址（备选）</th>
</tr>
</thead>
<tbody>
<tr>
<td>GOOGLE</td>
<td>2001:4860:4860::8888</td>
<td>2001:4860:4860::8844</td>
</tr>
<tr>
<td>CloudFlare DNS</td>
<td>2606:4700:4700::1111</td>
<td>2606:4700:4700::1001</td>
</tr>
<tr>
<td>IBM</td>
<td>2620:fe::fe</td>
<td>2620:fe::9</td>
</tr>
<tr>
<td>Cisco OpenDNS</td>
<td>2620:0:ccc::2</td>
<td>2620:0:ccd::2</td>
</tr>
<tr>
<td>HE Public DNS</td>
<td>2001:470:20::2</td>
<td>2001:470:0:9d::2</td>
</tr>
<tr>
<td>Verisign Public DNS</td>
<td>2620:74:1b::1:1</td>
<td>2620:74:1c::2:2</td>
</tr>
<tr>
<td>Neustar Recursive DNS</td>
<td>2610:a1:1018::1</td>
<td>2610:a1:1019::1</td>
</tr>
</tbody>
</table>
<h3 id="其他地区-1">其他地区</h3>
<table>
<thead>
<tr>
<th>名称</th>
<th>IP 地址（首选）</th>
<th>IP 地址（备选）</th>
</tr>
</thead>
<tbody>
<tr>
<td>俄罗斯 Yandex Public DNS</td>
<td>2a02:6b8::feed:0ff</td>
<td>2a02:6b8:0:1::feed:0ff</td>
</tr>
<tr>
<td>德国 DNS.WATCH Public DNS</td>
<td>2001:1608:10:25::1c04:b12f</td>
<td>2001:1608:10:25::9249:d69b</td>
</tr>
<tr>
<td>瑞士 xiala.net Public DNS</td>
<td>2001:1620:2078:136::</td>
<td>2001:1620:2078:137::</td>
</tr>
<tr>
<td>丹麦 UncensoredDNS</td>
<td>2001:67c:28a4::</td>
<td>2a01:3a0:53:53::</td>
</tr>
</tbody>
</table>
<h2 id="参考">参考</h2>
<ul>
<li>
<p>[1] <a href="https://www.iplaysoft.com/public-dns.html" target="_blank" rel="noopener noreffer">全球免费公共 dns 解析服务器 ip 地址列表推荐 (解决无法上网/加速/防劫持)</a></p>
</li>
<li>
<p>[2] <a href="http://ip.cn/dns.html" target="_blank" rel="noopener noreffer">公共 dns 服务器 ip 地址</a></p>
</li>
</ul>]]></description>
</item><item>
    <title>网络分析工具：NetCat</title>
    <link>https://www.techkoala.top/netcat/</link>
    <pubDate>Wed, 19 Aug 2020 23:15:35 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://www.techkoala.top/netcat/</guid>
    <description><![CDATA[<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/NetCat/netcat.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/NetCat/netcat.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/NetCat/netcat.webp" data-sub-html="<h2>网络瑞士军刀 —— NetCat</h2>">
        
    </a><figcaption class="image-caption">网络瑞士军刀 —— NetCat</figcaption>
    </figure>
<h2 id="什么是-netcat">什么是 NetCat</h2>
<p>简单来说，NetCat (nc) 是一个命令行工具，能够让你很方便、很灵活地操纵 <code>传输层协议</code>（TCP ＆ UDP）</p>
<p>nc 可以在两台设备上面相互交互，即<code>侦听模式</code>/<code>传输模式</code></p>
<p>nc 包含以下主要功能：</p>
<ul>
<li>Telnet 功能</li>
<li>获取 banner 信息</li>
<li>传输文本信息</li>
<li>传输文件 / 目录</li>
<li>加密传输文件，默认不加密</li>
<li>远程控制</li>
<li>加密所有流量</li>
<li>流媒体服务器</li>
<li>远程克隆硬盘</li>
</ul>
<h2 id="使用-netcat">使用 NetCat</h2>
<p>一般来说，nc 的命令行包括如下几个部分：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">nc 命令选项 主机 端口
</code></pre></td></tr></table>
</div>
</div><h3 id="命令选项">命令选项</h3>
<blockquote>
<p>本文内容基于 OpenBSD 社区的变种（也叫 OpenBSD netcat，部分命令与原版有差异。 ）</p>
</blockquote>
<p>下面列举了一些常用选项，更多选项参见 <a href="https://man.openbsd.org/nc.1" target="_blank" rel="noopener noreffer">OpenBSD manual page</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">选项	   是否有 “选项值”	   说明
-h	   NO	           输出 nc 的帮助
-v	   NO	           在网络通讯时，显示详细的输出信息
-n	   NO	           对命令行中的主机，不进行域名解析，如果主机是 IP 地址，需要用该选项
-p	  YES	           指定端口号
-l	  NO	           开启监听模式，nc 作为服务端，如不加，nc 默认作为客户端
-u	  NO	           使用 UDP 协，如不加该选项，默认是 TCP 协议
-w	  YES	           设置连接的超时间隔（N 秒）
-q	  YES	           让 nc 延时（N 秒）再退出
-z	  NO	           开启 zero-I/O 模式，该选项仅用于端口扫描
-k	  NO	           配合 -l 选项使用，可以重复接受客户端连接
-X	  YES	           指定代理的类型
-x	  YES	           以 IP:port 的格式指定代理
-d    NO               后台模式
</code></pre></td></tr></table>
</div>
</div><h3 id="主机">主机</h3>
<p>这部分可以没有，可以以 <code>IP 地址</code> 形式表示，也可以以 <code>域名</code> 形式表示。</p>
<h3 id="端口">端口</h3>
<p>这部分可以没有，可以是单个端口，可以是端口范围。</p>
<h2 id="常用使用场景示例">常用使用场景示例</h2>
<h3 id="测试某个远程主机的监听端口是否可达">测试某个远程主机的监听端口是否可达</h3>
<p>经常有这种需求，要判断某个主机的监听端口是否能连上。导致监听端口无法连接，通常有两种原因：</p>
<ol>
<li>监听端口没开启</li>
<li>监听端口虽然开启，但是被防火墙阻拦了</li>
</ol>
<p>对第 1 个原因，（如果你能在该主机上运行命令）可以直接用 <code>netstat</code> 这个命令查看监听端口是否开启；但对于第 2 个原因，<code>netstat</code> 就用不上了，这时候就可以用 nc 来帮你搞定。</p>
<p>用如下命令可以测试某个 IP 地址上的某个监听端口是否开启:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">nc -nv ip port
</code></pre></td></tr></table>
</div>
</div><p><strong>注：</strong>　默认情况下 nc 会等待很久，然后才告诉你连接失败。如果你所处的网络环境稳定且高速（比如：局域网内），那么，你可以追加 <code>-w</code> 选项，设置一个比较小的超时值。在下面的例子中，超时值设为 3 秒。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">nc -nv -w <span class="m">3</span> ip port
</code></pre></td></tr></table>
</div>
</div><h3 id="判断防火墙是否允许-or-禁止某个端口">判断防火墙是否允许 or 禁止某个端口</h3>
<p>假设你正在配置防火墙规则，禁止 TCP 的 8080 端口对外监听。那么，你如何验证自己的配置生效？</p>
<p>为了叙述方便，设想如下场景：
有两台主机 ——<code>主机 C</code> 充当客户端，<code>主机 S</code> 充当服务端。
然后要判断<code>主机 S</code> 上的防火墙是否会拦截其它主机对 8080 TCP 端口的连接。</p>
<p>在<code>主机 S</code> 上运行 nc，让它在 8080 端口，命令如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">nc -lv -p <span class="m">8080</span>
</code></pre></td></tr></table>
</div>
</div><p>然后在 “主机 C” 上运行 nc，测试 “主机 S” 上的 8080 端口是否可达</p>
<p><strong>注：</strong>　在默认情况下，nc 开启 listen 模式充当服务端，在接受<strong>第一次</strong>客户端连接之后，就会把监听端口关闭。如果你想要让 nc 始终监听模式，使之能<strong>重复</strong>接受客户端发起的连接，可以追加 <code>-k</code> 选项。</p>
<h3 id="端口扫描">端口扫描</h3>
<p>下面这个命令，用来扫描的端口范围从 1 到 1024</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">nc -znv ip 1-1024
</code></pre></td></tr></table>
</div>
</div><p>选项 -z
是指开启 <code>zero-I/O 模式</code>。该模式 nc 只判断某个监听端口是否能连上，连上后<strong>不</strong>与对端进行数据通讯。</p>
<p>**注：**端口扫描的时候，<code>-v</code> 选项会把成功/失败的结果统统打印出来。通常关注的都是 “扫描成功” 的那些端口。因此，可以用可以配合使用 <code>grep</code> 过滤一下，只打印扫出来的端口</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">nc -znv ip 1-1024  2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">|</span> grep succeeded
</code></pre></td></tr></table>
</div>
</div><p>此外，由于 <code>-v</code> 选项产生的输出位于 <code>stderr</code>，上述命令中的 <code>2&gt;&amp;1</code> 用来把 <code>stderr</code> 合并到 <code>stdout</code>。</p>
<p><strong>另：</strong> nc 默认超时较大，导致扫描速度较慢。建议根据网络情况合理设置超时值，加快扫描速度。</p>
<h3 id="探测服务器类型和软件版本">探测服务器类型和软件版本</h3>
<p>如果某个服务器运行了 SSH 服务端，那么用如下命令可以看出：该服务器的操作系统类型，以及 SSH server 的版本。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">echo</span> <span class="s2">&#34;EXIT&#34;</span> <span class="p">|</span> nc -vq <span class="m">5</span> -n ip <span class="m">22</span>
OR
<span class="nb">echo</span> <span class="s2">&#34;EXIT&#34;</span> <span class="p">|</span> nc -vq <span class="m">5</span> domain <span class="m">22</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="端口转发">端口转发</h3>
<p>用 nc 进行端口转发，需要运行两个 nc 进程，一个充当<code>服务端</code>，另一个是<code>客户端</code>，然后用管道让把两个进程的<code>标准输入输出``交叉配对</code>。所谓的<code>交叉配对</code>就是——每一个 nc 进程的<code>标准输出</code>都对接到另一个 nc 进程的<code>标准输入</code>。如此一来，就可以完美地建立双向通讯。</p>
<p>步骤 1：创建命名管道</p>
<p>用下面这个简单的命令创建一个 “命名管道”，其名称叫做 nc_pipe</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">mkfifo nc_pipe
</code></pre></td></tr></table>
</div>
</div><p>步骤 2：同时启动两个 nc</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">nc -l -p <span class="m">1234</span> &lt; nc_pipe <span class="p">|</span> nc 127.0.0.1 <span class="m">5678</span> &gt; nc_pipe
</code></pre></td></tr></table>
</div>
</div><p>运行上述命令之后，就可以把本机的 1235 端口重定向到本机的 5678 端口。</p>
<h3 id="传输文件">传输文件</h3>
<p>为了叙述方便，假设你有两台主机 A 与 B，你要把 A 主机上的文件 file1 传输到 B 主机上，保存为 file2</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">先在接收端 B 主机运行如下命令
nc -l -p port &gt; file2

然后在发送端 A 主机运行如下命令
nc ip port &lt; file1
</code></pre></td></tr></table>
</div>
</div><p>两者端口号要相同</p>
<h3 id="远程备份整个磁盘">远程备份整个磁盘</h3>
<p>假设你要把 A 主机 <code>/dev/sda</code> 磁盘的原始数据整个复制到 B 主机的 <code>/dev/sdb</code> 磁盘。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">先在接收端（B 主机）运行如下命令
nc -lp port <span class="p">|</span> dd <span class="nv">of</span><span class="o">=</span>/dev/sdb

然后在发送端 A 主机运行如下命令
dd <span class="k">if</span><span class="o">=</span>/dev/sda <span class="p">|</span> nc ip port
</code></pre></td></tr></table>
</div>
</div><h3 id="远程控制">远程控制</h3>
<p>将 A 主机的 <code>bash</code> 发给 B 主机</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">A:
nc -lp port -c bash

B:
nc ip port
</code></pre></td></tr></table>
</div>
</div><h3 id="流媒体服务">流媒体服务</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">A:
cat test.mp4 <span class="p">|</span> nc -lp port

B:
nc -nv ip port <span class="p">|</span> mplayer -vo x11 -cache <span class="m">4000</span>
</code></pre></td></tr></table>
</div>
</div><p>A 让 test.MP4 这个文件成为<code>流</code>的形式发送到 B，B 用 mplayer 播放，接收多少播放多少，指定缓存 4000bytes。</p>
<h3 id="信息收集">信息收集</h3>
<p>收集目标机上的进程信息</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">nc -l -p port &gt; ps.txt
将远程发送过来的内容保存在本地

Ps aux <span class="p">|</span>nc -nv ip port -q <span class="m">1</span>
标准输入完成后 delay 一秒钟，会发送到侦听端

</code></pre></td></tr></table>
</div>
</div><h2 id="参考">参考</h2>
<ul>
<li>
<p>[1] <a href="https://man.openbsd.org/nc.1" target="_blank" rel="noopener noreffer">netcat manual page</a></p>
</li>
<li>
<p>[2] <a href="https://program-think.blogspot.com/2019/09/Netcat-Tricks.html#head-15" target="_blank" rel="noopener noreffer">扫盲 netcat（网猫）的 N 种用法 —— 从 “网络诊断” 到 “系统入侵”</a></p>
</li>
<li>
<p>[3] <a href="https://www.jianshu.com/p/cb26a0f6c622" target="_blank" rel="noopener noreffer">NetCat 使用指南</a></p>
</li>
</ul>]]></description>
</item><item>
    <title>HTTPS 工作原理</title>
    <link>https://www.techkoala.top/how_https_works/</link>
    <pubDate>Sun, 16 Aug 2020 21:52:26 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://www.techkoala.top/how_https_works/</guid>
    <description><![CDATA[<blockquote>
<p>理解 HTTP 协议，对称和非对称加密，了解 HTTPS 协议的工作原理</p>
</blockquote>
<blockquote>
<p>注：本文系全文转载，原文信息如下：</p>
<p>作者：猫尾博客</p>
<p>链接：https://cattail.me/tech/2015/11/30/how-https-works.html</p>
<p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
</blockquote>
<p>读完本文，你能明白</p>
<ul>
<li>什么是 HTTPS，TLS (SSL)，TLS 和 HTTPS 是什么关系</li>
<li>什么是证书和数字签名，它们是如何传递信任的</li>
<li>HTTPS 有什么样的功能，它是如何实现这样的功能的</li>
</ul>
<h2 id="简介">简介</h2>
<p>HTTPS，也称作 HTTP over TLS。TLS 的前身是 SSL，TLS 1.0 通常被标示为 SSL 3.1，TLS 1.1 为 SSL 3.2，TLS 1.2 为 SSL 3.3。本文着重描述 TLS 协议的 1.2 版本</p>
<p>下图描述了在 TCP/IP 协议栈中 TLS (各子协议）和 HTTP 的关系</p>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/HTTPS/tcp-ip-model.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/HTTPS/tcp-ip-model.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/HTTPS/tcp-ip-model.webp" data-sub-html="<h2>Credit: Kaushal Kumar Panday From: SSL Handshake and HTTPS Bindings on IIS</h2>">
        
    </a><figcaption class="image-caption">Credit: <a href="https://blogs.msdn.com/213737/ProfileUrlRedirect.ashx" target="_blank" rel="noopener noreffer">Kaushal Kumar Panday</a> From: <a href="https://blogs.msdn.com/b/kaushal/archive/2013/08/03/ssl-handshake-and-https-bindings-on-iis.aspx" target="_blank" rel="noopener noreffer">SSL Handshake and HTTPS Bindings on IIS</a></figcaption>
    </figure>
<p>其中 <code>Handshake protocol</code>，<code>Change Ciper Spec protocol</code> 和 <code>Alert protocol</code> 组成了 <code>SSL Handshaking Protocols</code>。</p>
<p>HTTPS 和 HTTP 协议相比提供了:</p>
<ol>
<li>数据完整性：内容传输经过完整性校验</li>
<li>数据隐私性：内容经过对称加密，每个连接生成一个唯一的加密密钥</li>
<li>身份认证：第三方无法伪造服务端（客户端）身份</li>
</ol>
<p>其中，数据完整性和隐私性由 TLS Record Protocol 保证，身份认证由 TLS Handshaking Protocols 实现。</p>
<h2 id="总览">总览</h2>
<p>使用 RSA 算法的 SSL 握手过程是这样的:</p>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/HTTPS/ssl_handshake_rsa.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/HTTPS/ssl_handshake_rsa.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/HTTPS/ssl_handshake_rsa.webp" data-sub-html="<h2>Source: Keyless SSL: The Nitty Gritty Technical Details</h2>">
        
    </a><figcaption class="image-caption">Source: <a href="https://blog.cloudflare.com/keyless-ssl-the-nitty-gritty-technical-details/" target="_blank" rel="noopener noreffer">Keyless SSL: The Nitty Gritty Technical Details</a></figcaption>
    </figure>
<ol>
<li>[明文] 客户端发送随机数 client_random 和支持的加密方式列表</li>
<li>[明文] 服务器返回随机数 server_random ，选择的加密方式和服务器证书链</li>
<li>[RSA] 客户端验证服务器证书，使用证书中的公钥加密 premaster secret 发送给服务端</li>
<li>服务端使用私钥解密 premaster secret</li>
<li>两端分别通过 client_random，server_random 和 premaster secret 生成 master secret，用于对称加密后续通信内容</li>
</ol>
<h3 id="证书digital-certificate">证书（Digital certificate）</h3>
<p>那么什么是证书呢？</p>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/HTTPS/certificate.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/HTTPS/certificate.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/HTTPS/certificate.webp" data-sub-html="<h2>证书信息</h2>">
        
    </a><figcaption class="image-caption">证书信息</figcaption>
    </figure>
<h3 id="证书中包含了以下信息">证书中包含了以下信息</h3>
<ol>
<li>证书信息：过期时间和序列号</li>
<li>所有者信息：姓名等</li>
<li>所有者公钥</li>
</ol>
<p><strong>为什么服务端要发送证书给客户端?</strong></p>
<p>互联网有太多的服务需要使用证书来验证身份，以至于客户端（操作系统或浏览器等）无法内置所有证书，需要通过服务端将证书发送给客户端。</p>
<h3 id="客户端为什么要验证接收到的证书">客户端为什么要验证接收到的证书</h3>
<p><strong>中间人攻击</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">客户端 &lt;------------ 攻击者 &lt;------------ 服务端
        伪造证书            拦截请求
</code></pre></td></tr></table>
</div>
</div><h3 id="客户端如何验证接收到的证书">客户端如何验证接收到的证书</h3>
<p>为了回答这个问题，需要引入<code>数字签名</code> (Digital Signature)。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">+---------------------+
| A digital signature |
|(not to be confused  |
|with a digital       |
|certificate)         |              +---------+                +--------+
| is a mathematical   |---- 哈希 ---&gt;| 消息摘要  |--- 私钥加密 ---&gt;| 数字签名 |
|technique used       |              +---------+                +--------+
|to validate the      |
|authenticity and     |
|integrity of a       |
|message, software    |
|or digital document. |
+---------------------+
</code></pre></td></tr></table>
</div>
</div><p>将一段文本通过哈希（hash）和私钥加密处理后生成数字签名。</p>
<p>假设消息传递在 Bob，Susan 和 Pat 三人之间发生。Susan 将消息连同数字签名一起发送给 Bob，Bob 接收到消息后，可以这样验证接收到的消息就是 Susan 发送的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">+---------------------+
| A digital signature |
|(not to be confused  |
|with a digital       |
|certificate)         |              +---------+
| is a mathematical   |---- 哈希 ---&gt;|  消息摘要 |
|technique used       |              +---------+
|to validate the      |                 |
|authenticity and     |                 |
|integrity of a       |                 |
|message, software    |                 对
|or digital document. |                 比
+---------------------+                 |
                                        |
                                        |
        +---------+               +----------+
        | 数字签名 |--- 公钥解密 ---&gt;|  消息摘要 |
        +---------+               +----------+
</code></pre></td></tr></table>
</div>
</div><p>当然，这个前提是 Bob 知道 Susan 的公钥。更重要的是，和消息本身一样，公钥不能在不安全的网络中直接发送给 Bob。</p>
<p>此时就引入了<a href="https://en.wikipedia.org/wiki/Certificate_authority" target="_blank" rel="noopener noreffer">证书颁发机构</a>（Certificate Authority，简称 CA），CA 数量并不多，Bob 客户端内置了所有受信任 CA 的证书。CA 对 Susan 的公钥（和其他信息）数字签名后生成证书。</p>
<p>Susan 将证书发送给 Bob 后，Bob 通过 CA 证书的公钥验证证书签名。</p>
<p>Bob 信任 CA，CA 信任 Susan 使得 Bob 信任 Susan，信任链（Chain Of Trust）就是这样形成的。</p>
<p>事实上，Bob 客户端内置的是 CA 的根证书 (Root Certificate)，HTTPS 协议中服务器会发送证书链（Certificate Chain）给客户端。</p>
<h2 id="tls-协议">TLS 协议</h2>
<p><code>TLS</code> 协议包括 <code>TLS Record Protocol</code> 和 <code>TLS Handshake Protocol</code>。总览中的流程图仅涉及到 <code>TLS Handshake Protocol</code>。</p>
<h3 id="tls-record-protocol">TLS Record Protocol</h3>
<p>在 <code>TLS</code> 协议中，有四种子协议运行于 <code>Record protocol</code> 之上</p>
<ul>
<li>Handshake protocol</li>
<li>Alert protocol</li>
<li>Change cipher spec protocol</li>
<li>Application data protocol</li>
</ul>
<p>Record protocol 起到了这样的作用</p>
<ul>
<li>在发送端：将数据（Record）分段，压缩，增加 MAC (Message Authentication Code) 和加密</li>
<li>在接收端：将数据（Record）解密，验证 MAC，解压并重组</li>
</ul>
<blockquote>
<p>值得一提的是，Record protocol 提供了数据完整性和隐私性保证，但 Record 类型（type）和长度（length）是公开传输的</p>
</blockquote>
<p>Record Protocol 有三个连接状态 (Connection State)，连接状态定义了压缩，加密和 MAC 算法。所有的 Record 都是被当前状态（Current State）确定的算法处理的。</p>
<p><code>TLS Handshake Protocol</code> 和 <code>Change Ciper Spec Protocol</code> 会导致 <code>Record Protocol</code> 状态切换。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">empty state -------------------&gt; pending state ------------------&gt; current state
             Handshake Protocol                Change Cipher Spec
</code></pre></td></tr></table>
</div>
</div><p>初始当前状态（Current State）没有指定加密，压缩和 MAC 算法，因而在完成 TLS Handshaking Protocols 一系列动作之前，客户端和服务端的数据都是<strong>明文传输</strong>的；当 TLS 完成握手过程后，客户端和服务端确定了加密，压缩和 MAC 算法及其参数，数据（Record）会通过指定算法处理。</p>
<blockquote>
<p>其中，Record 首先被加密，然后添加 MAC（message authentication code）以保证数据完整性。</p>
</blockquote>
<h3 id="tls-handshaking-protocols">TLS Handshaking Protocols</h3>
<p>Handshakeing protocols 包括 Alert Protocol，Change Ciper Spec Protocol 和 Handshake protocol。本文不会详细介绍 Alert Protocol 和 Change Ciper Spec Protocol。</p>
<p>使用 <code>RSA</code> 算法的握手过程是这样的（已在总览中提到）</p>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/HTTPS/ssl_handshake_rsa.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/HTTPS/ssl_handshake_rsa.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/HTTPS/ssl_handshake_rsa.webp" data-sub-html="<h2>Source: Keyless SSL: The Nitty Gritty Technical Details</h2>">
        
    </a><figcaption class="image-caption">Source: <a href="https://blog.cloudflare.com/keyless-ssl-the-nitty-gritty-technical-details/" target="_blank" rel="noopener noreffer">Keyless SSL: The Nitty Gritty Technical Details</a></figcaption>
    </figure>
<p>客户端和服务端在握手 hello 消息中明文交换了 <code>client_random</code> 和 <code>server_random</code> ，使用 <code>RSA</code> 公钥加密传输 <code>premaster secret</code> ，最后通过算法，客户端和服务端分别计算 <code>master secret</code>。其中，不直接使用 <code>premaster secret</code> 的原因是：保证 <code>secret</code> 的随机性不受任意一方的影响。</p>
<p>除了使用 <code>RSA</code> 算法在公共信道交换密钥，还可以通过 <code>Diffie–Hellman</code> 算法。<code>Diffie–Hellman</code> 算法的原理是这样的</p>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/HTTPS/Diffie-Hellman_Key_Exchange.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/HTTPS/Diffie-Hellman_Key_Exchange.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/HTTPS/Diffie-Hellman_Key_Exchange.webp" data-sub-html="<h2>By Original schema: A.J. Han Vinck, University of Duisburg-Essen SVG version: Flugaal [Public domain], via Wikimedia Commons</h2>">
        
    </a><figcaption class="image-caption">By Original schema: A.J. Han Vinck, University of Duisburg-Essen SVG version: Flugaal [Public domain], via Wikimedia Commons</figcaption>
    </figure>
<p>使用 <code>Diffie–Hellman</code> 算法交换 <code>premaster secret</code> 的流程</p>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/HTTPS/ssl_handshake_diffie_hellman.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/HTTPS/ssl_handshake_diffie_hellman.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/HTTPS/ssl_handshake_diffie_hellman.webp" data-sub-html="<h2>Source: Keyless SSL: The Nitty Gritty Technical Details</h2>">
        
    </a><figcaption class="image-caption">Source: <a href="https://blog.cloudflare.com/keyless-ssl-the-nitty-gritty-technical-details/" target="_blank" rel="noopener noreffer">Keyless SSL: The Nitty Gritty Technical Details</a></figcaption>
    </figure>
<h2 id="小结">小结</h2>
<p><code>TLS Handshaking Protocols</code> 协商了 <code>TLS Record Protocol</code> 使用的算法和所需参数，并验证了服务端身份；</p>
<p><code>TLS Record Protocol</code> 在协商后保证应用层数据的完整性和隐私性。</p>
<p><code>TLS Handshaking Protocol</code> 的核心是在公开信道上传递 <code>premaster secret</code>。</p>
<h2 id="qa">Q&amp;A</h2>
<h3 id="为什么传输内容不直接使用非对称加密">为什么传输内容不直接使用非对称加密？</h3>
<p>因为性能限制。</p>
<h3 id="https-能保证正常连接">HTTPS 能保证正常连接？</h3>
<p>不能。</p>
<div class="details admonition quote open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-quote-right fa-fw"></i>引用<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">There are a number of ways in which a man-in-the-middle attacker can attempt to make two entities drop down to the least secure method they support.</div>
        </div>
    </div>
<p>攻击者甚至可以直接丢弃双方的数据包</p>
<h3 id="服务端如何验证客户端身份">服务端如何验证客户端身份？</h3>
<p>通过 <code>Client Certificate</code></p>
<div class="details admonition quote open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-quote-right fa-fw"></i>引用<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">This message conveys the client’s certificate chain to the server; the server will use it when verifying the CertificateVerify message (when the client authentication is based on signing) or calculating the premaster secret (for non-ephemeral Diffie- Hellman). The certificate MUST be appropriate for the negotiated cipher suite’s key exchange algorithm, and any negotiated extensions.</div>
        </div>
    </div>
<h3 id="alert-protocol-有什么作用">Alert protocol 有什么作用？</h3>
<p><code>Closure Alerts</code>：防止 <code>Truncation Attack</code></p>
<div class="details admonition quote open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-quote-right fa-fw"></i>引用<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">In a truncation attack, an attacker inserts into a message a TCP code indicating the message has finished, thus preventing the recipient picking up the rest of the message. To prevent this, SSL from version v3 onward has a closing handshake, so the recipient knows the message has not ended until this has been performed.</div>
        </div>
    </div>
<p>Error Alerts：错误处理</p>
<h3 id="master-secret-是如何计算的">master secret 是如何计算的</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">  master_secret = PRF (pre_master_secret, &#34;master secret&#34;,
                      ClientHello.random + ServerHello.random)
                      [0..47];
</code></pre></td></tr></table>
</div>
</div><h3 id="加密压缩和-mac-算法参数是如何计算的">加密，压缩和 MAC 算法参数是如何计算的</h3>
<p><code>Handshaking Protocols</code> 使得客户端和服务端交换了三个参数：<code>client_random</code>，<code>server_random</code> 和 <code>master_secret</code>，通过以下算法生成算法所需要的参数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">To generate the key material, compute

  key_block = PRF (SecurityParameters.master_secret,
                  &#34;key expansion&#34;,
                  SecurityParameters.`server_random` +
                  SecurityParameters.`client_random`);

until enough output has been generated.  Then, the key_block is
partitioned as follows:

  client_write_MAC_key [SecurityParameters.mac_key_length]
  server_write_MAC_key [SecurityParameters.mac_key_length]
  client_write_key [SecurityParameters.enc_key_length]
  server_write_key [SecurityParameters.enc_key_length]
  client_write_IV [SecurityParameters.fixed_iv_length]
  server_write_IV [SecurityParameters.fixed_iv_length]
</code></pre></td></tr></table>
</div>
</div><div class="details admonition quote open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-quote-right fa-fw"></i>引用<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">The master secret is expanded into a sequence of secure bytes, which is then split to a client write MAC key, a server write MAC key, a client write encryption key, and a server write encryption key</div>
        </div>
    </div>
<p>使用 <code>Diffie-Hellman</code> 算法的 <code>TLS</code> 握手细节</p>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/HTTPS/dh-detail.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/HTTPS/dh-detail.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/HTTPS/dh-detail.webp" data-sub-html="<h2>Source: https://cipherstuff.wordpress.com/</h2>">
        
    </a><figcaption class="image-caption">Source: <a href="https://cipherstuff.wordpress.com/">https://cipherstuff.wordpress.com/</a></figcaption>
    </figure>
<h2 id="拓展阅读">拓展阅读</h2>
<ul>
<li><a href="https://blog.cloudflare.com/keyless-ssl-the-nitty-gritty-technical-details/" target="_blank" rel="noopener noreffer">Keyless</a></li>
<li><a href="https://letsencrypt.org/" target="_blank" rel="noopener noreffer">Let’s Encrypt</a></li>
<li>Session resume</li>
<li>证书 Revoke</li>
</ul>
<h2 id="参考">参考</h2>
<ul>
<li>
<p>[1] <a href="https://tools.ietf.org/html/rfc5246" target="_blank" rel="noopener noreffer">TLS1.2 规范</a></p>
</li>
<li>
<p>[2] <a href="https://tools.ietf.org/html/rfc5280" target="_blank" rel="noopener noreffer">PKI 规范</a></p>
</li>
<li>
<p>[3] <a href="http://www.youdzone.com/signature.html" target="_blank" rel="noopener noreffer">证书和数字签名</a></p>
</li>
<li>
<p>[4] <a href="https://blog.cloudflare.com/keyless-ssl-the-nitty-gritty-technical-details/" target="_blank" rel="noopener noreffer">TLS Handshake</a></p>
</li>
</ul>]]></description>
</item><item>
    <title>如何高效搜索？</title>
    <link>https://www.techkoala.top/how_to_search/</link>
    <pubDate>Fri, 14 Aug 2020 12:50:34 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://www.techkoala.top/how_to_search/</guid>
    <description><![CDATA[<blockquote>
<p>如何在互联网上高效地找到自己想要的东西？</p>
</blockquote>
<p>搜索引擎方便了我们搜索资料，但是由于各种垃圾内容、网站地出现，实际上，搜索过程往往是十分低效的（特别是使用中文搜索）。因此，值得学习一些提升搜索效率必要的小技巧。</p>
<p>废话不多说，直接分类讲解：</p>
<h2 id="搜索语法">搜索语法</h2>
<p>首先总结一下常用的语法表达式：</p>
<table>
<thead>
<tr>
<th>operator</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td>&ldquo;phrase&rdquo;</td>
<td>结果必须包含 &ldquo;phrase&rdquo;</td>
</tr>
<tr>
<td>- phrase</td>
<td>结果排除 phrase</td>
</tr>
<tr>
<td>A AND B</td>
<td>A 和 B 必须同时包含</td>
</tr>
<tr>
<td>A OR B</td>
<td>必须包括 A 和 B 之一（或两者）</td>
</tr>
<tr>
<td>site:example.com</td>
<td>在网站中搜索</td>
</tr>
<tr>
<td>filetype:jpg</td>
<td>结果必须包含类型 .jpg</td>
</tr>
</tbody>
</table>
<h2 id="实例展示">实例展示</h2>
<h3 id="网页">网页</h3>
<p>查找网站内的特定页面（例如：本网站上的 <code>Trick</code> 标签）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">site:www.techkoala.top Trick
</code></pre></td></tr></table>
</div>
</div><p>查找必须在标题文本中包含短语的特定页面</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">allintitle:&#34;Github&#34; site:techkoala.com
</code></pre></td></tr></table>
</div>
</div><p>查找类似网站（仅谷歌搜索）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">related:techkoala.com
</code></pre></td></tr></table>
</div>
</div><p>您可以将运算符链接在一起 （例如：在 Url 中查找具有安全性或错误赏金）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">inurl:security OR inurl:bug-bounty OR site:hackerone.com) + &#34;techkoala&#34;
</code></pre></td></tr></table>
</div>
</div><p>您可以限制为某些顶级域（例如：教师列表）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">site:.edu filetype:xls inurl:&#34;email.xls&#34;
</code></pre></td></tr></table>
</div>
</div><h3 id="email">Email</h3>
<p>查找 Gmail 帐户</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">username &#34;@gmail.com&#34;
</code></pre></td></tr></table>
</div>
</div><p>查找工作帐户（您需要先找到他们的域）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">username  &#34;@techkoala.top&#34;
</code></pre></td></tr></table>
</div>
</div><p>模糊搜索的情况下，可以尝试猜测电子邮件的格式</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">&#34;username&#34; &#34;@&#34; &#34;.com&#34;
</code></pre></td></tr></table>
</div>
</div><p>在网站上查找电子邮件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">site:gumroad.com intext:&#34;@gumroad.com&#34;
</code></pre></td></tr></table>
</div>
</div><p>在网页上查找您访问的每封电子邮件，适用于每个网站，将其注入 Chrome 开发工具</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">var elems = document.body.getElementsByTagName (&#34;*&#34;);
var re = new RegExp (&#34;(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)&#34;);
for (var i = 0; i &lt; elems.length; i++) {
    if (re.test (elems [i].innerHTML)) {
        console.log (elems [i].innerHTML);
    }
}
</code></pre></td></tr></table>
</div>
</div><p>这将记录找到的每封电子邮件，而无需扫描整个页面。</p>
<h3 id="文件">文件</h3>
<p>查找电子表格</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">filetype:csv OR filetype:xlsx OR filetype:xls OR filetype:xltx OR filetype:xlt OR inurl:airtable.com/universe/
</code></pre></td></tr></table>
</div>
</div><p>查找谷歌文档和谷歌表格</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">site:docs.google.com &#34;techkoala&#34;
</code></pre></td></tr></table>
</div>
</div><h3 id="seo">SEO</h3>
<p>在锚文本中查找具有特定关键字的网站</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">inanchor:&#34;cyber security&#34;
</code></pre></td></tr></table>
</div>
</div><p>研究标题中包含特定关键字的博客帖子</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">inposttitle:&#34;diy slime&#34;
</code></pre></td></tr></table>
</div>
</div><p>查找反向链接 (例如：链接到特定博客帖子的其他网站)。注意：链接运算符 <code>link</code> 现在已弃用</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">intext:intercom.com/intercom-api-reference/reference
</code></pre></td></tr></table>
</div>
</div><p>使用通配符运算符查找关键字排列</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">* design tools
</code></pre></td></tr></table>
</div>
</div><p>使用给定的 widget 查找公司</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">intext:&#34;Powered by Intercom&#34; -site:intercom.com
</code></pre></td></tr></table>
</div>
</div><h1 id="待更新">待更新&hellip;</h1>
<h2 id="参考">参考</h2>
<ul>
<li>
<p>[1] <a href="https://www.alec.fyi/dorking-how-to-find-anything-on-the-internet.html" target="_blank" rel="noopener noreffer">dorking (how to find anything on the Internet)</a></p>
</li>
<li>
<p>[2] <a href="https://ahrefs.com/blog/google-advanced-search-operators/" target="_blank" rel="noopener noreffer">Google Search Operators: The Complete List (42 Advanced Operators)</a></p>
</li>
</ul>]]></description>
</item><item>
    <title>利用 Netlify 搭建 Koodo Reader</title>
    <link>https://www.techkoala.top/reader/</link>
    <pubDate>Wed, 12 Aug 2020 11:22:58 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://www.techkoala.top/reader/</guid>
    <description><![CDATA[<blockquote>
<p>搭建自己的在线 EPUB 阅读器</p>
</blockquote>
<h2 id="什么是-netlify">什么是 Netlify</h2>
<p>引用 <a href="https://www.netlify.com/" target="_blank" rel="noopener noreffer">Netlify 官网</a>的介绍：</p>
<div class="details admonition quote open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-quote-right fa-fw"></i>引用<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Netlify is a unified platform that automates your code to create high-performant, easily maintainable sites and web apps.</div>
        </div>
    </div>
<p>也就是说，<code>Netlify</code> 是一个提供静态网站托管的服务。它提供 <code>CI</code> 服务，能够将托管在 <code>GitHub</code>，<code>GitLab</code> 等网站上代码生成静态网站进行展示。类似于 <code>Github Pages</code>，不过功能更加丰富。</p>
<h2 id="koodo-reader">Koodo Reader</h2>
<p><code>Koodo Reader</code> 是一个基于 <code>React</code> 和 <code>Electron</code> 开发的 <code>Epub</code> 阅读器。</p>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/koodo1.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/koodo1.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/koodo1.webp" data-sub-html="<h2>Koodo Reader 首页</h2>">
        
    </a><figcaption class="image-caption">Koodo Reader 首页</figcaption>
    </figure>
<p>提供以下功能：</p>
<blockquote>
<p>📝 强大笔记和翻译功能，学习事半功倍</p>
<p>🚩 使用书架来为你的图书分类</p>
<p>🌎 支持 <strong>Windows</strong> ， <strong>MacOS</strong> 和 <strong>网页版</strong></p>
<p>🖥 绑定 <strong>OneDrive</strong>， <strong>Google Drive</strong>， <strong>Dropbox</strong> 等网盘，实现数据的多端同步</p>
<p>💻 您所有的数据都支持导入导出</p>
</blockquote>
<p>更多详情请点击 <a href="https://koodo.960960.xyz/" target="_blank" rel="noopener noreffer">Koodo Reader 官网</a> 查看。</p>
<h2 id="搭建">搭建</h2>
<ol>
<li>首先进入 <a href="https://www.netlify.com/" target="_blank" rel="noopener noreffer">Netlify 官网</a>，点击注册，这里我选择直接使用 <code>Github</code> 登录，当然，你也可以选择其他方式。</li>
</ol>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Sign_Up.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Sign_Up.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Sign_Up.webp" data-sub-html="<h2>Netlify 注册</h2>">
        
    </a><figcaption class="image-caption">Netlify 注册</figcaption>
    </figure>
<ol start="2">
<li>注册登陆后，进入首页，点击右上角的 <code>New Site from Git</code> ，创建一个新的站点。</li>
</ol>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/New_site.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/New_site.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/New_site.webp" data-sub-html="<h2>创建新站点</h2>">
        
    </a><figcaption class="image-caption">创建新站点</figcaption>
    </figure>
<ol start="3">
<li>接下来，点击下方的 <code>Github</code> 进行授权，这里会弹出一个新的窗口，让你授权 <code>Netlify</code> 访问你的 <code>Github</code> 账户，完成授权后进去下一步。</li>
</ol>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/New_site_github.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/New_site_github.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/New_site_github.webp" data-sub-html="<h2>使用Github 创建新站点</h2>">
        
    </a><figcaption class="image-caption">使用Github 创建新站点</figcaption>
    </figure>
<ol start="4">
<li>这一步会让你选择你将用于生成站点的库，这里我已经提前 Fork <a href="https://github.com/troyeguo/koodo-reader" target="_blank" rel="noopener noreffer">troyeguo 的 Koodo Reader 库</a>，所以直接选择即可。</li>
</ol>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/New_site_Auth.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/New_site_Auth.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/New_site_Auth.webp" data-sub-html="<h2>选择相应的 Repo</h2>">
        
    </a><figcaption class="image-caption">选择相应的 Repo</figcaption>
    </figure>
<ol start="5">
<li>接着，配置 <code>Build</code> 选项。在该项目的部署中，需要修改 <code>Build name &gt; yarn build</code>，<code>Publish directory &gt; build/ </code>，其他保持默认即可。（如果配置其他项目，这里的参数可能不同，请参考具体项目的指导说明）</li>
</ol>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Site_Setting.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Site_Setting.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Site_Setting.webp" data-sub-html="<h2>配置</h2>">
        
    </a><figcaption class="image-caption">配置</figcaption>
    </figure>
<ol start="6">
<li>到这里，已经完成了整个部署工作，等待 <code>Netlify</code> 构建完成即刻。</li>
</ol>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Deploying.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Deploying.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Deploying.webp" data-sub-html="<h2>配置</h2>">
        
    </a><figcaption class="image-caption">配置</figcaption>
    </figure>
<ol start="7">
<li><code>Netlify</code> 会给你默认分配一个二级域名用于访问，当然也支持自定义域名，这里我绑定了自己域名。除了在此处绑定外，还需要配置 <code>DNS</code> 等等，这个请自行完成。（由于搭建博客时，已经完成了相应设置，因此，我直接在 <code>Cloudfalre</code> 新建了一个 <code>CNAME</code> 指向 <code>Netlify</code> 给我的域名就好了）</li>
</ol>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Domain_Setting.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Domain_Setting.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Web/Reader/Domain_Setting.webp" data-sub-html="<h2>配置</h2>">
        
    </a><figcaption class="image-caption">配置</figcaption>
    </figure>
<ol start="8">
<li>大功告成，来<a href="https://reader.techkoala.top/" target="_blank" rel="noopener noreffer">这里</a>看看书吧。</li>
</ol>
<h2 id="后续">后续</h2>
<p>如果需要对网站进行更新，只需要关注你的 <code>Github Repo</code> 即可。每次 commit 之后，<code>Netlify</code> 都会自动拉取更新并生成。</p>
<h2 id="参考">参考</h2>
<ul>
<li>[1] <a href="https://github.com/troyeguo/koodo-reader" target="_blank" rel="noopener noreffer">koodo-reader</a></li>
</ul>]]></description>
</item><item>
    <title>网络测试工具：iPerf</title>
    <link>https://www.techkoala.top/iperf/</link>
    <pubDate>Fri, 07 Aug 2020 17:45:55 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://www.techkoala.top/iperf/</guid>
    <description><![CDATA[<blockquote>
<p>TCP、UDP 和 SCTP 的终极速度测试工具</p>
</blockquote>
<h2 id="什么是-iperf">什么是 iPerf</h2>
<p>iPerf 是一个用于测量网络最大带宽的小工具。iPerf 可以测试最大 TCP 和 UDP 带宽性能，具有多种参数和 UDP 特性，可以根据需要调整，可以报告带宽、延迟抖动和数据包丢失。对于每个测试，它都会报告带宽，丢包和其他参数。</p>
<p>现在的版本也称 iPerf3，这是对 NLANR/DAST 开发的原始版本的重新设计。</p>
<p><strong>注意</strong>：iPerf3 与此前版本的 iPerf 不兼容。</p>
<h2 id="安装-iperf">安装 iPerf</h2>
<p>iPerf3 官方仅支持 CentOS Linux，FreeBSD 和 macOS，但实际上，<a href="https://iperf.fr/iperf-download.php" target="_blank" rel="noopener noreffer">官网</a>提供了主流系统的预编译文件。（包括 Windows、Android、iOS、Ubuntu、Arch Linux 等）</p>
<p>类 UNIX 系统直接使用包管理进行安装即可，例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ sudo apt install iperf3
</code></pre></td></tr></table>
</div>
</div><h2 id="使用-iperf">使用 iPerf</h2>
<p>首先，介绍服务端和客户端共有的参数：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">-p, --port n      服务器用于侦听和客户端连接的服务器端口，两者应该相同，默认值为 <span class="m">5201</span>
--cport n         指定客户端端口
-f, --format      用于指定单位显示格式，支持 <span class="s1">&#39;k&#39;</span> <span class="o">=</span> Kbits/sec <span class="s1">&#39;K&#39;</span> <span class="o">=</span> KBytes/sec <span class="s1">&#39;m&#39;</span> <span class="o">=</span> Mbits/sec <span class="s1">&#39;M&#39;</span> <span class="o">=</span> MBytes/sec，默认为自适应格式
-i, --interval n  设置测试信息报告之间的间隔时间（以秒为单位）。如果为零，则不打印任何定期报告。默认值为零。
-F, --file name   客户端：从文件读取并写入网络，而不是使用随机数据；服务器端：从网络读取并写入文件，而不是丢弃数据。
-A, --affinity    如果可以，设置 CPU 关联（仅限 Linux 和 FreeBSD）。
-B, --bind host   绑定到主机。对于客户端，这将设置出站接口。对于服务器，这将设置传入接口。这只适用于具有多个网络接口的多宿主主机。
-V, --verbose     提供更详细的输出
-J, --json        以 JSON 格式输出
--logfile file    输出到日志文件
--d, --debug      发出调试输出
-v, --version     输出版本信息
-h, --help        输出帮助信息
</code></pre></td></tr></table>
</div>
</div><p>服务端特有参数：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">-s, --server      在服务器模式下运行 iPerf（一次只允许一个 iPerf 连接）
-D, --daemon      将服务器作为守护进程在后台运行
-I, --pidfilefile 使用进程ID编写文件，这在作为守护进程运行时非常有用
</code></pre></td></tr></table>
</div>
</div><p>客户端特有参数:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">-c, --client host	    在客户端模式下运行 iPerf
--sctp	                使用 SCTP 而不是 TCP
-u, --udp	            使用 UDP 而不是 TCP
-b, --bandwidth      	将目标带宽设置为 nbits/sec（对于 UDP 默认为 <span class="m">1</span> Mbit/sec，对于 TCP 为无限制）。如果有多个流（-P 标志），则带宽限制将分别应用于每个流。您还可以在带宽说明符中添加一个 “/” 和一个数字。这称为 “突发模式”。 它会发送给定数量的数据包而不会暂停，即使该数据包暂时超过了指定的带宽限制
-t, --time  	        传输的时间（以秒为单位）。iPerf 通常通过在 t 时间内重复发送 len 长度的字节数组来工作。默认值为 <span class="m">10</span> 秒
-n, --num 	            要传输的缓冲区数量。通常，iPerf 只会发送 <span class="m">10</span> 秒。-n 选项覆盖此设置，并发送 len 长度字节数组 n 次，无论需要多长时间
-k, --blockcount    	要传输的块（数据包）数
-l, --length     	    读取或写入的缓冲区的长度，iPerf 通过多次写入 len 个字节的数组来工作。TCP 的默认值为 <span class="m">128</span> KB，UDP 的默认值为 <span class="m">8</span> KB。
-P, --parallel  	    与服务器同时建立的连接数，默认值为 <span class="m">1</span>
-R, --reverse	        以反向模式运行（服务器发送，客户端接收）
-w, --window    	    将套接字缓冲区大小设置为指定值。对于 TCP，这将设置 TCP 窗口大小（这将发送到服务器并在该侧使用）
-M, --set-mss  	        尝试设置 TCP 最大段大小（MSS）。MSS 通常是 MTU-TCP/IP 标头的 <span class="m">40</span> 个字节。对于以太网，MSS 为 <span class="m">1460</span> 字节（1500 字节 MTU）
-N, --no-delay	        设置 “TCP no delay” 选项，禁用 Nagle 的算法。通常，仅对交互式应用程序（如 telnet）禁用此功能
-4, --version4	        仅使用 IPv4.
-6, --version4	        仅使用 IPv6.
-S, --tos               传出数据包的服务类型。<span class="o">(</span>许多路由器会忽略TOS字段。）可以使用十六进制值（0x）作为前缀，使用八进制数（0）作为前缀，或者使用十进制来指定值。 例如，<span class="s1">&#39;0x10&#39;</span><span class="nv">十六进制</span><span class="o">=</span><span class="s1">&#39;020&#39;</span><span class="nv">八进制</span><span class="o">=</span><span class="s1">&#39;16&#39;</span>十进制。RFC 1349中指定的TOS编号为：
                        IPTOS_LOWDELAY     minimize delay        0x10
                        IPTOS_THROUGHPUT   maximize throughput   0x08
                        IPTOS_RELIABILITY  maximize reliability  0x04
                        IPTOS_LOWCOST      minimize cost         0x02
-L, --flowlabel  	    设置 IPv6 流标签（当前仅在 Linux 上受支持）
-Z, --zerocopy	        使用 “零拷贝” 方法发送数据，如 sendfile（2），而不是通常的 write（2）。这样可以占用更少的 CPU
-O, --omit  	        省略测试的前 n 秒，以跳过 TCP TCP 慢启动周期
-T, --title             为每个输出行添加此字符串前缀
-C, --linux-congestion  设置拥塞控制算法 <span class="o">(</span>仅适用于 iPerf 3.1 的 Linux 和 FreeBSD<span class="o">)</span>。
</code></pre></td></tr></table>
</div>
</div><div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>注意<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">从客户端专有选项可以看出，iPerf 默认测试的是从客户端发送到服务端，相对于客户端来说，测试就是上行链路的带宽，对于一般参考意义更大的下行链路需要加上 <code>-R</code> 选项。</div>
        </div>
    </div>
<p>常用启用参数：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">服务端
$ iperf3 -s -p <span class="m">12345</span> -i <span class="m">1</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">客户端
$ iperf3 -c 192.168.1.43 -p <span class="m">12345</span> -i <span class="m">1</span> -t <span class="m">20</span> -w 100k
</code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/iperf/iperf.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/iperf/iperf.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/iperf/iperf.webp" data-sub-html="<h2>iPerf 使用实例</h2>">
        
    </a><figcaption class="image-caption">iPerf 使用实例</figcaption>
    </figure>
<h2 id="参考">参考</h2>
<ul>
<li>
<p>[1] <a href="https://iperf.fr/iperf-doc.php" target="_blank" rel="noopener noreffer">iPerf user docs</a></p>
</li>
<li>
<p>[2] <a href="https://github.com/esnet/iperf" target="_blank" rel="noopener noreffer">iPerf Github</a></p>
</li>
</ul>]]></description>
</item><item>
    <title>文件传输系列：SFTP</title>
    <link>https://www.techkoala.top/sftp/</link>
    <pubDate>Thu, 06 Aug 2020 14:07:53 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://www.techkoala.top/sftp/</guid>
    <description><![CDATA[<blockquote>
<p>SCP 的继承者</p>
</blockquote>
<h2 id="什么是-sftp">什么是 SFTP</h2>
<p>首先需要明确的是，SFTP（SSH File Transfer Protocol）不是运行在 SSH 上的 FTP，而是由 IETF（Internet Engineering Task Force）工作组设计的新协议，将其作为 SSH 2.0 版的扩展，提供安全的文件传输功能。因此，没有单独的 SFTP 端口，而是使用普通的 SSH 端口。协议本身不提供身份验证和安全性，而是期望底层协议提供。</p>
<p>与仅允许文件传输的 SCP 协议相比，SFTP 协议允许对远程文件进行一系列操作，这使其更像远程文件系统协议。SFTP 客户端还支持包括恢复中断的传输，目录列表和远程文件删除等功能。此外，上传的文件可以与它们的基本属性相关联，例如时间戳。相比普通 FTP 协议，这是一项优势。</p>
<p>尽管 SFTP 最常在 Unix 平台上实现，但 SFTP 在主流平台都可用。</p>
<div class="details admonition quote open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-quote-right fa-fw"></i>引用<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">有关 SFTP 详细草案参见 <a href="https://assets.ctfassets.net/0lvk5dbamxpi/6jBxT5LDgMqutNK4mPTGKd/4fa27cb4a130bca3b48a10c9045b0497/draft-ietf-secsh-filexfer-02" target="_blank" rel="noopener noreffer">draft-ietf-secsh-filexfer-02</a></div>
        </div>
    </div>
<h2 id="使用-sftp">使用 SFTP</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sftp 选项 参数
</code></pre></td></tr></table>
</div>
</div><h3 id="选项">选项</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">-B：指定传输文件时缓冲区的大小；
-l：使用 ssh 协议版本 1；
-b：指定批处理文件；
-C：使用压缩；
-o：指定 ssh 选项；
-F：指定 ssh 配置文件；
-R：指定一次可以容忍多少请求数；
-v：升高日志等级。
</code></pre></td></tr></table>
</div>
</div><h3 id="参数">参数</h3>
<p>目标主机：指定 SFTP 服务器 IP 地址或者主机名。</p>
<h2 id="参考">参考</h2>
<ul>
<li>
<p>[1] <a href="https://en.wikipedia.org/wiki/SSH_File_Transfer_Protocol" target="_blank" rel="noopener noreffer">SSH File Transfer Protocol</a></p>
</li>
<li>
<p>[2] <a href="https://jaywcjlove.gitee.io/linux-command/c/sftp.html" target="_blank" rel="noopener noreffer">SFTP Command</a></p>
</li>
</ul>]]></description>
</item></channel>
</rss>
