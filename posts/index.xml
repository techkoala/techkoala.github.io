<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - TechKoala - Input/Output</title>
        <link>https://www.techkoala.top/posts/</link>
        <description>所有文章 | TechKoala - Input/Output</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>admin@techkoala.top (TechKoala)</managingEditor>
            <webMaster>admin@techkoala.top (TechKoala)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 20 Jan 2023 11:03:05 &#43;0800</lastBuildDate><atom:link href="https://www.techkoala.top/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Wi-Fi 7 概述</title>
    <link>https://www.techkoala.top/wi-fi7_synopsis/</link>
    <pubDate>Fri, 20 Jan 2023 11:03:05 &#43;0800</pubDate><author>
        <name>TechKoala</name>
    </author><guid>https://www.techkoala.top/wi-fi7_synopsis/</guid>
    <description><![CDATA[<blockquote>
<p>Wi-Fi 7 变化的总结描述</p>
</blockquote>
<h2 id="wi-fi-7-的发布时间" class="headerLink">
    <a href="#wi-fi-7-%e7%9a%84%e5%8f%91%e5%b8%83%e6%97%b6%e9%97%b4" class="header-mark"></a>Wi-Fi 7 的发布时间</h2><p>IEEE 802.11be EHT 工作组已于 2019 年 5 月成立，802.11be（Wi-Fi 7）的开发工作仍在进行中，整个协议标准将按照两个 Release 发布，Release1 预计在 2021 年将发布第一版草案 Draft1.0，预期在 2022 年底发布标准；Release2 预计在 2022 年初启动，并且在 2024 年底完成标准发布。</p>
<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/Wi-Fi/7/20220505143230.png" title="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/Wi-Fi/7/20220505143230.png" data-thumbnail="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/Wi-Fi/7/20220505143230.png" data-sub-html="<h2>会议进程</h2>">
        
    </a><figcaption class="image-caption">会议进程</figcaption>
    </figure>
<h2 id="wi-fi-7-vs-wi-fi-6" class="headerLink">
    <a href="#wi-fi-7-vs-wi-fi-6" class="header-mark"></a>Wi-Fi 7 vs Wi-Fi 6</h2><figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/Wi-Fi/7/20220427104250.png" title="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/Wi-Fi/7/20220427104250.png" data-thumbnail="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/Wi-Fi/7/20220427104250.png" data-sub-html="<h2>特性对比</h2>">
        
    </a><figcaption class="image-caption">特性对比</figcaption>
    </figure>
<h2 id="wi-fi-7-支持的新特性" class="headerLink">
    <a href="#wi-fi-7-%e6%94%af%e6%8c%81%e7%9a%84%e6%96%b0%e7%89%b9%e6%80%a7" class="header-mark"></a>Wi-Fi 7 支持的新特性</h2><p>Wi-Fi 7 协议的目标是将 <a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/WLAN.html" title="WLAN" target="_blank" rel="noopener noreferrer">WLAN</a> 网络的吞吐率提升到 30Gbps，并且提供低时延的接入保障。为了满足这个目标，整个协议在 PHY 层和 MAC 层都做了相应的改变。相对于 <a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/WiFi&#43;6.html" title="WiFi 6" target="_blank" rel="noopener noreferrer">Wi-Fi 6</a> 协议，Wi-Fi 7 协议带来的主要技术变革点如下：</p>
<h3 id="新频段" class="headerLink">
    <a href="#%e6%96%b0%e9%a2%91%e6%ae%b5" class="header-mark"></a>新频段</h3><p>相比 Wi-Fi 6，7 引入了 6GHz 频段（6e 也有），上下限分别为 5.925 —— 7.125 GHz：
<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/Wi-Fi/7/20220429105054.png" title="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/Wi-Fi/7/20220429105054.png" data-thumbnail="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/Wi-Fi/7/20220429105054.png" data-sub-html="<h2>频段说明</h2>">
        
    </a><figcaption class="image-caption">频段说明</figcaption>
    </figure></p>
<h3 id="支持最大-320mhz-带宽" class="headerLink">
    <a href="#%e6%94%af%e6%8c%81%e6%9c%80%e5%a4%a7-320mhz-%e5%b8%a6%e5%ae%bd" class="header-mark"></a>支持最大 320MHz 带宽</h3><p>2.4GHz 和 5GHz 频段免授权频谱有限且拥挤，现有 <a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/WiFi.html" title="WiFi" target="_blank" rel="noopener noreferrer">Wi-Fi</a> 在运行 VR/AR 等新兴应用时，不可避免地会遇到 <a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/QoS.html" title="QoS" target="_blank" rel="noopener noreferrer">QoS</a> 低的问题。为了实现最大吞吐量不低于 30Gbps 的目标，Wi-Fi 7 将继续引入 6GHz 频段，并增加新的带宽模式，包括连续 240MHz，非连续 160+80MHz，连续 320 MHz 和非连续 160+160MHz。</p>
<h3 id="支持-multi-ru-机制" class="headerLink">
    <a href="#%e6%94%af%e6%8c%81-multi-ru-%e6%9c%ba%e5%88%b6" class="header-mark"></a>支持 Multi-RU 机制</h3><p>在 Wi-Fi 6 中，每个用户只能在分配到的特定 RU 上发送或接收帧，大大限制了频谱资源调度的灵活性。为解决该问题，进一步提升频谱效率，Wi-Fi 7 中定义了允许将多个 RU 分配给单用户的机制。当然，为了平衡实现的复杂度和频谱的利用率，协议中对 RU 的组合做了一定的限制，即：小规格 RU（小于 242-Tone 的 RU）只能与小规格 RU 合并，大规格 RU（大于等于 242-Tone 的 RU）只能与大规格 RU 合并，不允许小规格 RU 和大规格 RU 混合使用。</p>
<h3 id="引入更高阶的-4096-qam-调制技术" class="headerLink">
    <a href="#%e5%bc%95%e5%85%a5%e6%9b%b4%e9%ab%98%e9%98%b6%e7%9a%84-4096-qam-%e8%b0%83%e5%88%b6%e6%8a%80%e6%9c%af" class="header-mark"></a>引入更高阶的 4096-QAM 调制技术</h3><p>Wi-Fi 6 的最高调制方式是 1024-QAM，其中调制符号承载 10bits。为了进一步提升速率，Wi-Fi 7 将会引入 4096-QAM，使得调制符号承载 12bit。在相同的编码下，Wi-Fi 7 的 4096-QAM 比 Wi-Fi 6 的 1024-QAM 可以获得 20% 的速率提升。</p>
<h3 id="引入-multi-link-多链路机制" class="headerLink">
    <a href="#%e5%bc%95%e5%85%a5-multi-link-%e5%a4%9a%e9%93%be%e8%b7%af%e6%9c%ba%e5%88%b6" class="header-mark"></a>引入 Multi-Link 多链路机制</h3><p>为了实现所有可用频谱资源的高效利用，迫切需要在 2.4 GHz、5 GHz 和 6 GHz 上建立新的频谱管理、协调和传输机制。工作组定义了多<a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/LACP.html" title="LACP" target="_blank" rel="noopener noreferrer">链路聚合</a>相关的技术，主要包括增强型多链路聚合的 MAC 架构、多链路信道接入和多链路传输等相关技术。</p>
<h3 id="支持更多的数据流mimo-功能增强" class="headerLink">
    <a href="#%e6%94%af%e6%8c%81%e6%9b%b4%e5%a4%9a%e7%9a%84%e6%95%b0%e6%8d%ae%e6%b5%81mimo-%e5%8a%9f%e8%83%bd%e5%a2%9e%e5%bc%ba" class="header-mark"></a>支持更多的数据流，MIMO 功能增强</h3><p>在 Wi-Fi 7 中，空间流的数从 Wi-Fi 6 的 8 个增加到 16 个，理论上可以将物理传输速率提升两倍以上。支持更多的数据流也将会带来更强大的特性——分布式 <a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/MIMO.html" title="MIMO" target="_blank" rel="noopener noreferrer">MIMO</a>，意为 16 条数据流可以不由一个接入点提供，而是由多个接入点同时提供，这意味着多个 AP 之间需要相互协同进行工作。</p>
<h3 id="支持多-ap-间的协同调度" class="headerLink">
    <a href="#%e6%94%af%e6%8c%81%e5%a4%9a-ap-%e9%97%b4%e7%9a%84%e5%8d%8f%e5%90%8c%e8%b0%83%e5%ba%a6" class="header-mark"></a>支持多 AP 间的协同调度</h3><p>目前在 802.11 的协议框架内，AP 之间实际上是没有太多协作的关系。自动调优、智能漫游等常见的 WLAN 功能都属于厂商自定义的特性。AP 间协作的目的也仅是优化信道选择，调整 AP 间负载等，以实现射频资源高效利用、均衡分配的目的。Wi-Fi 7 中的多 AP 间的协同调度，包括小区间的在时域和频域的协调规划，小区间的干扰协调，以及分布式 MIMO，可以有效降低 AP 之间的干扰，极大的提升空口资源的利用率。</p>
<p>多 AP 间的协同调度的方式有很多，包括 C-OFDMA（Coordinated <a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/OFDMA.html" title="OFDMA" target="_blank" rel="noopener noreferrer">Orthogonal Frequency-Division Multiple Access</a>）、CSR（Coordinated Spatial Reuse）、CBF（Coordinated <a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/%E6%B3%A2%E6%9D%9F%E6%88%90%E5%BD%A2.html" title="波束成形" target="_blank" rel="noopener noreferrer">Beamforming</a>）和 JXT（Joint Transmission）等。</p>]]></description>
</item><item>
    <title>快速调整 Hyper-V 虚拟机磁盘大小</title>
    <link>https://www.techkoala.top/resize_vm_lvm_disk_size/</link>
    <pubDate>Thu, 02 Sep 2021 11:25:59 &#43;0800</pubDate><author>
        <name>TechKoala</name>
    </author><guid>https://www.techkoala.top/resize_vm_lvm_disk_size/</guid>
    <description><![CDATA[<blockquote>
<p>如何调整已建立的 Hyper-V 虚拟机磁盘大小？本文以 Ubuntu 为例，对此进行介绍。</p>
</blockquote>
<h2 id="说明" class="headerLink">
    <a href="#%e8%af%b4%e6%98%8e" class="header-mark"></a>说明</h2><p>此教程适用于使用 LVM 格式化的任何 Ubuntu 文件系统。</p>
<p>如果你在使用 VMware，基本步骤与下面的教程类似，区别参见<a href="https://unix.stackexchange.com/questions/196512/how-to-extend-filesystem-partition-on-ubuntu-vm" target="_blank" rel="noopener noreferrer">这里</a>。</p>
<h2 id="tldr" class="headerLink">
    <a href="#tldr" class="header-mark"></a>TL;DR</h2><ol>
<li>fdisk -l (note it’s partition 3 by looking at the current Size)</li>
<li>parted</li>
<li>resizepart, Fix, 3, 100% (type this instead), quit</li>
<li>pvresize /dev/sda3</li>
<li>lvextend -l +100%FREE /dev/mapper/ubuntu–vg-ubuntu–lv</li>
<li>resize2fs /dev/mapper/ubuntu–vg-ubuntu–lv</li>
<li>df -h</li>
</ol>
<h2 id="具体步骤" class="headerLink">
    <a href="#%e5%85%b7%e4%bd%93%e6%ad%a5%e9%aa%a4" class="header-mark"></a>具体步骤</h2><h3 id="查看剩余磁盘大小" class="headerLink">
    <a href="#%e6%9f%a5%e7%9c%8b%e5%89%a9%e4%bd%99%e7%a3%81%e7%9b%98%e5%a4%a7%e5%b0%8f" class="header-mark"></a>查看剩余磁盘大小</h3><p>在下面的输出中，请注意 /root 卷只有 3.9 GB 的磁盘空间：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">user@server:~$ df -h
Filesystem Size Used Avail Use% Mounted on
udev 1.9G <span class="m">0</span> 1.9G 0% /dev
tmpfs 394M 1.1M 393M 1% /run
/dev/mapper/ubuntu--vg-ubuntu--lv 3.9G 3.2G 489M 87% /
tmpfs 2.0G <span class="m">0</span> 2.0G 0% /dev/shm
tmpfs 5.0M <span class="m">0</span> 5.0M 0% /run/lock
tmpfs 2.0G <span class="m">0</span> 2.0G 0% /sys/fs/cgroup
/dev/loop0 89M 89M <span class="m">0</span> 100% /snap/core/7270
/dev/sda2 976M 77M 833M 9% /boot
/dev/loop1 90M 90M <span class="m">0</span> 100% /snap/core/7713
tmpfs 394M <span class="m">0</span> 394M 0% /run/user/1000
</code></pre></td></tr></table>
</div>
</div><p>接下来，在输出中可以看出实际上还有更多可用空间未利用。例如 /dev/sda3 卷上有 24G。另一个 1GB 用于启动卷和 BIOS 启动</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">user@server:~# fdisk -l
Disk /dev/loop0: 88.5 MiB, <span class="m">92778496</span> bytes, <span class="m">181208</span> sectors
Units: sectors of <span class="m">1</span> * <span class="nv">512</span> <span class="o">=</span> <span class="m">512</span> bytes
Sector size <span class="o">(</span>logical/physical<span class="o">)</span>: <span class="m">512</span> bytes / <span class="m">512</span> bytes
I/O size <span class="o">(</span>minimum/optimal<span class="o">)</span>: <span class="m">512</span> bytes / <span class="m">512</span> bytes


Disk /dev/loop1: <span class="m">89</span> MiB, <span class="m">93327360</span> bytes, <span class="m">182280</span> sectors
Units: sectors of <span class="m">1</span> * <span class="nv">512</span> <span class="o">=</span> <span class="m">512</span> bytes
Sector size <span class="o">(</span>logical/physical<span class="o">)</span>: <span class="m">512</span> bytes / <span class="m">512</span> bytes
I/O size <span class="o">(</span>minimum/optimal<span class="o">)</span>: <span class="m">512</span> bytes / <span class="m">512</span> bytes

...

Disk /dev/sda: <span class="m">25</span> GiB, <span class="m">26843545600</span> bytes, <span class="m">52428800</span> sectors
Units: sectors of <span class="m">1</span> * <span class="nv">512</span> <span class="o">=</span> <span class="m">512</span> bytes
Sector size <span class="o">(</span>logical/physical<span class="o">)</span>: <span class="m">512</span> bytes / <span class="m">4096</span> bytes
I/O size <span class="o">(</span>minimum/optimal<span class="o">)</span>: <span class="m">4096</span> bytes / <span class="m">4096</span> bytes
Disklabel type: gpt
Disk identifier: ED41F7A6-5D09-457B-A55C-C7F1E30DE419

Device Start End Sectors Size Type
/dev/sda1 <span class="m">2048</span> <span class="m">4095</span> <span class="m">2048</span> 1M BIOS boot
/dev/sda2 <span class="m">4096</span> <span class="m">2101247</span> <span class="m">2097152</span> 1G Linux filesystem
/dev/sda3 <span class="m">2101248</span> <span class="m">52426751</span> <span class="m">50325504</span> 24G Linux filesystem


Disk /dev/mapper/ubuntu--vg-ubuntu--lv: <span class="m">4</span> GiB, <span class="m">4294967296</span> bytes, <span class="m">8388608</span> sectors
Units: sectors of <span class="m">1</span> * <span class="nv">512</span> <span class="o">=</span> <span class="m">512</span> bytes
Sector size <span class="o">(</span>logical/physical<span class="o">)</span>: <span class="m">512</span> bytes / <span class="m">4096</span> bytes
I/O size <span class="o">(</span>minimum/optimal<span class="o">)</span>: <span class="m">4096</span> bytes / <span class="m">4096</span> bytes
</code></pre></td></tr></table>
</div>
</div><h3 id="调整虚拟机磁盘大小" class="headerLink">
    <a href="#%e8%b0%83%e6%95%b4%e8%99%9a%e6%8b%9f%e6%9c%ba%e7%a3%81%e7%9b%98%e5%a4%a7%e5%b0%8f" class="header-mark"></a>调整虚拟机磁盘大小</h3><p>进入 Hyper-V 虚拟机设置界面，编辑硬盘驱动器，然后对此进行扩容，此后重启虚拟机。</p>
<h3 id="重新分区" class="headerLink">
    <a href="#%e9%87%8d%e6%96%b0%e5%88%86%e5%8c%ba" class="header-mark"></a>重新分区</h3><p>下面利用 parted 进行对新加的磁盘进行分区。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">user@server:~# parted
GNU Parted 3.2
Using /dev/sda
Welcome to GNU Parted! Type <span class="s1">&#39;help&#39;</span> to view a list of commands.
<span class="o">(</span>parted<span class="o">)</span> print
Model: Msft Virtual Disk <span class="o">(</span>scsi<span class="o">)</span>
Disk /dev/sda: 26.8GB
Sector size <span class="o">(</span>logical/physical<span class="o">)</span>: 512B/4096B
Partition Table: gpt
Disk Flags:

Number Start End Size File system Name Flags
<span class="m">1</span> 1049kB 2097kB 1049kB bios_grub
<span class="m">2</span> 2097kB 1076MB 1074MB ext4
<span class="m">3</span> 1076MB 26.8GB 25.8GB

<span class="o">(</span>parted<span class="o">)</span> quit
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">user@server:~# parted
GNU Parted 3.2
Using /dev/sda
Welcome to GNU Parted! Type <span class="s1">&#39;help&#39;</span> to view a list of commands.
<span class="o">(</span>parted<span class="o">)</span> resizepart
Partition number? <span class="m">3</span>
End? <span class="o">[</span>26.8GB<span class="o">]</span>?
<span class="o">(</span>parted<span class="o">)</span> quit
Information: You may need to update /etc/fstab.
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">user@server:~# pvresize /dev/sda3
Physical volume <span class="s2">&#34;/dev/sda3&#34;</span> changed
<span class="m">1</span> physical volume<span class="o">(</span>s<span class="o">)</span> resized / <span class="m">0</span> physical volume<span class="o">(</span>s<span class="o">)</span> not resized
</code></pre></td></tr></table>
</div>
</div><h3 id="扩容" class="headerLink">
    <a href="#%e6%89%a9%e5%ae%b9" class="header-mark"></a>扩容</h3><p>接下来，对 LVM 虚拟磁盘进行扩容。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">user@server:~# resize2fs /dev/mapper/ubuntu--vg-ubuntu--lv
resize2fs 1.44.1 <span class="o">(</span>24-Mar-2018<span class="o">)</span>
Filesystem at /dev/mapper/ubuntu--vg-ubuntu--lv is mounted on /<span class="p">;</span> on-line resizing required
<span class="nv">old_desc_blocks</span> <span class="o">=</span> 1, <span class="nv">new_desc_blocks</span> <span class="o">=</span> <span class="m">3</span>
The filesystem on /dev/mapper/ubuntu--vg-ubuntu--lv is now <span class="m">6029312</span> <span class="o">(</span>4k<span class="o">)</span> blocks long.
</code></pre></td></tr></table>
</div>
</div><h3 id="确认" class="headerLink">
    <a href="#%e7%a1%ae%e8%ae%a4" class="header-mark"></a>确认</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">user@server:~# df -h
Filesystem Size Used Avail Use% Mounted on
udev 1.9G <span class="m">0</span> 1.9G 0% /dev
tmpfs 394M 1.1M 393M 1% /run
/dev/mapper/ubuntu--vg-ubuntu--lv 23G 3.2G 19G 15% /
tmpfs 2.0G <span class="m">0</span> 2.0G 0% /dev/shm
tmpfs 5.0M <span class="m">0</span> 5.0M 0% /run/lock
tmpfs 2.0G <span class="m">0</span> 2.0G 0% /sys/fs/cgroup
/dev/loop0 89M 89M <span class="m">0</span> 100% /snap/core/7270
/dev/sda2 976M 77M 833M 9% /boot
/dev/loop1 90M 90M <span class="m">0</span> 100% /snap/core/7713
tmpfs 394M <span class="m">0</span> 394M 0% /run/user/1000
user@server:~#
</code></pre></td></tr></table>
</div>
</div><h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li>[1] <a href="https://vander.host/knowledgebase/operating-systems/how-to-resize-an-ubuntu-18-04-lvm-disk/" target="_blank" rel="noopener noreferrer">How to resize an Ubuntu 18.04/20.04 LVM disk</a></li>
</ul>]]></description>
</item><item>
    <title>不容错过的 Bash 技巧</title>
    <link>https://www.techkoala.top/bash_tricks/</link>
    <pubDate>Fri, 04 Jun 2021 11:06:47 &#43;0800</pubDate><author>
        <name>TechKoala</name>
    </author><guid>https://www.techkoala.top/bash_tricks/</guid>
    <description><![CDATA[<blockquote>
<p>一些提升 Bash 使用效率的小技巧</p>
</blockquote>
<p>在使用 Bash 时，我们通常使用 上 ↑ 下 ↓ 箭头来快速切换历史命令，然而一些重复的、不想要的命令（例如最简单的 ls，敲击比切换快，同时也会增加切换到别的命令的按键次数）也在历史记录里保存，这降低了切换的效率。下面一些技巧可以更好的帮助我们切换到想要的命令：</p>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>说明<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>下文中需要编辑的内容均在<code>.bashrc</code>中，使用常用的文本编辑器打开它，例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ vim ~/.bashrc
</code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<h2 id="使用-histignore-移除历史记录中无意义的命令" class="headerLink">
    <a href="#%e4%bd%bf%e7%94%a8-histignore-%e7%a7%bb%e9%99%a4%e5%8e%86%e5%8f%b2%e8%ae%b0%e5%bd%95%e4%b8%ad%e6%97%a0%e6%84%8f%e4%b9%89%e7%9a%84%e5%91%bd%e4%bb%a4" class="header-mark"></a>使用 HISTIGNORE 移除历史记录中无意义的命令</h2><p>有一些命令极为常用常用、或者敲击简单，我们不想它出现在历史记录里，那么在<code>.bashrc</code>中添加下述内容忽略它即可：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">export</span> <span class="nv">HISTIGNORE</span><span class="o">=</span><span class="s1">&#39;pwd:exit:fg:bg:top:clear:history:ls:uptime:df&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>作为补充，如果我们不希望某些敏感的命令出现在历史记录中，例如在命令行中指定密码或 API 密钥，那么可以使用下面的选项来确保任何以<strong>空格</strong>开头的命令不会出现在历史文件中：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">export</span> <span class="nv">HISTCONTROL</span><span class="o">=</span>ignorespace
</code></pre></td></tr></table>
</div>
</div><p>另外：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">export</span> <span class="nv">HISTCONTROL</span><span class="o">=</span>ignoredups
</code></pre></td></tr></table>
</div>
</div><p>则表示当同一个命令重复出现时，只存储命令的一个副本。</p>
<h2 id="设置历史记录数量" class="headerLink">
    <a href="#%e8%ae%be%e7%bd%ae%e5%8e%86%e5%8f%b2%e8%ae%b0%e5%bd%95%e6%95%b0%e9%87%8f" class="header-mark"></a>设置历史记录数量</h2><p>为了防止不必要的丢失，可以适当的将记录数量调整的更大：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">shopt</span> -s histappend
<span class="nb">export</span> <span class="nv">HISTSIZE</span><span class="o">=</span><span class="m">10000</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="更有效的调用命令" class="headerLink">
    <a href="#%e6%9b%b4%e6%9c%89%e6%95%88%e7%9a%84%e8%b0%83%e7%94%a8%e5%91%bd%e4%bb%a4" class="header-mark"></a>更有效的调用命令</h2><p><code>!!</code>可以调用前一行的命令。</p>
<p>例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ <span class="nb">pwd</span>
/etc
$ !!
<span class="nb">pwd</span>
/etc
</code></pre></td></tr></table>
</div>
</div><p>同时，<code>!!</code>也可以作为参数加入别的命令配合使用，例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ sudo !!
</code></pre></td></tr></table>
</div>
</div><p>就将使用 root 权限再次执行此前的命令。</p>
<p>此外，我们还可以通过在历史命令提供的<strong>行号</strong>前加一个<code>!</code>来运行历史上的命令，但是请注意不要打错行号，避免执行出错：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ rm -r temp/
$ mkdir temp
$ touch temp/test
$ !!
touch temp/test
$ <span class="nb">history</span> <span class="p">|</span> tail -4
  <span class="m">179</span>  rm -r temp/
  <span class="m">180</span>  mkdir temp
  <span class="m">181</span>  touch temp/test
  <span class="m">182</span>  touch temp/test
  <span class="m">183</span>  <span class="nb">history</span> <span class="p">|</span> tail -5
$ !179:p
rm -r temp
$ !180
touch temp/test
</code></pre></td></tr></table>
</div>
</div><p>我们也可以用前面的<code>!</code>来调用一个命令的最后一次出现，例如:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ !ping
</code></pre></td></tr></table>
</div>
</div><p>将运行我们最后运行的以 <code>ping</code> 开头的命令。</p>
<p>为了上述内容出错，可以添加一个<code>:p</code>来显示命令内容，而不实际执行它们。</p>
<h2 id="使用--和--调用前一行参数" class="headerLink">
    <a href="#%e4%bd%bf%e7%94%a8--%e5%92%8c--%e8%b0%83%e7%94%a8%e5%89%8d%e4%b8%80%e8%a1%8c%e5%8f%82%e6%95%b0" class="header-mark"></a>使用 !$ 和 !* 调用前一行参数</h2><p>和<code>!!</code>不同，<code>!$</code>和<code>!*</code>仅指代前一行，命令的部分内容。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ mv list.txt items.txt
$ vim !$
vim items.txt
$ cp !$ shopping.txt
cp items.txt shopping.txt
</code></pre></td></tr></table>
</div>
</div><p>可以看到<code>!$</code>指代上一行命令的最后一个参数。</p>
<p>而<code>!*</code>指代上一行命令<strong>除了第一个</strong>以外的所有参数：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ rm /var/log/httpd/access.log /var/log/httpd/error.log
$ touch !*
touch /var/log/httpd/access.log /var/log/httpd/error.log
</code></pre></td></tr></table>
</div>
</div><h2 id="用--替换前一行的匹配词" class="headerLink">
    <a href="#%e7%94%a8--%e6%9b%bf%e6%8d%a2%e5%89%8d%e4%b8%80%e8%a1%8c%e7%9a%84%e5%8c%b9%e9%85%8d%e8%af%8d" class="header-mark"></a>用 ^ 替换前一行的匹配词</h2><p><code>^</code>符号允许你在切换一个匹配的单词后重复前一个命令，比如说：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ rm /var/log/httpd/error.log
$ ^error^access
rm /var/log/httpd/access.log
</code></pre></td></tr></table>
</div>
</div><h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li>[1] <a href="https://cyb.org.uk/2021/05/03/bash-productivity.html" target="_blank" rel="noopener noreferrer">Be more productive with use of your BASH history</a></li>
</ul>]]></description>
</item><item>
    <title>Docker 搭建 FreshRSS 专属 RSS 服务 </title>
    <link>https://www.techkoala.top/frsshrss/</link>
    <pubDate>Fri, 28 May 2021 23:25:46 &#43;0800</pubDate><author>
        <name>TechKoala</name>
    </author><guid>https://www.techkoala.top/frsshrss/</guid>
    <description><![CDATA[<blockquote>
<p>inoreader 等现有服务要么付费要么有限制，有服务器的话自建 FreshRSS 是一个很好的选择</p>
</blockquote>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>注意<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">境外服务器是保证服务可用性的条件之一</div>
        </div>
    </div>
<h2 id="freshrss-docker-配置" class="headerLink">
    <a href="#freshrss-docker-%e9%85%8d%e7%bd%ae" class="header-mark"></a>FreshRSS Docker 配置</h2><p>创建一个新目录 <code>~/freshrss</code> 并进入该位置，新建 docker-compose.yml</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"># 创建 FreshRSS 目录并进入
mkdir ~/freshrss &amp;&amp; cd ~/freshrss

# 新建&amp;编辑配置文件
vim docker-compose.yml
</code></pre></td></tr></table>
</div>
</div><h3 id="docker-composeyml" class="headerLink">
    <a href="#docker-composeyml" class="header-mark"></a>docker-compose.yml</h3><p>配置文件内容见下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"># ~/freshrss/docker-compose.yml

version: &#34;3&#34;

services:
  freshrss-db:
    image: postgres:latest            # 官方示例中给出了 MySQL/MarriaDB/PostgreSQL 三种方案
    container_name: freshrss-db
    hostname: freshrss-db
    restart: always
    volumes:
      - freshrss-db:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: freshrss       # 数据库配置，请自行修改、避免使用默认配置
      POSTGRES_PASSWORD: freshrss   # 数据库配置，请自行修改、避免使用默认配置
      POSTGRES_DB: freshrss         # 数据库配置，请自行修改、避免使用默认配置

  freshrss-app:
    image: freshrss/freshrss:latest
    container_name: freshrss-app
    hostname: freshrss-app
    restart: always
    ports:
      - &#34;39954:80&#34;                   # 映射端口
    depends_on:
      - freshrss-db
    volumes:
      - ./data:/var/www/FreshRSS/data
      - ./extensions:/var/www/FreshRSS/extensions
    environment:
      CRON_MIN: &#39;*/45&#39;             # RSS 刷新周期，单位为分钟，*/45 表示每 45 分钟刷新一次
      TZ: Asia/Shanghai            # 时区

volumes:
  freshrss-db:
</code></pre></td></tr></table>
</div>
</div><p>确认配置后，运行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ docker-compose up -d
</code></pre></td></tr></table>
</div>
</div><h2 id="freshrss-设置" class="headerLink">
    <a href="#freshrss-%e8%ae%be%e7%bd%ae" class="header-mark"></a>FreshRSS 设置</h2><h3 id="初始化" class="headerLink">
    <a href="#%e5%88%9d%e5%a7%8b%e5%8c%96" class="header-mark"></a>初始化</h3><p>数据库连接需要注意的点：</p>
<ul>
<li>主机名填写 <code>freshrss-db</code>（数据库 docker 容器名）</li>
<li>用户名、密码、数据库分别对应之前 Docker Compose 配置文件中的 POSTGRES_USER、POSTGRES_PASSWORD、POSTGRES_DB</li>
<li>表前缀任意填</li>
</ul>
<h3 id="设置" class="headerLink">
    <a href="#%e8%ae%be%e7%bd%ae" class="header-mark"></a>设置</h3><p>最好关闭<code>阅读 =&gt; 合适将文章标记为已读</code>的<code>在滚动浏览后</code>，否则即便不点击打开文章、只要你划过去就标记为已读</p>
<h3 id="扩展" class="headerLink">
    <a href="#%e6%89%a9%e5%b1%95" class="header-mark"></a>扩展</h3><p>一个重要的扩展是 <code>Auto Refresh</code>，实现自动刷新源</p>
<p>点击扩展页面中的相应扩展，会跳转到相应的下载地址，将扩展下载后上传到 FreshRSS 安装目录下的 extensions 文件夹（之前部署 FreshRSS 的 Docker Compose 配置文件中已经将 <code>~/freshrss/extensions/</code> 对应了 FreshRSS 在容器内的扩展位置，所以只需要将扩展拖至 <code>~/freshrss/extensions/</code> 即可）</p>
<p>将解压后的 xExtension-AutoRefresh 文件夹放到 ~/freshrss/extensions 目中，到 FreshRSS <code>设置-&gt; 扩展</code> 启用，刷新时间需要修改 <code>xExtension-AutoRefresh/static/script.js</code> ，其中时间相关单位是 ms</p>
<h2 id="nginx-反向代理" class="headerLink">
    <a href="#nginx-%e5%8f%8d%e5%90%91%e4%bb%a3%e7%90%86" class="header-mark"></a>Nginx 反向代理</h2><p>参见<a href="/nginx_port_reuse/" rel="">使用 Nginx 实现多服务复用端口</a></p>
<h2 id="配合第三方软件" class="headerLink">
    <a href="#%e9%85%8d%e5%90%88%e7%ac%ac%e4%b8%89%e6%96%b9%e8%bd%af%e4%bb%b6" class="header-mark"></a>配合第三方软件</h2><p>推荐搭配<code>Feedme</code> 、<code>Fluent reader</code>食用更佳</p>
<p>在此之前需要到开启<code>认证 =&gt; 允许 API 访问</code>，并在<code>用户账户 =&gt; API 管理</code>中设置相应的 API 密码</p>
<p>需要注意，<code>Feedme</code>服务应选择<code>FreshRSS</code></p>
<p>参数配置如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">域名：https://xxx.techkoala.top/api/fever.php   # Fluent reader
域名：https://xxx.techkoala.top/api/greader.php # Feedme 使用 fever会出现 Auth Failed

用户名：注册用户名
密码：API 密码
</code></pre></td></tr></table>
</div>
</div><h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li>[1] <a href="https://blog.ichr.me/post/docker-freshrss-setup/" target="_blank" rel="noopener noreferrer">使用 Docker 部署 FreshRSS 自建专属 RSS 服务</a></li>
</ul>]]></description>
</item><item>
    <title>常用 youtube-dl 命令</title>
    <link>https://www.techkoala.top/youtube-dl_tricks/</link>
    <pubDate>Tue, 18 May 2021 15:19:43 &#43;0800</pubDate><author>
        <name>TechKoala</name>
    </author><guid>https://www.techkoala.top/youtube-dl_tricks/</guid>
    <description><![CDATA[<blockquote>
<p>记录一些常用的 youtube-dl 命令，拯救脑容量。</p>
</blockquote>
<h2 id="下载播放列表视频音频" class="headerLink">
    <a href="#%e4%b8%8b%e8%bd%bd%e6%92%ad%e6%94%be%e5%88%97%e8%a1%a8%e8%a7%86%e9%a2%91%e9%9f%b3%e9%a2%91" class="header-mark"></a>下载播放列表视频+音频</h2><p>Windows</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd">youtube-dl.exe -o <span class="s2">&#34;D:\xxxxxx\</span><span class="nv">%(title)s.%</span><span class="s2">(ext)s&#34;</span> -f bestvideo+bestaudio https://www.youtube.com/playlist?list=x
</code></pre></td></tr></table>
</div>
</div><h2 id="仅下载播放列表音频" class="headerLink">
    <a href="#%e4%bb%85%e4%b8%8b%e8%bd%bd%e6%92%ad%e6%94%be%e5%88%97%e8%a1%a8%e9%9f%b3%e9%a2%91" class="header-mark"></a>仅下载播放列表音频</h2><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd">youtububedl.exe -o D:\<span class="nv">%(title)s.%</span>(ext)s -f bestaudio --extract-audio --audio-format mp3 --audio-quality 0 https://www.youtube.com/playlist?list=xxxxxxxxxxxx

</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">-o D:\%(title)s.%(ext)s     #保留原始名称和后缀
-f bestaudio                #最佳音频
--extract-audio             #提取音频
--audio-format mp3          #设置音频格式，下载文件若不同，则调用ffmpeg转换
--playlist-items 1,2,5      #下载播放列表中的哪些项
--playstart-start 2         #从第二项开始下载播放列表
--playstart-end 2
-f &#39;bestvideo[height&lt;=1080]+bestaudio/best[height&lt;=1080]&#39;             #设置最大下载分辨率
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>持久化 Gist file raw 链接</title>
    <link>https://www.techkoala.top/permalink_gist_raw_file/</link>
    <pubDate>Mon, 03 May 2021 22:22:32 &#43;0800</pubDate><author>
        <name>TechKoala</name>
    </author><guid>https://www.techkoala.top/permalink_gist_raw_file/</guid>
    <description><![CDATA[<blockquote>
<p>如何持久化 Gist file raw 链接地址？</p>
</blockquote>
<h2 id="问题" class="headerLink">
    <a href="#%e9%97%ae%e9%a2%98" class="header-mark"></a>问题</h2><p>通常，Gist 文件的 raw 链接会随着版本二更改，但在使用上往往不便，因此需要持久化文件的 raw 链接地址。</p>
<h2 id="解决方法" class="headerLink">
    <a href="#%e8%a7%a3%e5%86%b3%e6%96%b9%e6%b3%95" class="header-mark"></a>解决方法</h2><ul>
<li>
<p>获得 Gist 文件列表中的第一个文件： <code>https://gist.github.com/gist_user/gist_id/raw/</code></p>
<p>例如: <a href="https://gist.github.com/atenni/5604522/raw/" target="_blank" rel="noopener noreferrer">https://gist.github.com/atenni/5604522/raw/</a></p>
<p>即便更改了文件名，上述方法依然可以获得列表中的第一个文件。</p>
</li>
<li>
<p>获得多个文件： <code>https://gist.github.com/gist_user/gist_id/raw/file_name</code></p>
<p>例如: <a href="https://gist.github.com/atenni/5604522/raw/README.md" target="_blank" rel="noopener noreferrer">https://gist.github.com/atenni/5604522/raw/README.md</a></p>
</li>
</ul>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li>[1] <a href="https://gist.github.com/atenni/5604615" target="_blank" rel="noopener noreferrer">How to permalink to a gist&rsquo;s raw file</a></li>
</ul>]]></description>
</item><item>
    <title>Windows 网络连接优先级设置</title>
    <link>https://www.techkoala.top/windows_10_network_priority/</link>
    <pubDate>Thu, 29 Apr 2021 20:42:25 &#43;0800</pubDate><author>
        <name>TechKoala</name>
    </author><guid>https://www.techkoala.top/windows_10_network_priority/</guid>
    <description><![CDATA[<blockquote>
<p>Windows10 默认优先使用有线连接，但是如需优先使用无线连接，除了拔网线/禁用有线网卡外，还可以通过修改接口跃点数，实现不同网络连接的优先级。</p>
</blockquote>
<h2 id="优先级设置方法" class="headerLink">
    <a href="#%e4%bc%98%e5%85%88%e7%ba%a7%e8%ae%be%e7%bd%ae%e6%96%b9%e6%b3%95" class="header-mark"></a>优先级设置方法</h2><h3 id="方法一控制面板中修改" class="headerLink">
    <a href="#%e6%96%b9%e6%b3%95%e4%b8%80%e6%8e%a7%e5%88%b6%e9%9d%a2%e6%9d%bf%e4%b8%ad%e4%bf%ae%e6%94%b9" class="header-mark"></a>方法一：控制面板中修改</h3><p>接口跃点数通过以下步骤找到：</p>
<p>首先打开<code>控制面板 &gt; 网络和 Internet &gt; 网络连接</code></p>
<p>找到想要修改的网络连接，右键打开<code>属性</code></p>
<p>接下来打开<code>Internet 协议版本 4 属性 &gt; 高级</code></p>
<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/Network_Priority/GUI.webp" title="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/Network_Priority/GUI.webp" data-thumbnail="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/Network_Priority/GUI.webp" data-sub-html="<h2>控制面板设置界面</h2>">
        
    </a><figcaption class="image-caption">控制面板设置界面</figcaption>
    </figure>
<p>取消勾选<code>自动跃点</code>，填入需要设置的数值即可，有关数值设置的注意事项将在后续说明。</p>
<h3 id="方法二powershell-中修改" class="headerLink">
    <a href="#%e6%96%b9%e6%b3%95%e4%ba%8cpowershell-%e4%b8%ad%e4%bf%ae%e6%94%b9" class="header-mark"></a>方法二：Powershell 中修改</h3><p>更便捷的方式是通过 Powershell 进行修改。</p>
<p>首先以管理员身份运行 Windows PowerShell，并使用命令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">PS </span><span class="n">C:</span><span class="p">\</span><span class="n">Users</span><span class="p">\</span><span class="n">xxxx</span><span class="p">&gt;</span> <span class="nb">Get-NetIPInterface</span>
</code></pre></td></tr></table>
</div>
</div><p>获得当前所有的网络连接，其中<code>InterfaceMetric</code>即为接口跃点数的值。</p>
<figure><a class="lightgallery" href="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/Network_Priority/powershell.webp" title="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/Network_Priority/powershell.webp" data-thumbnail="https://fastly.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/Network_Priority/powershell.webp" data-sub-html="<h2>Powershell 设置界面</h2>">
        
    </a><figcaption class="image-caption">Powershell 设置界面</figcaption>
    </figure>
<p>找到想要修改的网络连接以及它的 ifIndex (接口索引)值，例如 x，使用命令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">PS </span><span class="n">C:</span><span class="p">\</span><span class="n">Users</span><span class="p">\</span><span class="n">xxxx</span><span class="p">&gt;</span> <span class="nb">Set-NetIPInterface</span> <span class="n">-InterfaceIndex</span> <span class="n">x</span> <span class="n">-InterfaceMetric</span> <span class="n">10</span>
</code></pre></td></tr></table>
</div>
</div><p>即可将其跃点数设置为 10。</p>
<p>想要恢复跃点数的话，运行以下命令即可：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">PS </span><span class="n">C:</span><span class="p">\</span><span class="n">Users</span><span class="p">\</span><span class="n">xxxx</span><span class="p">&gt;</span> <span class="nb">Set-NetIPInterface</span> <span class="n">-InterfaceIndex</span> <span class="n">x</span> <span class="n">-AutomaticMetric</span> <span class="n">enabled</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="跃点数的设置范围" class="headerLink">
    <a href="#%e8%b7%83%e7%82%b9%e6%95%b0%e7%9a%84%e8%ae%be%e7%bd%ae%e8%8c%83%e5%9b%b4" class="header-mark"></a>跃点数的设置范围</h3><p>跃点数越小，网络优先级越高。</p>
<p>跃点数的理论范围是 1 ~ 999，但跃点数低于 10 ，可能会导致某些网络访问失败，同时，合理的跃点数值也要参考网络带宽。</p>
<h2 id="分流方法" class="headerLink">
    <a href="#%e5%88%86%e6%b5%81%e6%96%b9%e6%b3%95" class="header-mark"></a>分流方法</h2><p>在同时使用 Wi-Fi 和有线网络的环境下可以用 route 命令实现特定网段使用特定接口。</p>
<p>举例：</p>
<p>可以连接到互联网的 Wi-Fi 网关地址是 <code>192.168.0.1</code>，有线网网关 IP 是 <code>10.0.0.1</code>。
分流：需要访问的内网资源都位于 <code>10.0.0.0/8</code> 段，其他流量都走 Wi-Fi。</p>
<ol>
<li>首先打开管理员身份的命令提示符，输入以下命令删除默认的路由表。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">route delete 0.0.0.0
</code></pre></td></tr></table>
</div>
</div><ol start="2">
<li>添加一个默认路由，指定所有流量走 Wi-Fi。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">route add 0.0.0.0 mask 0.0.0.0 192.168.0.1
</code></pre></td></tr></table>
</div>
</div><ol start="3">
<li>添加另一个路由，指定 <code>10.0.0.1~10.255.255.254</code> 流量走有线网络。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">route add 10.0.0.0 mask 255.0.0.0 10.0.0.1
</code></pre></td></tr></table>
</div>
</div><h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li>
<p>[1] <a href="https://windows10.pro/set-netipinterface-interfaceindex-interfacemetric/" target="_blank" rel="noopener noreferrer">修改接口跃点数，让 Win10 优先使用无线网络连接</a></p>
</li>
<li>
<p>[2] <a href="https://www.appinn.com/wi-fi-or-lan/" target="_blank" rel="noopener noreferrer">同时连接网线和 Wi-Fi，如何优先使用 Wi-Fi？试试接口跃点数</a></p>
</li>
</ul>]]></description>
</item><item>
    <title>使用 Nginx 实现多服务复用端口</title>
    <link>https://www.techkoala.top/nginx_port_reuse/</link>
    <pubDate>Tue, 20 Apr 2021 14:17:01 &#43;0800</pubDate><author>
        <name>TechKoala</name>
    </author><guid>https://www.techkoala.top/nginx_port_reuse/</guid>
    <description><![CDATA[<blockquote>
<p>利用 Nginx 在单一服务器上搭建多个同端口的服务</p>
</blockquote>
<h2 id="说明" class="headerLink">
    <a href="#%e8%af%b4%e6%98%8e" class="header-mark"></a>说明</h2><p>目前服务器上运行以下服务：</p>
<ul>
<li><code>Trojan</code></li>
<li><code>Xray</code></li>
<li><code>frp</code> + <code>Bitwarden</code> 实现内网穿透访问</li>
<li><code>FreshRSS</code></li>
</ul>
<p>三个服务使用了不同域名进行区分，但为了便捷，都使用 <code>443</code> 端口。</p>
<h2 id="流程概览" class="headerLink">
    <a href="#%e6%b5%81%e7%a8%8b%e6%a6%82%e8%a7%88" class="header-mark"></a>流程概览</h2><ol>
<li>采用 <code>Docker</code> 在本地服务器上搭建 <code>Bitwarden</code>，配置并运行 <code>frpc</code> 指向服务器上的 <code>frps</code></li>
<li>在服务器上搭建其他网站或者需要使用 <code>443</code> 端口的服务（如：<code>Trojan</code>)，配置运行 <code>frps</code></li>
<li>采用 <code>Docker</code> 搭建 FreshRSS，首先使用 IP:Port 完成相关配置，然后配置域名，申请证书</li>
<li>安装 <code>Nginx</code>，这里需要利用 <code>Nginx</code> 的 <code>stream_ssl_preread</code> 模块，使用<code>nginx -V</code>查看是否包含该模块。（该模块在 <code>Nginx 1.19.2</code> 已默认包含，但 <code>Ubuntu</code> 等发行版还在使用更老的 <code>stable</code> 版本，需要手动添加 <code>mainline</code> 版本源，并更新 <code>Nginx</code> 到最新版本）</li>
</ol>
<h2 id="获取-ssl-证书" class="headerLink">
    <a href="#%e8%8e%b7%e5%8f%96-ssl-%e8%af%81%e4%b9%a6" class="header-mark"></a>获取 SSL 证书</h2><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ sudo apt install certbot python3-certbot-nginx
$ sudo certbot --nginx -d example.com -d www.example.com
</code></pre></td></tr></table>
</div>
</div><h2 id="本地配置文件" class="headerLink">
    <a href="#%e6%9c%ac%e5%9c%b0%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6" class="header-mark"></a>本地配置文件</h2><h3 id="frpcini" class="headerLink">
    <a href="#frpcini" class="header-mark"></a>frpc.ini</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[common]
server_addr = xxx.xxx.xxx.xxx           # 服务器地址
server_port = xxx                       # 与服务器 frps 通信的端口
token = xxxxxx                          # frp 验证密钥

[bitwarden_https]
type = https
local_port = 443
custom_domains = xxx.xxx.xxx            # Bitwarden 域名
</code></pre></td></tr></table>
</div>
</div><h3 id="本地-nginxcof" class="headerLink">
    <a href="#%e6%9c%ac%e5%9c%b0-nginxcof" class="header-mark"></a>本地 nginx.cof</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">user www www;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;
worker_rlimit_nofile 8192;
events {
    worker_connections 4096;
}
http {
    include mime.types;
    default_type application/octet-stream;

    client_max_body_size 0;
    client_body_buffer_size 512k;

    sendfile on;
    sendfile_max_chunk 1m;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;

    types_hash_max_size 4096;

    proxy_cache_path /var/run/nginx-proxy-cache levels=1:2 keys_zone=cache_one:20m inactive=1d max_size=500m;
    proxy_cache cache_one;
    proxy_temp_path /var/run/proxy_temp_dir;
    proxy_temp_file_write_size 128k;
    proxy_next_upstream error timeout invalid_header http_500 http_503 http_404;
    proxy_buffer_size 16k;
    proxy_busy_buffers_size 24k;
    proxy_buffers 64 4k;

    gzip on;
    gzip_min_length 1k;
    gzip_buffers 4 16k;
    gzip_http_version 1.1;
    gzip_comp_level 2;
    gzip_types text/plain application/javascript application/x-javascript text/javascript text/css application/xml;
    gzip_vary on;
    gzip_proxied expired no-cache no-store private auth;
    gzip_disable &#34;MSIE [1-6]\.&#34;;

    server_tokens off;

    server {
        listen 443 ssl http2;
        server_name xxx.xxx.xxx;                        # 域名

        ssl_certificate /xxx/cert/fullchain.pem;        # 证书路径
        ssl_certificate_key /xxx/cert/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 1d;

        location / {
            proxy_pass http://127.0.0.1:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /notifications/hub {
            proxy_pass http://127.0.0.1:3012;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection &#34;upgrade&#34;;
        }

        location /notifications/hub/negotiate {
            proxy_pass http://127.0.0.1:8080;
        }
    }
}
</code></pre></td></tr></table>
</div>
</div><h2 id="服务器配置文件" class="headerLink">
    <a href="#%e6%9c%8d%e5%8a%a1%e5%99%a8%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6" class="header-mark"></a>服务器配置文件</h2><h3 id="服务器-nginxcof" class="headerLink">
    <a href="#%e6%9c%8d%e5%8a%a1%e5%99%a8-nginxcof" class="header-mark"></a>服务器 nginx.cof</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">user www-data;
worker_processes auto;
pid /var/run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
	worker_connections 768;
	# multi_accept on;
}

stream {
    map $ssl_preread_server_name $name {
        xxx.techkoala.top frps-bitwarden;   # Bitwarden 域名
        xxx.techkoala.top trojan;           # Trojan 域名
        xxx.techkoala.top rss;              # FreshRSS 域名
        xxx.techkoala.top xrls;              # Xray 域名
    }
    upstream frps-bitwarden {
        server 127.0.0.1:8080;         # Bitwarden的 frps 端口
    }
    upstream trojan {
        server 127.0.0.1:4443;         # Trojan 本地监听端口
    }
    upstream rss {
        server 172.17.0.1:39955;       # FreshRSS Docker IP 以及映射本地监听端口
    }
    upstream xtls {
        server 127.0.0.1:8443;       # Xray 本地监听端口
    }
    server {
        listen 443 reuseport;
        listen [::]:443 reuseport;
        proxy_pass	$name;
        ssl_preread on;               # 开启 ssl_preread
    }
}

http {
	##
	# Basic Settings
	##

	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 65;
	types_hash_max_size 2048;
	# server_tokens off;

	# server_names_hash_bucket_size 64;
	# server_name_in_redirect off;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	##
	# SSL Settings
	##

	ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE
	ssl_prefer_server_ciphers on;

	##
	# Logging Settings
	##

	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log;

	##
	# Gzip Settings
	##

	gzip on;

	# gzip_vary on;
	# gzip_proxied any;
	# gzip_comp_level 6;
	# gzip_buffers 16 8k;
	# gzip_http_version 1.1;
	# gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

	##
	# Virtual Host Configs
	##

	include /etc/nginx/conf.d/*.conf;
	include /etc/nginx/sites-enabled/*;     # 启用的网站配置放置在此文件夹下
}

</code></pre></td></tr></table>
</div>
</div><h3 id="bitwarden-相关配置" class="headerLink">
    <a href="#bitwarden-%e7%9b%b8%e5%85%b3%e9%85%8d%e7%bd%ae" class="header-mark"></a>Bitwarden 相关配置</h3><h4 id="frpsini" class="headerLink">
    <a href="#frpsini" class="header-mark"></a>frps.ini</h4><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">[common]
bind_port = xxxx                # 与本地 frpc 通信的端口
vhost_https_port = xxxx         # 虚拟 https 端口，需要和 nginx.conf 内一致
authentication_method = token
token = xxxxxx                  # frp 验证密钥
</code></pre></td></tr></table>
</div>
</div><h4 id="bitwarden-nginx-站点配置" class="headerLink">
    <a href="#bitwarden-nginx-%e7%ab%99%e7%82%b9%e9%85%8d%e7%bd%ae" class="header-mark"></a>Bitwarden Nginx 站点配置</h4><p>放置在<code>/etc/nginx/sites-available/</code>下，文件与域名同名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">## Bitwarden 配置。只负责只将 http 重定向至 https
## Bitwarden 的 SSL 握手交给本地服务器端的 Nginx 处理
server {
        listen 80;
        listen [::]:80;
        server_name xxx.techkoala.top;                    # Bitwarden 域名
        return 301 https://xxx.techkoala.top$request_uri; # Bitwarden 域名
}

</code></pre></td></tr></table>
</div>
</div><p>链接配置文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">ln -s /etc/nginx/sites-available/xxx.techkoala.top /etc/nginx/sites-enabled/
</code></pre></td></tr></table>
</div>
</div><h3 id="trojan-相关配置" class="headerLink">
    <a href="#trojan-%e7%9b%b8%e5%85%b3%e9%85%8d%e7%bd%ae" class="header-mark"></a>Trojan 相关配置</h3><h4 id="trojan-nginx-配置" class="headerLink">
    <a href="#trojan-nginx-%e9%85%8d%e7%bd%ae" class="header-mark"></a>Trojan Nginx 配置</h4><p>放置在<code>/etc/nginx/sites-available/</code>下，文件与域名同名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">server {
    listen 127.0.0.1:80 default_server;
    server_name xxx.techkoala.top;             # 自己的域名
    location / {
        proxy_pass https://www.digitalocean.com; # 伪装的网站
    }
}
server {
    listen 127.0.0.1:80;
    server_name xxx.techkoala.top;                 # 自己服务器的 IP
    return 301 https://xxx.techkoala.top$request_uri;  # 自己的域名
}
server {
    listen 0.0.0.0:80;
    listen [::]:80;
    server_name _;
    return 301 https://$host$request_uri;
}

</code></pre></td></tr></table>
</div>
</div><p>链接配置文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">ln -s /etc/nginx/sites-available/xxx.techkoala.top /etc/nginx/sites-enabled/
</code></pre></td></tr></table>
</div>
</div><h4 id="trojan-配置文件" class="headerLink">
    <a href="#trojan-%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6" class="header-mark"></a>Trojan 配置文件</h4><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{
    &#34;run_type&#34;: &#34;server&#34;,
    &#34;local_addr&#34;: &#34;0.0.0.0&#34;,
    &#34;local_port&#34;: 4443,             # 本地监听端口，与 nginx.conf 保持一致
    &#34;remote_addr&#34;: &#34;127.0.0.1&#34;,
    &#34;remote_port&#34;: 80,              # 伪装站点的端口
    &#34;password&#34;: [
        &#34;xxxxxx&#34;                    # 密钥
    ],
    &#34;log_level&#34;: 1,
    &#34;ssl&#34;: {
        &#34;cert&#34;: &#34;/usr/local/etc/ssl/certificate.crt&#34;,
        &#34;key&#34;: &#34;/usr/local/etc/ssl/private.key&#34;,
        &#34;key_password&#34;: &#34;&#34;,
        &#34;cipher&#34;: &#34;ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384&#34;,
        &#34;cipher_tls13&#34;: &#34;TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384&#34;,
        &#34;prefer_server_cipher&#34;: true,
        &#34;alpn&#34;: [
            &#34;http/1.1&#34;
        ],
        &#34;alpn_port_override&#34;: {
            &#34;h2&#34;: 81
        },
        &#34;reuse_session&#34;: true,
        &#34;session_ticket&#34;: false,
        &#34;session_timeout&#34;: 600,
        &#34;plain_http_response&#34;: &#34;&#34;,
        &#34;curves&#34;: &#34;&#34;,
        &#34;dhparam&#34;: &#34;&#34;
    },
    &#34;tcp&#34;: {
        &#34;prefer_ipv4&#34;: false,
        &#34;no_delay&#34;: true,
        &#34;keep_alive&#34;: true,
        &#34;reuse_port&#34;: false,
        &#34;fast_open&#34;: false,
        &#34;fast_open_qlen&#34;: 20
    },
    &#34;mysql&#34;: {
        &#34;enabled&#34;: false,
        &#34;server_addr&#34;: &#34;127.0.0.1&#34;,
        &#34;server_port&#34;: 3306,
        &#34;database&#34;: &#34;trojan&#34;,
        &#34;username&#34;: &#34;trojan&#34;,
        &#34;password&#34;: &#34;&#34;,
        &#34;key&#34;: &#34;&#34;,
        &#34;cert&#34;: &#34;&#34;,
        &#34;ca&#34;: &#34;&#34;
    }
}
</code></pre></td></tr></table>
</div>
</div><h3 id="freshrss-站点配置" class="headerLink">
    <a href="#freshrss-%e7%ab%99%e7%82%b9%e9%85%8d%e7%bd%ae" class="header-mark"></a>FreshRSS 站点配置</h3><p>放置在<code>/etc/nginx/sites-available/</code>下，文件与域名同名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">server {
        listen 80;
        listen [::]:80;
        server_name xxx.techkoala.top;
        return 301 https://xxx.techkoala.top$request_uri;
    }

server {
    listen 39955 ssl http2;          # FreshRSS 本地监听端口
    server_name rss.techkoala.top;
    ssl_certificate /etc/letsencrypt/live/xxx.techkoala.top/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/xxx.techkoala.top/privkey.pem;

    location / {
       proxy_pass http://127.0.0.1:39954;   # 转发到 FreshRSS 容器映射的端口
    }
}

</code></pre></td></tr></table>
</div>
</div><p>链接配置文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">ln -s /etc/nginx/sites-available/xxx.techkoala.top /etc/nginx/sites-enabled/
</code></pre></td></tr></table>
</div>
</div><h3 id="xray" class="headerLink">
    <a href="#xray" class="header-mark"></a>Xray</h3><h4 id="xray-nginx-配置" class="headerLink">
    <a href="#xray-nginx-%e9%85%8d%e7%bd%ae" class="header-mark"></a>Xray Nginx 配置</h4><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">server {
        listen 80;
        server_name xxx.techkoala.top;
        if ($host = xxxx.techkoala.top) {
                return 301 https://$host$request_uri;
        }
        return 404;
}

server {
        listen 127.0.0.1:23333;
        server_name xxxx.techkoala.top;
        location / {
                proxy_pass https://www.digitalocean.com; # 伪装的网站
        }
}
</code></pre></td></tr></table>
</div>
</div><h4 id="xray-配置" class="headerLink">
    <a href="#xray-%e9%85%8d%e7%bd%ae" class="header-mark"></a>Xray 配置</h4><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">{
    &#34;log&#34;: {
        &#34;loglevel&#34;: &#34;warning&#34;
    },
    &#34;inbounds&#34;: [
        {
            &#34;listen&#34;: &#34;127.0.0.1&#34;, # 仅监听在本地防止探测到下面的 8443 端口
            &#34;port&#34;: 8443, # 这里的端口对应 nginx 主配置文件内的 upstream 端口
            &#34;protocol&#34;: &#34;vless&#34;,
            &#34;settings&#34;: {
                &#34;clients&#34;: [
                    {
                        &#34;id&#34;: &#34;7f46753a-6a4b-4284-94c0-760340f96f1e&#34;, # 填写你的UUID
                        &#34;flow&#34;: &#34;xtls-rprx-direct&#34;,
                        &#34;level&#34;: 0
                    }
                ],
                &#34;decryption&#34;: &#34;none&#34;,
                &#34;fallbacks&#34;: [
                    {
                        &#34;dest&#34;: &#34;23333&#34; # 回落站点的端口号，与 Xray Nginx 配置一致
                    }
                 ]
            },
            &#34;streamSettings&#34;: {
                &#34;network&#34;: &#34;tcp&#34;,
                &#34;security&#34;: &#34;xtls&#34;,
                &#34;xtlsSettings&#34;: {
                    &#34;alpn&#34;: [
                        &#34;http/1.1&#34;
                    ],
                    &#34;certificates&#34;: [
                        {
                            &#34;certificateFile&#34;: &#34;/usr/local/etc/ssl/fullchain.pem&#34;, # 你的域名证书
                            &#34;keyFile&#34;: &#34;/usr/local/etc/ssl/privkey.pem&#34; # 你的证书私钥
                        }
                    ]
                }
            }
        }
    ],
    &#34;outbounds&#34;: [
        {
            &#34;protocol&#34;: &#34;freedom&#34;
        }
    ]
}
</code></pre></td></tr></table>
</div>
</div><h2 id="防火墙设置" class="headerLink">
    <a href="#%e9%98%b2%e7%81%ab%e5%a2%99%e8%ae%be%e7%bd%ae" class="header-mark"></a>防火墙设置</h2><p>上述操作后，服务器需要打开<code>80</code>,<code>443</code>,<code>xxx</code>（frp 通信端口）</p>]]></description>
</item><item>
    <title>OpenWRT 使用 dnscrypt-proxy2 实现 DoH 查询及分流</title>
    <link>https://www.techkoala.top/openwrt_doh/</link>
    <pubDate>Fri, 29 Jan 2021 20:36:35 &#43;0800</pubDate><author>
        <name>TechKoala</name>
    </author><guid>https://www.techkoala.top/openwrt_doh/</guid>
    <description><![CDATA[<blockquote>
<p>OpenWRT 默认并不支持 DoH 或 DoT，存在 DNS 泄露问题，本文介绍如何 dnscrypt-proxy2 进行加密查询，以及如何与上网插件进行搭配使用</p>
</blockquote>
<h2 id="安裝-dnscrypt-proxy2" class="headerLink">
    <a href="#%e5%ae%89%e8%a3%9d-dnscrypt-proxy2" class="header-mark"></a>安裝 dnscrypt-proxy2</h2><p>如果使用 OpenWrt 19.07+版本，那么直接使用 opkg 即可完成安装，命令如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">opkg update
opkg install dnscrypt-proxy2
</code></pre></td></tr></table>
</div>
</div><p>不过，版本可能不是最新，如果需要最新版本可以自行编译。</p>
<h2 id="配置" class="headerLink">
    <a href="#%e9%85%8d%e7%bd%ae" class="header-mark"></a>配置</h2><p>基本使用只需要</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">vim /etc/dnscrypt-proxy2/dnscrypt-proxy.toml
</code></pre></td></tr></table>
</div>
</div><p>修改</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">listen_addresses = [&#39;127.0.0.1:5335&#39;]
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">server_names = [&#39;google&#39;, &#39;cloudflare&#39;]
</code></pre></td></tr></table>
</div>
</div><p>即可</p>
<p>软件已经内置了常见的 DoH/DoT 服务器了，因此只需要填入名称即可</p>
<p>然后</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">/etc/init.d/dnscrypt-proxy restart
</code></pre></td></tr></table>
</div>
</div><p>重启软件，dnscrypt-proxy2 就会监听在 5335 这个端口了。</p>
<h2 id="分流搭配-ssr" class="headerLink">
    <a href="#%e5%88%86%e6%b5%81%e6%90%ad%e9%85%8d-ssr" class="header-mark"></a>分流（搭配 SSR+）</h2><ol>
<li>SSR+ 使用大陆 IP 白名单 并使用 5335 的 DNS 解析的方式</li>
<li>dnscyrpt-proxy2 配置监听在 5335，仅使用 DoH 协议向 <code>Cloudflare/Google</code> 服务器查询（这些 <code>Https</code> 的查询请求全部会被 SSR+ 代理转发）</li>
<li>iptables 劫持所有目标为 53 端口的流量到路由器的 53 端口（默认）</li>
<li>53 端口使用默认的 <code>dnsmasq</code> 作为 <code>DNS</code> 服务，上游设置为 <code>127.0.0.1#5335</code>，配置文件<code>/etc/dnsmasq.conf</code>最后添加 <code>conf-dir=/etc/dnsmasq.d</code></li>
<li>在<code>/etc/dnsmasq.d/</code>(如无则新建）中放入<code>https://github.com/felixonmars/dnsmasq-china-list/blob/master/accelerated-domains.china.conf</code></li>
</ol>
<p>这样实现了凡是大陆的和在大陆有 cdn 的以及返回 AAAA 记录的域名全部直连查询并直连访问，其余的全部走代理查询，且结果在大陆以外的走代理访问（IP+域名的双白名单机制）</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li>
<p>[1] <a href="https://github.com/coolsnowwolf/lede/issues/2551" target="_blank" rel="noopener noreferrer">lede</a></p>
</li>
<li>
<p>[2] <a href="https://github.com/DNSCrypt/dnscrypt-proxy/wiki/Installation-on-OpenWrt" target="_blank" rel="noopener noreferrer">Installation on OpenWrt</a></p>
</li>
</ul>]]></description>
</item><item>
    <title>Vim 小技巧</title>
    <link>https://www.techkoala.top/vim_tips/</link>
    <pubDate>Tue, 19 Jan 2021 19:34:18 &#43;0800</pubDate><author>
        <name>TechKoala</name>
    </author><guid>https://www.techkoala.top/vim_tips/</guid>
    <description><![CDATA[<blockquote>
<p>记录使用 Vim 时遇到实用的小技巧</p>
</blockquote>
<h2 id="全局命令-global" class="headerLink">
    <a href="#%e5%85%a8%e5%b1%80%e5%91%bd%e4%bb%a4-global" class="header-mark"></a>全局命令 g(lobal)</h2><p>vim 进入文件，命令行模式下执行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">:[range]global[!]/{pattern}/{command}
</code></pre></td></tr></table>
</div>
</div><p>也即：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">:[range]g/pattern/command
</code></pre></td></tr></table>
</div>
</div><ul>
<li>[range] 指定文本范围,默认为整个文档</li>
<li>pattern 在范围 range 内的行如果匹配 pattern，则执行 command</li>
<li>! 表示取反，也就是不匹配的行，也可以使用 vglobal</li>
<li>command 默认是打印文本</li>
</ul>
<h3 id="tip1-范围匹配" class="headerLink">
    <a href="#tip1-%e8%8c%83%e5%9b%b4%e5%8c%b9%e9%85%8d" class="header-mark"></a>Tip.1 范围匹配</h3><p>20 行到 200 行之间，每一行下插入空行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">:20,200g/^/pu _
</code></pre></td></tr></table>
</div>
</div><h3 id="tip2-删除包含字符-pattern-的所有行" class="headerLink">
    <a href="#tip2-%e5%88%a0%e9%99%a4%e5%8c%85%e5%90%ab%e5%ad%97%e7%ac%a6-pattern-%e7%9a%84%e6%89%80%e6%9c%89%e8%a1%8c" class="header-mark"></a>Tip.2 删除包含字符 pattern 的所有行</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">:g/pattern/d
</code></pre></td></tr></table>
</div>
</div><h3 id="tip3-删除空白行" class="headerLink">
    <a href="#tip3-%e5%88%a0%e9%99%a4%e7%a9%ba%e7%99%bd%e8%a1%8c" class="header-mark"></a>Tip.3 删除空白行</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">:g/^$/d
</code></pre></td></tr></table>
</div>
</div><h3 id="tip4-删除不匹配的行" class="headerLink">
    <a href="#tip4-%e5%88%a0%e9%99%a4%e4%b8%8d%e5%8c%b9%e9%85%8d%e7%9a%84%e8%a1%8c" class="header-mark"></a>Tip.4 删除不匹配的行</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">:g!/pattern/d
:v/pattern/d
</code></pre></td></tr></table>
</div>
</div><h3 id="tip5-删除大量匹配行" class="headerLink">
    <a href="#tip5-%e5%88%a0%e9%99%a4%e5%a4%a7%e9%87%8f%e5%8c%b9%e9%85%8d%e8%a1%8c" class="header-mark"></a>Tip.5 删除大量匹配行</h3><p>Vim 在删除操作时，会先把要删除的内容放到寄存器中，假如没有指定寄存器，会默认放到一个未命名的寄存器中，对于要删除大量匹配行的行为，可能导致 Vim 花一些时间处理这些拷贝，避免花费不必要的时间可以指定一个 blackhole 寄存器 _</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">:g/pattern/d_
</code></pre></td></tr></table>
</div>
</div><h3 id="tip6-移动匹配的行" class="headerLink">
    <a href="#tip6-%e7%a7%bb%e5%8a%a8%e5%8c%b9%e9%85%8d%e7%9a%84%e8%a1%8c" class="header-mark"></a>Tip.6 移动匹配的行</h3><p>将所有匹配的行移动到文件的末尾</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">:g/pattern/m$
</code></pre></td></tr></table>
</div>
</div><h3 id="tip7-复制匹配的行" class="headerLink">
    <a href="#tip7-%e5%a4%8d%e5%88%b6%e5%8c%b9%e9%85%8d%e7%9a%84%e8%a1%8c" class="header-mark"></a>Tip.7 复制匹配的行</h3><p>将所有匹配的行复制到文件末尾</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">:g/pattern/t$
</code></pre></td></tr></table>
</div>
</div><h3 id="tip8-复制到-register-a" class="headerLink">
    <a href="#tip8-%e5%a4%8d%e5%88%b6%e5%88%b0-register-a" class="header-mark"></a>Tip.8 复制到 register a</h3><p>Vim 每个字母都是一个寄存器，所以使用全局命令也可以将内容复制到某一个寄存器，比如 a</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">qaq:g/pattern/y A
</code></pre></td></tr></table>
</div>
</div><ul>
<li>qaq 清空寄存器 a，qa 开始记录命令到 a 寄存器，q 停止记录</li>
<li>y A 将匹配的行 A (append) 追加到寄存器 a 中
存放到 a 寄存器之后就可以使用 &ldquo;ap 来粘贴使用或者其他操作了</li>
</ul>
<h3 id="tip9-反转文件中的每一行" class="headerLink">
    <a href="#tip9-%e5%8f%8d%e8%bd%ac%e6%96%87%e4%bb%b6%e4%b8%ad%e7%9a%84%e6%af%8f%e4%b8%80%e8%a1%8c" class="header-mark"></a>Tip.9 反转文件中的每一行</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">:g/^/m0
</code></pre></td></tr></table>
</div>
</div><p>:g 命令一行行匹配，匹配第一行时将第一行 m0 放到文件顶部，第二行放到文件顶部，当跑完一遍之后整个文件的每一行就反转了</p>
<h3 id="tip10-在匹配行后添加文字" class="headerLink">
    <a href="#tip10-%e5%9c%a8%e5%8c%b9%e9%85%8d%e8%a1%8c%e5%90%8e%e6%b7%bb%e5%8a%a0%e6%96%87%e5%ad%97" class="header-mark"></a>Tip.10 在匹配行后添加文字</h3><p>使用 s 命令可以实现，同样使用全局 g 命令也可以实现同样的效果</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">:g/pattern/s/$/mytext
</code></pre></td></tr></table>
</div>
</div><p>To be continued&hellip;</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li>[1] <a href="http://einverne.github.io/post/2017/10/vim-global.html" target="_blank" rel="noopener noreferrer">Vim 全局命令 g</a></li>
</ul>]]></description>
</item></channel>
</rss>
