<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>TechKoala - Input/Output </title>
        <link>https://www.techkoala.top/</link>
        <description>TechKoala 的自留地，输入知识/输出笔记，内容包括但不限于 Linux、虚拟机、路由器、网络工具、计算机网络、软件推荐及使用技巧等内容</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>admin@techkoala.top (TechKoala)</managingEditor>
            <webMaster>admin@techkoala.top (TechKoala)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 04 Jun 2021 11:06:47 &#43;0800</lastBuildDate>
            <atom:link href="https://www.techkoala.top/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>不容错过的 Bash 技巧</title>
    <link>https://www.techkoala.top/bash_tricks/</link>
    <pubDate>Fri, 04 Jun 2021 11:06:47 &#43;0800</pubDate>
    <author>TechKoala</author>
    <guid>https://www.techkoala.top/bash_tricks/</guid>
    <description><![CDATA[<blockquote>
<p>一些提升 Bash 使用效率的小技巧</p>
</blockquote>
<p>在使用 Bash 时，我们通常使用 上 ↑ 下 ↓ 箭头来快速切换历史命令，然而一些重复的、不想要的命令（例如最简单的 ls，敲击比切换快，同时也会增加切换到别的命令的按键次数）也在历史记录里保存，这降低了切换的效率。下面一些技巧可以更好的帮助我们切换到想要的命令：</p>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>说明<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>下文中需要编辑的内容均在<code>.bashrc</code>中，使用常用的文本编辑器打开它，例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ vim ~/.bashrc
</code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<h2 id="使用-histignore-移除历史记录中无意义的命令">使用 HISTIGNORE 移除历史记录中无意义的命令</h2>
<p>有一些命令极为常用常用、或者敲击简单，我们不想它出现在历史记录里，那么在<code>.bashrc</code>中添加下述内容忽略它即可：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">export</span> <span class="nv">HISTIGNORE</span><span class="o">=</span><span class="s1">&#39;pwd:exit:fg:bg:top:clear:history:ls:uptime:df&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>作为补充，如果我们不希望某些敏感的命令出现在历史记录中，例如在命令行中指定密码或 API 密钥，那么可以使用下面的选项来确保任何以<strong>空格</strong>开头的命令不会出现在历史文件中：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">export</span> <span class="nv">HISTCONTROL</span><span class="o">=</span>ignorespace
</code></pre></td></tr></table>
</div>
</div><p>另外：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">export</span> <span class="nv">HISTCONTROL</span><span class="o">=</span>ignoredups
</code></pre></td></tr></table>
</div>
</div><p>则表示当同一个命令重复出现时，只存储命令的一个副本。</p>
<h2 id="设置历史记录数量">设置历史记录数量</h2>
<p>为了防止不必要的丢失，可以适当的将记录数量调整的更大：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">shopt</span> -s histappend
<span class="nb">export</span> <span class="nv">HISTSIZE</span><span class="o">=</span><span class="m">10000</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="更有效的调用命令">更有效的调用命令</h2>
<p><code>!!</code>可以调用前一行的命令。</p>
<p>例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ <span class="nb">pwd</span>
/etc
$ !!
<span class="nb">pwd</span>
/etc
</code></pre></td></tr></table>
</div>
</div><p>同时，<code>!!</code>也可以作为参数加入别的命令配合使用，例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ sudo !!
</code></pre></td></tr></table>
</div>
</div><p>就将使用 root 权限再次执行此前的命令。</p>
<p>此外，我们还可以通过在历史命令提供的<strong>行号</strong>前加一个<code>!</code>来运行历史上的命令，但是请注意不要打错行号，避免执行出错：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ rm -r temp/
$ mkdir temp
$ touch temp/test
$ !!
touch temp/test
$ <span class="nb">history</span> <span class="p">|</span> tail -4
  <span class="m">179</span>  rm -r temp/
  <span class="m">180</span>  mkdir temp
  <span class="m">181</span>  touch temp/test
  <span class="m">182</span>  touch temp/test
  <span class="m">183</span>  <span class="nb">history</span> <span class="p">|</span> tail -5
$ !179:p
rm -r temp
$ !180
touch temp/test
</code></pre></td></tr></table>
</div>
</div><p>我们也可以用前面的<code>!</code>来调用一个命令的最后一次出现，例如:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ !ping
</code></pre></td></tr></table>
</div>
</div><p>将运行我们最后运行的以 <code>ping</code> 开头的命令。</p>
<p>为了上述内容出错，可以添加一个<code>:p</code>来显示命令内容，而不实际执行它们。</p>
<h2 id="使用--和--调用前一行参数">使用 !$ 和 !* 调用前一行参数</h2>
<p>和<code>!!</code>不同，<code>!$</code>和<code>!*</code>仅指代前一行，命令的部分内容。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ mv list.txt items.txt
$ vim !$
vim items.txt
$ cp !$ shopping.txt
cp items.txt shopping.txt
</code></pre></td></tr></table>
</div>
</div><p>可以看到<code>!$</code>指代上一行命令的最后一个参数</p>
<p>而<code>!*</code>指代上一行命令<strong>除了第一个</strong>以外的所有参数：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ rm /var/log/httpd/access.log /var/log/httpd/error.log
$ touch !*
touch /var/log/httpd/access.log /var/log/httpd/error.log
</code></pre></td></tr></table>
</div>
</div><h2 id="用--替换前一行的匹配词">用 ^ 替换前一行的匹配词</h2>
<p><code>^</code>符号允许你在切换一个匹配的单词后重复前一个命令，比如说：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ rm /var/log/httpd/error.log
$ ^error^access
rm /var/log/httpd/access.log
</code></pre></td></tr></table>
</div>
</div><h2 id="参考">参考</h2>
<ul>
<li>[1] <a href="https://cyb.org.uk/2021/05/03/bash-productivity.html" target="_blank" rel="noopener noreffer">Be more productive with use of your BASH history</a></li>
</ul>]]></description>
</item><item>
    <title>Docker 搭建 FreshRSS 专属 RSS 服务 </title>
    <link>https://www.techkoala.top/frsshrss/</link>
    <pubDate>Fri, 28 May 2021 23:25:46 &#43;0800</pubDate>
    <author>TechKoala</author>
    <guid>https://www.techkoala.top/frsshrss/</guid>
    <description><![CDATA[<blockquote>
<p>inoreader 等现有服务要么付费要么有限制，有服务器的话自建 FreshRSS 是一个很好的选择</p>
</blockquote>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>注意<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">境外服务器是保证服务可用性的条件之一</div>
        </div>
    </div>
<h2 id="freshrss-docker-配置">FreshRSS Docker 配置</h2>
<p>创建一个新目录 <code>~/freshrss</code> 并进入该位置，新建 docker-compose.yml</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback"># 创建 FreshRSS 目录并进入
mkdir ~/freshrss &amp;&amp; cd ~/freshrss

# 新建&amp;编辑配置文件
vim docker-compose.yml
</code></pre></td></tr></table>
</div>
</div><h3 id="docker-composeyml">docker-compose.yml</h3>
<p>配置文件内容见下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback"># ~/freshrss/docker-compose.yml

version: &#34;3&#34;

services:
  freshrss-db:
    image: postgres:latest            # 官方示例中给出了 MySQL/MarriaDB/PostgreSQL 三种方案
    container_name: freshrss-db
    hostname: freshrss-db
    restart: always
    volumes:
      - freshrss-db:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: freshrss       # 数据库配置，请自行修改、避免使用默认配置
      POSTGRES_PASSWORD: freshrss   # 数据库配置，请自行修改、避免使用默认配置
      POSTGRES_DB: freshrss         # 数据库配置，请自行修改、避免使用默认配置

  freshrss-app:
    image: freshrss/freshrss:latest
    container_name: freshrss-app
    hostname: freshrss-app
    restart: always
    ports:
      - &#34;39954:80&#34;                   # 映射端口
    depends_on:
      - freshrss-db
    volumes:
      - ./data:/var/www/FreshRSS/data
      - ./extensions:/var/www/FreshRSS/extensions
    environment:
      CRON_MIN: &#39;*/45&#39;             # RSS 刷新周期，单位为分钟，*/45 表示每 45 分钟刷新一次
      TZ: Asia/Shanghai            # 时区

volumes:
  freshrss-db:
</code></pre></td></tr></table>
</div>
</div><p>确认配置后，运行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ docker-compose up -d
</code></pre></td></tr></table>
</div>
</div><h2 id="freshrss-设置">FreshRSS 设置</h2>
<h3 id="初始化">初始化</h3>
<p>数据库连接需要注意的点：</p>
<ul>
<li>主机名填写 <code>freshrss-db</code>（数据库 docker 容器名）</li>
<li>用户名、密码、数据库分别对应之前 Docker Compose 配置文件中的 POSTGRES_USER、POSTGRES_PASSWORD、POSTGRES_DB</li>
<li>表前缀任意填</li>
</ul>
<h3 id="设置">设置</h3>
<p>最好关闭<code>阅读 =&gt; 合适将文章标记为已读</code>的<code>在滚动浏览后</code>，否则即便不点击打开文章、只要你划过去就标记为已读</p>
<h3 id="扩展">扩展</h3>
<p>一个重要的扩展是 <code>Auto Refresh</code>，实现自动刷新源</p>
<p>点击扩展页面中的相应扩展，会跳转到相应的下载地址，将扩展下载后上传到 FreshRSS 安装目录下的 extensions 文件夹（之前部署 FreshRSS 的 Docker Compose 配置文件中已经将 <code>~/freshrss/extensions/</code> 对应了 FreshRSS 在容器内的扩展位置，所以只需要将扩展拖至 <code>~/freshrss/extensions/</code> 即可）</p>
<p>将解压后的 xExtension-AutoRefresh 文件夹放到 ~/freshrss/extensions 目中，到 FreshRSS <code>设置-&gt; 扩展</code> 启用，刷新时间需要修改 <code>xExtension-AutoRefresh/static/script.js</code> ，其中时间相关单位是 ms</p>
<h2 id="nginx-反向代理">Nginx 反向代理</h2>
<p>参见<a href="/nginx_port_reuse/" rel="">使用 Nginx 实现多服务复用端口</a></p>
<h2 id="配合第三方软件">配合第三方软件</h2>
<p>推荐搭配<code>Feedme</code> 、<code>Fluent reader</code>食用更佳</p>
<p>在此之前需要到开启<code>认证 =&gt; 允许 API 访问</code>，并在<code>用户账户 =&gt; API 管理</code>中设置相应的 API 密码</p>
<p>需要注意，<code>Feedme</code>服务应选择<code>FreshRSS</code></p>
<p>参数配置如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">域名：https://xxx.techkoala.top/api/fever.php   # Fluent reader
域名：https://xxx.techkoala.top/api/greader.php # Feedme 使用 fever会出现 Auth Failed

用户名：注册用户名
密码：API 密码
</code></pre></td></tr></table>
</div>
</div><h2 id="参考">参考</h2>
<ul>
<li>[1] <a href="https://blog.ichr.me/post/docker-freshrss-setup/" target="_blank" rel="noopener noreffer">使用 Docker 部署 FreshRSS 自建专属 RSS 服务</a></li>
</ul>]]></description>
</item><item>
    <title>常用 youtube-dl 命令</title>
    <link>https://www.techkoala.top/youtube-dl_tricks/</link>
    <pubDate>Tue, 18 May 2021 15:19:43 &#43;0800</pubDate>
    <author>TechKoala</author>
    <guid>https://www.techkoala.top/youtube-dl_tricks/</guid>
    <description><![CDATA[<blockquote>
<p>记录一些常用的 youtube-dl 命令，拯救脑容量。</p>
</blockquote>
<h2 id="下载播放列表">下载播放列表</h2>
<p>Windows</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cmd" data-lang="cmd">youtube-dl -o D:\<span class="nv">%(title)s.%</span>(ext)s -f bestaudio --extract-audio --audio-format mp3 --audio-quality 0 https://www.youtube.com/playlist?list=xxxxxxxxxxxx 

</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">-o D:\%(title)s.%(ext)s     #保留原始名称和后缀
-f bestaudio                #最佳音频
--extract-audio             #提取音频
--audio-format mp3          #设置音频格式，下载文件若不同，则调用ffmpeg转换
--playlist-items 1,2,5      #下载播放列表中的哪些项
--playstart-start 2         #从第二项开始下载播放列表
--playstart-end 2
-f &#39;bestvideo[height&lt;=1080]+bestaudio/best[height&lt;=1080]&#39;             #设置最大下载分辨率
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>持久化 Gist file raw 链接</title>
    <link>https://www.techkoala.top/permalink_gist_raw_file/</link>
    <pubDate>Mon, 03 May 2021 22:22:32 &#43;0800</pubDate>
    <author>TechKoala</author>
    <guid>https://www.techkoala.top/permalink_gist_raw_file/</guid>
    <description><![CDATA[<blockquote>
<p>如何持久化 Gist file raw 链接地址？</p>
</blockquote>
<h2 id="问题">问题</h2>
<p>通常，Gist 文件的 raw 链接会随着版本二更改，但在使用上往往不便，因此需要持久化文件的 raw 链接地址。</p>
<h2 id="解决方法">解决方法</h2>
<ul>
<li>
<p>获得 Gist 文件列表中的第一个文件： <code>https://gist.github.com/gist_user/gist_id/raw/</code></p>
<p>例如: <a href="https://gist.github.com/atenni/5604522/raw/">https://gist.github.com/atenni/5604522/raw/</a></p>
<p>即便更改了文件名，上述方法依然可以获得列表中的第一个文件。</p>
</li>
<li>
<p>获得多个文件： <code>https://gist.github.com/gist_user/gist_id/raw/file_name</code></p>
<p>例如: <a href="https://gist.github.com/atenni/5604522/raw/README.md">https://gist.github.com/atenni/5604522/raw/README.md</a></p>
</li>
</ul>
<h2 id="参考">参考</h2>
<ul>
<li>[1] <a href="https://gist.github.com/atenni/5604615" target="_blank" rel="noopener noreffer">How to permalink to a gist&rsquo;s raw file</a></li>
</ul>]]></description>
</item><item>
    <title>Windows 网络连接优先级设置</title>
    <link>https://www.techkoala.top/windows_10_network_priority/</link>
    <pubDate>Thu, 29 Apr 2021 20:42:25 &#43;0800</pubDate>
    <author>TechKoala</author>
    <guid>https://www.techkoala.top/windows_10_network_priority/</guid>
    <description><![CDATA[<blockquote>
<p>Windows10 默认优先使用有线连接，但是如需优先使用无线连接，除了拔网线/禁用有线网卡外，还可以通过修改接口跃点数，实现不同网络连接的优先级。</p>
</blockquote>
<h2 id="优先级设置方法">优先级设置方法</h2>
<h3 id="方法一控制面板中修改">方法一：控制面板中修改</h3>
<p>接口跃点数通过以下步骤找到：</p>
<p>首先打开<code>控制面板 &gt; 网络和 Internet &gt; 网络连接</code></p>
<p>找到想要修改的网络连接，右键打开<code>属性</code></p>
<p>接下来打开<code>Internet 协议版本 4 属性 &gt; 高级</code></p>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/Network_Priority/GUI.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/Network_Priority/GUI.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/Network_Priority/GUI.webp" data-sub-html="<h2>控制面板设置界面</h2>">
        
    </a><figcaption class="image-caption">控制面板设置界面</figcaption>
    </figure>
<p>取消勾选<code>自动跃点</code>，填入需要设置的数值即可，有关数值设置的注意事项将在后续说明。</p>
<h3 id="方法二powershell-中修改">方法二：Powershell 中修改</h3>
<p>更便捷的方式是通过 Powershell 进行修改。</p>
<p>首先以管理员身份运行 Windows PowerShell，并使用命令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">PS </span><span class="n">C:</span><span class="p">\</span><span class="n">Users</span><span class="p">\</span><span class="n">xxxx</span><span class="p">&gt;</span> <span class="nb">Get-NetIPInterface</span>
</code></pre></td></tr></table>
</div>
</div><p>获得当前所有的网络连接，其中<code>InterfaceMetric</code>即为接口跃点数的值。</p>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/Network_Priority/powershell.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/Network_Priority/powershell.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/Network/Network_Priority/powershell.webp" data-sub-html="<h2>Powershell 设置界面</h2>">
        
    </a><figcaption class="image-caption">Powershell 设置界面</figcaption>
    </figure>
<p>找到想要修改的网络连接以及它的 ifIndex (接口索引)值，例如 x，使用命令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">PS </span><span class="n">C:</span><span class="p">\</span><span class="n">Users</span><span class="p">\</span><span class="n">xxxx</span><span class="p">&gt;</span> <span class="nb">Set-NetIPInterface</span> <span class="n">-InterfaceIndex</span> <span class="n">x</span> <span class="n">-InterfaceMetric</span> <span class="n">10</span>
</code></pre></td></tr></table>
</div>
</div><p>即可将其跃点数设置为 10。</p>
<p>想要恢复跃点数的话，运行以下命令即可：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">PS </span><span class="n">C:</span><span class="p">\</span><span class="n">Users</span><span class="p">\</span><span class="n">xxxx</span><span class="p">&gt;</span> <span class="nb">Set-NetIPInterface</span> <span class="n">-InterfaceIndex</span> <span class="n">x</span> <span class="n">-AutomaticMetric</span> <span class="n">enabled</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="跃点数的设置范围">跃点数的设置范围</h3>
<p>跃点数越小，网络优先级越高。</p>
<p>跃点数的理论范围是 1 ~ 999，但跃点数低于 10 ，可能会导致某些网络访问失败，同时，合理的跃点数值也要参考网络带宽。</p>
<h2 id="分流方法">分流方法</h2>
<p>在同时使用 Wi-Fi 和有线网络的环境下可以用 route 命令实现特定网段使用特定接口。</p>
<p>举例：</p>
<p>可以连接到互联网的 Wi-Fi 网关地址是 <code>192.168.0.1</code>，有线网网关 IP 是 <code>10.0.0.1</code>。
分流：需要访问的内网资源都位于 <code>10.0.0.0/8</code> 段，其他流量都走 Wi-Fi。</p>
<ol>
<li>首先打开管理员身份的命令提示符，输入以下命令删除默认的路由表。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">route delete 0.0.0.0
</code></pre></td></tr></table>
</div>
</div><ol start="2">
<li>添加一个默认路由，指定所有流量走 Wi-Fi。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">route add 0.0.0.0 mask 0.0.0.0 192.168.0.1
</code></pre></td></tr></table>
</div>
</div><ol start="3">
<li>添加另一个路由，指定 <code>10.0.0.1~10.255.255.254</code> 流量走有线网络。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">route add 10.0.0.0 mask 255.0.0.0 10.0.0.1
</code></pre></td></tr></table>
</div>
</div><h2 id="参考">参考</h2>
<ul>
<li>
<p>[1] <a href="https://windows10.pro/set-netipinterface-interfaceindex-interfacemetric/" target="_blank" rel="noopener noreffer">修改接口跃点数，让 Win10 优先使用无线网络连接</a></p>
</li>
<li>
<p>[2] <a href="https://www.appinn.com/wi-fi-or-lan/" target="_blank" rel="noopener noreffer">同时连接网线和 Wi-Fi，如何优先使用 Wi-Fi？试试接口跃点数</a></p>
</li>
</ul>]]></description>
</item><item>
    <title>使用 Nginx 实现多服务复用端口</title>
    <link>https://www.techkoala.top/nginx_port_reuse/</link>
    <pubDate>Tue, 20 Apr 2021 14:17:01 &#43;0800</pubDate>
    <author>TechKoala</author>
    <guid>https://www.techkoala.top/nginx_port_reuse/</guid>
    <description><![CDATA[<blockquote>
<p>利用 Nginx 在单一服务器上搭建多个同端口的服务</p>
</blockquote>
<h2 id="说明">说明</h2>
<p>目前服务器上运行以下服务：</p>
<ul>
<li><code>Trojan</code></li>
<li><code>frp</code> + <code>Bitwarden</code> 实现内网穿透访问</li>
<li><code>FreshRSS</code></li>
</ul>
<p>三个服务使用了不同域名进行区分，但为了便捷，都使用 <code>443</code> 端口。</p>
<h2 id="流程概览">流程概览</h2>
<ol>
<li>采用 <code>Docker</code> 在本地服务器上搭建 <code>Bitwarden</code>，配置并运行 <code>frpc</code> 指向服务器上的 <code>frps</code></li>
<li>在服务器上搭建其他网站或者需要使用 <code>443</code> 端口的服务（如：<code>Trojan</code>)，配置运行 <code>frps</code></li>
<li>采用 <code>Docker</code> 搭建 FreshRSS，首先使用 IP:Port 完成相关配置，然后配置域名，申请证书</li>
<li>安装 <code>Nginx</code>，这里需要利用 <code>Nginx</code> 的 <code>stream_ssl_preread</code> 模块，使用<code>nginx -V</code>查看是否包含该模块。（该模块在 <code>Nginx 1.19.2</code> 已默认包含，但 <code>Ubuntu</code> 等发行版还在使用更老的 <code>stable</code> 版本，需要手动添加 <code>mainline</code> 版本源，并更新 <code>Nginx</code> 到最新版本）</li>
</ol>
<h2 id="获取-ssl-证书">获取 SSL 证书</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ sudo apt install certbot python3-certbot-nginx
$ sudo certbot --nginx -d example.com -d www.example.com
</code></pre></td></tr></table>
</div>
</div><h2 id="本地配置文件">本地配置文件</h2>
<h3 id="frpcini">frpc.ini</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">[common]
server_addr = xxx.xxx.xxx.xxx           # 服务器地址
server_port = xxx                       # 与服务器 frps 通信的端口
token = xxxxxx                          # frp 验证密钥

[bitwarden_https]
type = https
local_port = 443
custom_domains = xxx.xxx.xxx            # Bitwarden 域名
</code></pre></td></tr></table>
</div>
</div><h3 id="本地-nginxcof">本地 nginx.cof</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">user www www;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;
worker_rlimit_nofile 8192;
events {
    worker_connections 4096;
}
http {
    include mime.types;
    default_type application/octet-stream;

    client_max_body_size 0;
    client_body_buffer_size 512k;

    sendfile on;
    sendfile_max_chunk 1m;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;

    types_hash_max_size 4096;

    proxy_cache_path /var/run/nginx-proxy-cache levels=1:2 keys_zone=cache_one:20m inactive=1d max_size=500m;
    proxy_cache cache_one;
    proxy_temp_path /var/run/proxy_temp_dir;
    proxy_temp_file_write_size 128k;
    proxy_next_upstream error timeout invalid_header http_500 http_503 http_404;
    proxy_buffer_size 16k;
    proxy_busy_buffers_size 24k;
    proxy_buffers 64 4k;

    gzip on;
    gzip_min_length 1k;
    gzip_buffers 4 16k;
    gzip_http_version 1.1;
    gzip_comp_level 2;
    gzip_types text/plain application/javascript application/x-javascript text/javascript text/css application/xml;
    gzip_vary on;
    gzip_proxied expired no-cache no-store private auth;
    gzip_disable &#34;MSIE [1-6]\.&#34;;

    server_tokens off;

    server {
        listen 443 ssl http2;
        server_name xxx.xxx.xxx;                        # 域名

        ssl_certificate /xxx/cert/fullchain.pem;        # 证书路径
        ssl_certificate_key /xxx/cert/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 1d;

        location / {
            proxy_pass http://127.0.0.1:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /notifications/hub {
            proxy_pass http://127.0.0.1:3012;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection &#34;upgrade&#34;;
        }

        location /notifications/hub/negotiate {
            proxy_pass http://127.0.0.1:8080;
        }
    }
}
</code></pre></td></tr></table>
</div>
</div><h2 id="服务器配置文件">服务器配置文件</h2>
<h3 id="服务器-nginxcof">服务器 nginx.cof</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">user www-data;
worker_processes auto;
pid /var/run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
	worker_connections 768;
	# multi_accept on;
}

stream {
    map $ssl_preread_server_name $name {
        xxx.techkoala.top frps-bitwarden;   # Bitwarden 域名
        xxx.techkoala.top trojan;           # Trojan 域名
        xxx.techkoala.top rss;              # FreshRSS 域名
    }
    upstream frps-bitwarden {
        server 127.0.0.1:8080;        # Bitwarden的 frps 端口
    }
    upstream trojan {
        server 127.0.0.1:4443;        # Trojan 本地监听端口
    }
    upstream rss {
        server 127.0.0.1:39955;       # FreshRSS 本地监听端口
    }
    server {
        listen 443 reuseport;
        listen [::]:443 reuseport;
        proxy_pass	$name;
        ssl_preread on;               # 开启 ssl_preread
    }
}

http {
	##
	# Basic Settings
	##

	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 65;
	types_hash_max_size 2048;
	# server_tokens off;

	# server_names_hash_bucket_size 64;
	# server_name_in_redirect off;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	##
	# SSL Settings
	##

	ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE
	ssl_prefer_server_ciphers on;

	##
	# Logging Settings
	##

	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log;

	##
	# Gzip Settings
	##

	gzip on;

	# gzip_vary on;
	# gzip_proxied any;
	# gzip_comp_level 6;
	# gzip_buffers 16 8k;
	# gzip_http_version 1.1;
	# gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

	##
	# Virtual Host Configs
	##

	include /etc/nginx/conf.d/*.conf;
	include /etc/nginx/sites-enabled/*;     # 启用的网站配置放置在此文件夹下
}

</code></pre></td></tr></table>
</div>
</div><h3 id="bitwarden-相关配置">Bitwarden 相关配置</h3>
<h4 id="frpsini">frps.ini</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">[common]
bind_port = xxxx                # 与本地 frpc 通信的端口
vhost_https_port = xxxx         # 虚拟 https 端口，需要和 nginx.conf 内一致
authentication_method = token
token = xxxxxx                  # frp 验证密钥
</code></pre></td></tr></table>
</div>
</div><h4 id="bitwarden-nginx-站点配置">Bitwarden Nginx 站点配置</h4>
<p>放置在<code>/etc/nginx/sites-available/</code>下，文件与域名同名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">## Bitwarden 配置。只负责只将 http 重定向至 https
## Bitwarden 的 SSL 握手交给本地服务器端的 Nginx 处理
server {
        listen 80;
        listen [::]:80;
        server_name xxx.techkoala.top;                    # Bitwarden 域名
        return 301 https://xxx.techkoala.top$request_uri; # Bitwarden 域名
}

</code></pre></td></tr></table>
</div>
</div><p>链接配置文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">ln -s /etc/nginx/sites-available/xxx.techkoala.top /etc/nginx/sites-enabled/
</code></pre></td></tr></table>
</div>
</div><h3 id="trojan-相关配置">Trojan 相关配置</h3>
<h4 id="trojan-nginx-配置">Trojan Nginx 配置</h4>
<p>放置在<code>/etc/nginx/sites-available/</code>下，文件与域名同名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">server {
    listen 127.0.0.1:80 default_server;
    server_name xxx.techkoala.top;             # 自己的域名
    location / {
        proxy_pass https://www.aliexpress.com; # 伪装的网站，这里是阿里速卖通
    }
}
server {
    listen 127.0.0.1:80;
    server_name xxx.techkoala.top;                 # 自己服务器的 IP
    return 301 https://xxx.techkoala.top$request_uri;  # 自己的域名
}
server {
    listen 0.0.0.0:80;
    listen [::]:80;
    server_name _;
    return 301 https://$host$request_uri;
}

</code></pre></td></tr></table>
</div>
</div><p>链接配置文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">ln -s /etc/nginx/sites-available/xxx.techkoala.top /etc/nginx/sites-enabled/
</code></pre></td></tr></table>
</div>
</div><h4 id="trojan-配置文件">Trojan 配置文件</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">{
    &#34;run_type&#34;: &#34;server&#34;,
    &#34;local_addr&#34;: &#34;0.0.0.0&#34;,
    &#34;local_port&#34;: 4443,             # 本地监听端口，与 nginx.conf 保持一致
    &#34;remote_addr&#34;: &#34;127.0.0.1&#34;,
    &#34;remote_port&#34;: 80,              # 伪装站点的端口
    &#34;password&#34;: [
        &#34;xxxxxx&#34;                    # 密钥
    ],
    &#34;log_level&#34;: 1,
    &#34;ssl&#34;: {
        &#34;cert&#34;: &#34;/usr/local/etc/ssl/certificate.crt&#34;,
        &#34;key&#34;: &#34;/usr/local/etc/ssl/private.key&#34;,
        &#34;key_password&#34;: &#34;&#34;,
        &#34;cipher&#34;: &#34;ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384&#34;,
        &#34;cipher_tls13&#34;: &#34;TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384&#34;,
        &#34;prefer_server_cipher&#34;: true,
        &#34;alpn&#34;: [
            &#34;http/1.1&#34;
        ],
        &#34;alpn_port_override&#34;: {
            &#34;h2&#34;: 81
        },
        &#34;reuse_session&#34;: true,
        &#34;session_ticket&#34;: false,
        &#34;session_timeout&#34;: 600,
        &#34;plain_http_response&#34;: &#34;&#34;,
        &#34;curves&#34;: &#34;&#34;,
        &#34;dhparam&#34;: &#34;&#34;
    },
    &#34;tcp&#34;: {
        &#34;prefer_ipv4&#34;: false,
        &#34;no_delay&#34;: true,
        &#34;keep_alive&#34;: true,
        &#34;reuse_port&#34;: false,
        &#34;fast_open&#34;: false,
        &#34;fast_open_qlen&#34;: 20
    },
    &#34;mysql&#34;: {
        &#34;enabled&#34;: false,
        &#34;server_addr&#34;: &#34;127.0.0.1&#34;,
        &#34;server_port&#34;: 3306,
        &#34;database&#34;: &#34;trojan&#34;,
        &#34;username&#34;: &#34;trojan&#34;,
        &#34;password&#34;: &#34;&#34;,
        &#34;key&#34;: &#34;&#34;,
        &#34;cert&#34;: &#34;&#34;,
        &#34;ca&#34;: &#34;&#34;
    }
}
</code></pre></td></tr></table>
</div>
</div><h3 id="freshrss-站点配置">FreshRSS 站点配置</h3>
<p>放置在<code>/etc/nginx/sites-available/</code>下，文件与域名同名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">server {
        listen 80;
        listen [::]:80;
        server_name xxx.techkoala.top;
        return 301 https://xxx.techkoala.top$request_uri;
    }

server {
    listen 39955 ssl http2;          # FreshRSS 本地监听端口
    server_name rss.techkoala.top;
    ssl_certificate /etc/letsencrypt/live/xxx.techkoala.top/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/xxx.techkoala.top/privkey.pem;

    location / {
       proxy_pass http://127.0.0.1:39954;   # 转发到 FreshRSS 容器映射的端口
    }
}

</code></pre></td></tr></table>
</div>
</div><p>链接配置文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">ln -s /etc/nginx/sites-available/xxx.techkoala.top /etc/nginx/sites-enabled/
</code></pre></td></tr></table>
</div>
</div><h2 id="防火墙设置">防火墙设置</h2>
<p>上述操作后，服务器需要打开<code>80</code>,<code>443</code>,<code>xxx</code>（frp 通信端口）</p>]]></description>
</item><item>
    <title>OpenWRT 使用 dnscrypt-proxy2 实现 DoH 查询及分流</title>
    <link>https://www.techkoala.top/openwrt_doh/</link>
    <pubDate>Fri, 29 Jan 2021 20:36:35 &#43;0800</pubDate>
    <author>TechKoala</author>
    <guid>https://www.techkoala.top/openwrt_doh/</guid>
    <description><![CDATA[<blockquote>
<p>OpenWRT 原始并不支持 DoH 或 DoT，会有 DNS 泄露问题</p>
</blockquote>
<h2 id="安裝-dnscrypt-proxy2">安裝 dnscrypt-proxy2</h2>
<p>如果使用 OpenWrt 19.07+版本，那么直接使用 opkg 即可完成安装</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">opkg update
opkg install dnscrypt-proxy2
</code></pre></td></tr></table>
</div>
</div><p>不过，版本可能不是最新，如果需要最新版本可以自行编译。</p>
<h2 id="配置">配置</h2>
<p>基本使用只需要</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">vim /etc/dnscrypt-proxy2/dnscrypt-proxy.toml
</code></pre></td></tr></table>
</div>
</div><p>修改</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">listen_addresses = [&#39;127.0.0.1:5335&#39;]
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">server_names = [&#39;google&#39;, &#39;cloudflare&#39;]
</code></pre></td></tr></table>
</div>
</div><p>即可</p>
<p>软件已经内置了常见的 DoH/DoT 服务器了，因此只需要填入名称即可</p>
<p>然后</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">/etc/init.d/dnscrypt-proxy restart
</code></pre></td></tr></table>
</div>
</div><p>重启软件，dnscrypt-proxy2 就会监听在 5335 这个端口了。</p>
<h2 id="分流搭配-ssr">分流（搭配 SSR+）</h2>
<ol>
<li>SSR+ 使用大陆 IP 白名单 并使用 5335 的 DNS 解析的方式</li>
<li>dnscyrpt-proxy2 配置监听在 5335，仅使用 DoH 协议向 <code>Cloudflare/Google</code> 服务器查询（这些 <code>Https</code> 的查询请求全部会被 SSR+ 代理转发）</li>
<li>iptables 劫持所有目标为 53 端口的流量到路由器的 53 端口（默认）</li>
<li>53 端口使用默认的 <code>masq</code> 作为 <code>DNS</code> 服务，上游设置为 127.0.0.1#5335，配置文件<code>/etc/dnsmasq.conf</code>最后添加 <code>conf-dir=/etc/dnsmasq.d</code></li>
<li>在<code>/etc/dnsmasq.d/</code>(如无则新建）中放入<code>https://github.com/felixonmars/dnsmasq-china-list/blob/master/accelerated-domains.china.conf</code></li>
</ol>
<p>这样实现了凡是大陆的和在大陆有 cdn 的以及返回 AAAA 记录的域名全部直连查询并直连访问，其余的全部走代理查询，且结果在大陆以外的走代理访问（IP+域名的双白名单机制）</p>
<h2 id="参考">参考</h2>
<ul>
<li>
<p>[1] <a href="https://github.com/coolsnowwolf/lede/issues/2551" target="_blank" rel="noopener noreffer">lede</a></p>
</li>
<li>
<p>[2] <a href="https://github.com/DNSCrypt/dnscrypt-proxy/wiki/Installation-on-OpenWrt" target="_blank" rel="noopener noreffer">Installation on OpenWrt</a></p>
</li>
</ul>]]></description>
</item><item>
    <title>Vim 小技巧</title>
    <link>https://www.techkoala.top/vim_tips/</link>
    <pubDate>Tue, 19 Jan 2021 19:34:18 &#43;0800</pubDate>
    <author>TechKoala</author>
    <guid>https://www.techkoala.top/vim_tips/</guid>
    <description><![CDATA[<blockquote>
<p>记录使用 Vim 时遇到实用的小技巧</p>
</blockquote>
<h2 id="全局命令-global">全局命令 g(lobal)</h2>
<p>vim 进入文件，命令行模式下执行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">:[range]global[!]/{pattern}/{command}
</code></pre></td></tr></table>
</div>
</div><p>也即：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">:[range]g/pattern/command
</code></pre></td></tr></table>
</div>
</div><ul>
<li>[range] 指定文本范围,默认为整个文档</li>
<li>pattern 在范围 range 内的行如果匹配 pattern，则执行 command</li>
<li>! 表示取反，也就是不匹配的行，也可以使用 vglobal</li>
<li>command 默认是打印文本</li>
</ul>
<h3 id="tip1-范围匹配">Tip.1 范围匹配</h3>
<p>20 行到 200 行之间，每一行下插入空行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">:20,200g/^/pu _
</code></pre></td></tr></table>
</div>
</div><h3 id="tip2-删除包含字符-pattern-的所有行">Tip.2 删除包含字符 pattern 的所有行</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">:g/pattern/d
</code></pre></td></tr></table>
</div>
</div><h3 id="tip3-删除空白行">Tip.3 删除空白行</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">:g/^$/d
</code></pre></td></tr></table>
</div>
</div><h3 id="tip4-删除不匹配的行">Tip.4 删除不匹配的行</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">:g!/pattern/d
:v/pattern/d
</code></pre></td></tr></table>
</div>
</div><h3 id="tip5-删除大量匹配行">Tip.5 删除大量匹配行</h3>
<p>Vim 在删除操作时，会先把要删除的内容放到寄存器中，假如没有指定寄存器，会默认放到一个未命名的寄存器中，对于要删除大量匹配行的行为，可能导致 Vim 花一些时间处理这些拷贝，避免花费不必要的时间可以指定一个 blackhole 寄存器 _</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">:g/pattern/d_
</code></pre></td></tr></table>
</div>
</div><h3 id="tip6-移动匹配的行">Tip.6 移动匹配的行</h3>
<p>将所有匹配的行移动到文件的末尾</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">:g/pattern/m$
</code></pre></td></tr></table>
</div>
</div><h3 id="tip7-复制匹配的行">Tip.7 复制匹配的行</h3>
<p>将所有匹配的行复制到文件末尾</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">:g/pattern/t$
</code></pre></td></tr></table>
</div>
</div><h3 id="tip8-复制到-register-a">Tip.8 复制到 register a</h3>
<p>Vim 每个字母都是一个寄存器，所以使用全局命令也可以将内容复制到某一个寄存器，比如 a</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">qaq:g/pattern/y A
</code></pre></td></tr></table>
</div>
</div><ul>
<li>qaq 清空寄存器 a，qa 开始记录命令到 a 寄存器，q 停止记录</li>
<li>y A 将匹配的行 A (append) 追加到寄存器 a 中
存放到 a 寄存器之后就可以使用 &ldquo;ap 来粘贴使用或者其他操作了</li>
</ul>
<h3 id="tip9-反转文件中的每一行">Tip.9 反转文件中的每一行</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">:g/^/m0
</code></pre></td></tr></table>
</div>
</div><p>:g 命令一行行匹配，匹配第一行时将第一行 m0 放到文件顶部，第二行放到文件顶部，当跑完一遍之后整个文件的每一行就反转了</p>
<h3 id="tip10-在匹配行后添加文字">Tip.10 在匹配行后添加文字</h3>
<p>使用 s 命令可以实现，同样使用全局 g 命令也可以实现同样的效果</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">:g/pattern/s/$/mytext
</code></pre></td></tr></table>
</div>
</div><p>To be continued&hellip;</p>
<h2 id="参考">参考</h2>
<ul>
<li>[1] <a href="http://einverne.github.io/post/2017/10/vim-global.html" target="_blank" rel="noopener noreffer">Vim 全局命令 g</a></li>
</ul>]]></description>
</item><item>
    <title>LTE 系列：功率控制</title>
    <link>https://www.techkoala.top/lte_power_control/</link>
    <pubDate>Mon, 02 Nov 2020 21:16:56 &#43;0800</pubDate>
    <author>TechKoala</author>
    <guid>https://www.techkoala.top/lte_power_control/</guid>
    <description><![CDATA[<blockquote>
<p>LTE 功率控制</p>
</blockquote>
<h2 id="功率控制">功率控制</h2>
<p>针对上行和下行信号的发送特点，物理层定义了相应的功率控制的机制。</p>
<ul>
<li>
<p>对于上行信号，终端的功率控制在<strong>节能</strong>和<strong>抑制用户间干扰</strong>的方面具有重要意义，所以，相应的采用<strong>闭环功率控制</strong>的方式，控制终端在上行单载波符号上的发送功率。</p>
</li>
<li>
<p>对于下行信号，基站合理的功率分配和相互之间的协调能够<strong>抑制小区间的干扰</strong>，提高组网的系统性能，所以，相应的采用<strong>开环功率分配</strong>的机制，控制基站在下行各个子载波上的发送功率。</p>
</li>
</ul>
<h3 id="上行功率控制">上行功率控制</h3>
<p>上行功率控制以<strong>各个终端为单位</strong>，控制终端到达基站的接收功率，使得不同距离的用户都能以适当的功率到达基站，<strong>避免远近效应</strong>。物理层上行采用<strong>部分功率控制</strong>（Fractional Power Control）结合<strong>闭环功率控制</strong>的方案，对无线链路的大尺度衰落和小尺度衰落进行补偿。</p>
<p>在子帧 i，终端 <code>PUSCH</code> 信道的发射功率可以表示为：</p>
<center>$P_{PUSCH}(i)=min\{P_{CMAX},10log_{10}(M_{PUSCH}(i))+P_{O_{PUSCH}} (j)+α(j)·PL+∆TF (i)+f(i)\}[dBm]$</center>
<p>其中：</p>
<ul>
<li>$P_{CMAX}$ 表示终端的最大发射功率</li>
<li>$M_{PUSCH}(i)$ 表示 <code>PUSCH</code> 的传输带宽（RB 数目）</li>
<li>$PL$ 是终端测量得到的下行大尺度损耗</li>
<li>$∆TF (i)$ 表示由调制编码方式和数据类型（控制信息或者数据信息）所确定的功率偏移量。</li>
<li>$KS＝1.25$ 或者 0，表示是否针对不同的调制方式进行补偿</li>
<li>$f(i)$ 是由终端闭环功率控制所形成的调整值。它的数值根据 <code>PDCCH Format0/3/3A</code> 上的功率控制命令进行调整</li>
</ul>
<p>物理层有两种闭环功率控制类型：</p>
<ul>
<li><strong>累计型（accumulation）</strong></li>
<li><strong>绝对值型（absolute）</strong></li>
</ul>
<p>与上行数据调度相类似</p>
<ul>
<li>在 <code>FDD</code> 情况下，<code>PDCCH Format 0/3/3A</code> 功率控制命令和相应的 <code>PUSCH</code> 发送之间的时延是 4ms</li>
<li>在 <code>TDD</code> 情况下，该时延的数值根据上下行时间分配比例的不同而有所不同</li>
</ul>
<p>与功率控制相结合，可以通过小区之间交换干扰情况的信息，进行协调的调度，抑制小区间的同频干扰，小区间 X2 接口上交互的信息有两种：</p>
<ul>
<li><strong>过载指示（Overload Indicator，OI）</strong>：指示本小区每个 <code>PRB</code> 上受到的上行干扰情况。相邻小区通过交换该消息了解对方目前的负载情况，并进行适当的调整</li>
<li><strong>干扰指示（High Interference Indicator，HII）</strong>：指示本小区每个 PRB 对于上行干扰的敏感度情况。该消息反映了本小区的调度安排，相邻小区通过交换该信息了解对方将要采用的调度安排，并进行适当的调整以实现协调的调度。</li>
</ul>
<h3 id="下行功率分配">下行功率分配</h3>
<p>下行功率分配以每个 <code>RE</code> 为单位，控制基站在<strong>各个时刻各个子载波</strong>上的发射功率。</p>
<p>下行功率分配中包括了</p>
<ul>
<li>提高导频信号的发射功率（即 power boosting）</li>
<li>用户调度相结合实现小区间干扰抑制的相关机制</li>
</ul>
<p>小区公用导频信号（CRS）在频率上和时间上采用<strong>恒定</strong>的发射功率，基站通过高层信令指示该发射功率的数值，在接收端，终端通过测量该信号的平均接收功率并与信令指示的发射功率进行比较，获得<strong>大尺度衰落</strong>的数值。</p>
<p>下行共享信道 <code>PDSCH</code> 的发射功率表示为 <code>PDSCH RE</code> 与 <code>CRS RE</code> 的功率比值，即 $ρA$ 和 $ρB$ 。其中</p>
<ul>
<li>$ρA$ 表示时隙内<strong>不带有</strong> <code>CRS</code> 导频信号的 <code>OFDM</code> 符号上（例如：2 天线、<code>Normal CP</code> 的情况下，时隙内的第 1、2、3、5、6 个 <code>OFDM</code> 符号），<code>PDSCH RE</code> 与 <code>CRS RE</code> 的功率比值</li>
<li>$ρB$ 表示时隙内<strong>带有</strong> <code>CRS</code> 导频信号的 <code>OFDM</code> 符号上（例如：2 天线、<code>Normal CP</code> 的情况下，时隙内第 0、4 个 <code>OFDM</code> 符号），<code>PDSCH RE</code> 与 <code>CRS RE</code> 的功率比值</li>
</ul>
<h4 id="提高-crs-导频信号的发射功率即-power-boosting">提高 CRS 导频信号的发射功率（即 power boosting）</h4>
<p>小区通过高层信令指示 $\frac{ρB}{ρA}$，通过不同的比值可以设置导频信号在基站总功率中不同的开销比例，由此实现了不同程度地提高 <code>CRS</code> 导频信号发射功率的功能。</p>
<blockquote>
<p>例：以发射天线数目等于 2 为例，支持 4 种不同的小区配置 $\frac{ρB}{ρA}=[\frac{5}{4},1,\frac{3}{4},\frac{1}{2}]$，分别对应于导频占总功率开销为$[\frac{1}{6}，\frac{1}{3}，\frac{3}{6}，\frac{2}{3}]$的情况。</p>
<p>下图表示了 $\frac{ρB}{ρA} =1$ 和 $\frac{ρB}{ρA} =\frac{1}{2}$ 时天线端口 #0 的信号功率情况，分别实现了导频信号以 3dB 和 9dB 高于同一 <code>OFDM</code> 符号中数据元素的发送功率。</p>
<figure><a class="lightgallery" href="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/LTE/LTE_Physical_Layer/LTE_physical_layer_43.webp" title="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/LTE/LTE_Physical_Layer/LTE_physical_layer_43.webp" data-thumbnail="https://cdn.jsdelivr.net/gh/techkoala/techkoala.github.io@master/images/WirelessCommunication/LTE/LTE_Physical_Layer/LTE_physical_layer_43.webp" data-sub-html="<h2>两种情况下天线端口 #0 的信号功率</h2>">
        
    </a><figcaption class="image-caption">两种情况下天线端口 #0 的信号功率</figcaption>
    </figure>
</blockquote>
<h4 id="用户功率分配和小区间干扰协调">用户功率分配和小区间干扰协调</h4>
<p>在指示 $\frac{ρB}{ρA}$ 的基础上，通过高层参数 $P_A$ 可以确定 $ρA$ 的具体数值，得到基站下行针对用户的 <code>PDSCH</code> 发射功率，该信息将用于 <code>16QAM</code>、<code>64QAM</code> 和 <code>MU-MIMO</code> 等需要幅度信息的检测过程。$P_A$ 和 $ρA$ 的数值关系是</p>
<center>$ρ_A =δ_{power-offset} +P_A$</center>
<p>其中 $δ_{power-offset}$ 用于 <code>MU-MIMO</code> 的场景，例如 $δ_{power-offset} =−3dB$ 可以表示功率平均分配给两个用户的情况。</p>
<h2 id="参考">参考</h2>
<ul>
<li>[1] LTE-Advanced 关键技术详解</li>
</ul>]]></description>
</item><item>
    <title>告知你不为人知的 UDP —— 疑难杂症和使用</title>
    <link>https://www.techkoala.top/udp_intractable_diseases/</link>
    <pubDate>Mon, 26 Oct 2020 11:06:30 &#43;0800</pubDate>
    <author>TechKoala</author>
    <guid>https://www.techkoala.top/udp_intractable_diseases/</guid>
    <description><![CDATA[<blockquote>
<p>UDP 说来简单，但是一些细节你都清楚吗？</p>
</blockquote>
<blockquote>
<p>注：本文系全文转载，原文信息如下：</p>
<p>作者：贺嘉</p>
<p>链接：https://zhuanlan.zhihu.com/p/25622691</p>
<p>来源：知乎</p>
<p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
</blockquote>
<h2 id="udp-疑难杂症">UDP 疑难杂症</h2>
<h3 id="udp-的传输方式面向报文">UDP 的传输方式：面向报文</h3>
<p>面向报文的传输方式决定了 UDP 的数据发送方式是一份一份的，也就是应用层交给 UDP 多长的报文，UDP 就照样发送，即一次发送一个报文。那么 UDP 的报文大小由哪些影响因素呢？UDP 数据包的理论长度是多少，合适的 UDP 数据包应该是多少呢？</p>
<h4 id="udp-报文大小的影响因素主要有以下-3-个">UDP 报文大小的影响因素，主要有以下 3 个</h4>
<ul>
<li>UDP 协议本身，UDP 协议中有 16 位的 UDP 报文长度，那么 UDP 报文长度不能超过 $2^{16}=65536$.</li>
<li>以太网(Ethernet)数据帧的长度，数据链路层的 MTU(最大传输单元)。</li>
<li>socket 的 UDP 发送缓存区大小</li>
</ul>
<h4 id="udp-数据包最大长度">UDP 数据包最大长度</h4>
<p>根据 UDP 协议，从 UDP 数据包的包头可以看出，UDP 的最大包长度是 $2^{16}$ 的个字节。由于 UDP 包头占 8 个字节，而在 IP 层进行封装后的 IP 包头占去 20 字节，所以这个是 UDP 数据包的<strong>最大理论长度</strong>是 $2^{16} - 1 - 8 - 20 = 65507$ 字节。</p>
<p>如果发送的数据包超过 65507 字节，send 或 sendto 函数会错误码 1(Operation not permitted，Message too long)，当然啦，一个数据包能否发送 65507 字节，还和 UDP 发送缓冲区大小（Linux 下 UDP 发送缓冲区大小为：<code>cat /proc/sys/net/core/wmem_default</code>）相关，如果发送缓冲区小于 65507 字节，在发送一个数据包为 65507 字节的时候，send 或 sendto 函数会错误码 1(Operation not permitted，No buffer space available)。</p>
<h4 id="udp-数据包理想长度">UDP 数据包理想长度</h4>
<p>理论上 UDP 报文最大长度是 <strong>65507</strong> 字节，实际上发送这么大的数据包效果最好吗？</p>
<ul>
<li>
<p>我们知道 UDP 是不可靠的传输协议，为了减少 UDP 包丢失的风险，我们<strong>最好</strong>能控制 UDP 包在下层协议的传输过程中<strong>不要被切割</strong>。</p>
<p>相信大家都知道 MTU 这个概念。MTU 最大传输单元，这个最大传输单元实际上和链路层协议有着密切的关系，Ethernet II 帧的结构 DMAC+SMAC+Type+Data+CRC 由于以太网传输电气方面的限制，每个以太网帧都有最小的大小 <strong>64</strong> 字节，最大不能超过 <strong>1518</strong> 字节，对于小于或者大于这个限制的以太网帧我们都可以视之为错误的数据帧，一般的以太网转发设备会丢弃这些数据帧。由于以太网 EthernetII 最大的数据帧是 1518 字节，除去以太网帧的帧头（DMAC 目的 MAC 地址 48bit=6Bytes+SMAC 源 MAC 地址 48bit=6Bytes+Type 域 2bytes）14Bytes 和帧尾 CRC 校验部分 4Bytes 那么剩下承载上层协议的地方也就是 Data 域最大就只能有 <strong>1500</strong> 字节这个值我们就把它称之为 MTU。</p>
<p>在下层数据链路层最大传输单元是 1500 字节的情况下，要想 IP 层不分包，那么 UDP 数据包的最大大小应该是 1500 字节 – IP 头(20 字节) – UDP 头(8 字节) = <strong>1472</strong> 字节。不过鉴于 Internet 上的标准 MTU 值为 <strong>576</strong> 字节，所以建议在进行 Internet 的 UDP 编程时，最好将 UDP 的数据长度控制在 (576-8-20)<strong>548</strong> 字节以内。</p>
</li>
</ul>
<h3 id="udp-数据包的发送和接收问题">UDP 数据包的发送和接收问题</h3>
<h4 id="udp-的通信有界性">UDP 的通信有界性</h4>
<p>在阻塞模式下，UDP 的通信是以数据包作为界限的，即使 Server 端的缓冲区再大也要按照 Client 发包的次数来多次接收数据包，Server 只能一次一次的接收，Client 发送多少次，Server 就需接收多少次，即客户端分几次发送过来，服务端就必须按几次接收。</p>
<h4 id="udp-数据包的无序性和非可靠性">UDP 数据包的无序性和非可靠性</h4>
<p>Client 依次发送 1、2、3 三个 UDP 数据包，Server 端先后调用 3 次接收函数，可能会依次收到 3、2、1 次序的数据包，收包可能是 1、2、3 的任意排列组合，也可能丢失一个或多个数据包。</p>
<h4 id="udp-数据包的接收">UDP 数据包的接收</h4>
<p>Client 发送两次 UDP 数据，第一次 500 字节，第二次 300 字节，Server 端阻塞模式下接包，第一次 recvfrom( 1000 )，收到是 1000，还是 500，还是 300，还是其他？</p>
<ul>
<li>由于 UDP 通信的有界性，接收到只能是 500 或 300，又由于 UDP 的无序性和非可靠性，接收到可能是 300，也可能是 500，也可能一直阻塞在 recvfrom 调用上，直到超时返回(也就是什么也收不到)。</li>
</ul>
<p>在假定数据包是不丢失并且是按照发送顺序按序到达的情况下，Server 端阻塞模式下接包，先后三次调用：recvfrom( 200)，recvfrom( 1000)，recvfrom( 1000)，接收情况如何呢？</p>
<ul>
<li>由于 UDP 通信的有界性，第一次 recvfrom( 200)将接收第一个 500 字节的数据包，但是因为用户空间 buf 只有 200 字节，于是只会返回前面 200 字节，剩下 300 字节将丢弃。第二次 recvfrom( 1000)将返回 300 字节，第三次 recvfrom( 1000)将会阻塞。</li>
</ul>
<h4 id="udp-包分片问题">UDP 包分片问题</h4>
<p>如果 MTU 是 1500，Client 发送一个 8000 字节大小的 UDP 包，那么 Server 端阻塞模式下接包，在不丢包的情况下，recvfrom(9000)是收到 1500，还是 8000。如果某个 IP 分片丢失了，recvfrom(9000)，又返回什么呢？</p>
<ul>
<li>根据 UDP 通信的有界性，在 buf 足够大的情况下，接收到的一定是一个完整的数据包，UDP 数据在下层的分片和组片问题由 IP 层来处理，提交到 UDP 传输层一定是一个完整的 UDP 包，那么 recvfrom(9000)将返回 8000。如果某个 IP 分片丢失，UDP 里有个 CRC 检验，如果包不完整就会丢弃，也不会通知是否接收成功，所以 UDP 是不可靠的传输协议，那么 recvfrom(9000)将阻塞。</li>
</ul>
<h3 id="udp-丢包问题">UDP 丢包问题</h3>
<p>在不考虑 UDP 下层 IP 层的分片丢失，CRC 检验包不完整的情况下，造成 UDP 丢包的因素有哪些呢？</p>
<ol>
<li>UDP socket 缓冲区满造成的 UDP 丢包</li>
</ol>
<ul>
<li>通过 <code>cat /proc/sys/net/core/rmem_default</code> 和 <code>cat /proc/sys/net/core/rmem_max</code> 可以查看 socket 缓冲区的缺省值和最大值。如果 socket 缓冲区满了，应用程序没来得及处理在缓冲区中的 UDP 包，那么后续来的 UDP 包会被内核丢弃，造成丢包。在 socket 缓冲区满造成丢包的情况下，可以通过增大缓冲区的方法来缓解 UDP 丢包问题。但是，如果服务已经过载了，简单的增大缓冲区并不能解决问题，反而会造成滚雪球效应，造成请求全部超时，服务不可用。</li>
</ul>
<ol>
<li>UDP socket 缓冲区过小造成的 UDP 丢包</li>
</ol>
<ul>
<li>如果 Client 发送的 UDP 报文很大，而 socket 缓冲区过小无法容下该 UDP 报文，那么该报文就会丢失。</li>
</ul>
<ol start="2">
<li>ARP 缓存过期导致 UDP 丢包</li>
</ol>
<ul>
<li>
<p>ARP 的缓存时间约 10 分钟，APR 缓存列表没有对方的 MAC 地址或缓存过期的时候，会发送 ARP 请求获取 MAC 地址，在没有获取到 MAC 地址之前，用户发送出去的 UDP 数据包会被内核缓存到 arp_queue 这个队列中，默认最多缓存 3 个包，多余的 UDP 包会被丢弃。</p>
<p>被丢弃的 UDP 包可以从 <code>/proc/net/stat/arp_cache</code> 的最后一列的 <code>unresolved_discards</code> 看到。当然我们可以通过 <code>echo 30 &gt; /proc/sys/net/ipv4/neigh/eth1/unres_qlen</code> 来增大可以缓存的 UDP 包。UDP 的丢包信息可以从 <code>cat /proc/net/udp</code> 的最后一列 drops 中得到，而倒数第四列 inode 是丢失 UDP 数据包的 socket 的全局唯一的虚拟 i 节点号，可以通过这个 inode 号结合 <code>lsof(lsof -P -n | grep 25445445)</code>来查到具体的进程。</p>
</li>
</ul>
<h3 id="udp-冗余传输">UDP 冗余传输</h3>
<p>在外网通信链路不稳定的情况下，有什么办法可以降低 UDP 的丢包率呢？</p>
<p>一个简单的办法来采用<strong>冗余传输</strong>的方式。一般采用较多的是延时双发，双发指的是将原本单发的前后连续的两个包合并成一个大包发送，这样发送的数据量是原来的两倍。这种方式提高丢包率的原理比较简单，例如本例的冗余发包方式，在偶数包全丢的情况下，依然能够还原出完整的数据，也就是在这种情况下，50% 的丢包率，依然能够达到 100% 的数据接收。</p>
<h2 id="udp-真的比-tcp-要高效吗">UDP 真的比 TCP 要高效吗</h2>
<p>相信很多同学都认为 UDP 无连接，无需重传和处理确认，UDP 比较高效。然而 UDP 在大多情况下并不一定比 TCP 高效，TCP 发展至今天，为了适应各种复杂的网络环境，其算法已经非常丰富，协议本身经过了很多优化，如果能够合理配置 TCP 的各种参数选项，那么在多数的网络环境下 TCP 是要比 UDP 更高效的。</p>
<h3 id="影响-udp-高效因素">影响 UDP 高效因素</h3>
<h4 id="无法智能利用空闲带宽导致资源利用率低">无法智能利用空闲带宽导致资源利用率低</h4>
<p>一个简单的事实是 UDP 并不会受到 MTU 的影响，MTU 只会影响下层的 IP 分片，对此 UDP 一无所知。在极端情况下，UDP 每次都是发小包，包是 MTU 的几百分之一，这样就造成 UDP 包的有效数据占比较小(UDP 头的封装成本)；或者，UDP 每次都是发巨大的 UDP 包，包大小 MTU 的几百倍，这样会造成下层 IP 层的大量分片，大量分片的情况下，其中某个分片丢失了，就会导致整个 UDP 包的无效。由于网络情况是动态变化的，UDP 无法根据变化进行调整，发包过大或过小，从而导致带宽利用率低下，有效吞吐量较低。而 TCP 有一套智能算法，当发现数据必须积攒的时候，就说明此时不积攒也不行，TCP 的复杂算法会在延迟和吞吐量之间达到一个很好的平衡。</p>
<h4 id="无法动态调整发包">无法动态调整发包</h4>
<p>由于 UDP 没有确认机制，没有流量控制和拥塞控制，这样在网络出现拥塞或通信两端处理能力不匹配的时候，UDP 并不会进行调整发送速率，从而导致大量丢包。在丢包的时候，不合理的简单重传策略会导致重传风暴，进一步加剧网络的拥塞，从而导致丢包率雪上加霜。更加严重的是，UDP 的无秩序性和自私性，一个疯狂的 UDP 程序可能会导致这个网络的拥塞，挤压其他程序的流量带宽，导致所有业务质量都下降。</p>
<h4 id="改进-udp-的成本较高">改进 UDP 的成本较高</h4>
<p>可能有同学想到针对 UDP 的一些缺点，在用户态做些调整改进，添加上简单的重传和动态发包大小优化。然而，这样的改进并比简单的，UDP 编程可是比 TCP 要难不少的，考虑到改造成本，为什么不直接用 TCP 呢？当然可以拿开源的一些实现来抄一下(例如：libjingle)，或者拥抱一下 Google 的 QUIC 协议，然而，这些都需要不少成本的。</p>
<p>上面说了这么多，难道真的不该用 UDP 了吗？其实也不是的，在某些场景下，我们还是必须 UDP 才行的。那么 UDP 的较为合适的使用场景是哪些呢？</p>
<h2 id="udp-的使用场合">UDP 的使用场合</h2>
<h3 id="通信实时性和持续性">通信实时性和持续性</h3>
<p>在分组交换通信当中，协议栈的成本主要表现在以下两方面：</p>
<ul>
<li>封装带来的空间复杂度</li>
<li>缓存带来的时间复杂度</li>
</ul>
<p>以上两者是对立影响的，如果想减少封装消耗，那么就必须缓存用户数据到一定量在一次性封装发送出去，这样每个协议包的有效载荷将达到最大化，这无疑是节省了带宽空间，带宽利用率较高，但是延时增大了。如果想降低延时，那么就需要将用户数据立马封装发出去，这样显然会造成消耗更多的协议头等消耗，浪费带宽空间。</p>
<p>因此，我们进行协议选择的时候，需要重点考虑一下<strong>空间复杂度</strong>和<strong>时间复杂度</strong>间的平衡。</p>
<p>通信的持续性对两者的影响比较大，根据通信的持续性有两种通信类型：</p>
<ul>
<li>短连接通信</li>
<li>长连接通信</li>
</ul>
<p>对于短连接通信，一方面如果业务只需要发一两个包并且对丢包有一定的容忍度，同时业务自己有简单的轮询或重复机制，那么采用 UDP 会较为好些。在这样的场景下，如果用 TCP，仅仅握手就需要 3 个包，这样显然有点不划算，一个典型的例子是 DNS 查询。另一方面，如果业务实时性要求非常高，并且不能忍受重传，那么首先就是 UDP 了或者只能用 UDP 了，例如 NTP 协议，重传 NTP 消息纯属添乱(为什么呢？重传一个过期的时间包过来，还不如发一个新的 UDP 包同步新的时间过来)。如果 NTP 协议采用 TCP，撇开握手消耗较多数据包交互的问题，由于 TCP 受 Nagel 算法等影响，用户数据会在一定情况下会被内核缓存延后发送出去，这样时间同步就会出现比较大的偏差，协议将不可用。</p>
<h3 id="多点通信">多点通信</h3>
<p>对于一些多点通信的场景，如果采用有连接的 TCP，那么就需要和多个通信节点建立其双向连接，然后有时在 NAT 环境下，两个通信节点建立其直接的 TCP 连接不是一个容易的事情，在涉及 NAT 穿越的时候，UDP 协议的无连接性使得穿透成功率更高(原因详见：由于 UDP 的无连接性，那么其完全可以向一个组播地址发送数据或者轮转地向多个目的地持续发送相同的数据，从而更为容易实现多点通信。)</p>
<p>一个典型的场景是多人实时音视频通信，这种场景下实时性要求比较高，可以容忍一定的丢包率。比如：对于音频，对端连续发送 p1、p2、p3 三个包，另一端收到了 p1 和 p3，在没收到 p2 的保持 p1 的最后一个音（也是为什么有时候网络丢包就会听到嗞嗞嗞嗞嗞嗞…或者卟卟卟卟卟卟卟卟…重音的原因），等到到 p3 就接着播 p3 了，不需要也不能补帧，一补就越来越大的延时。对于这样的场景就比较合适用 UDP 了，如果采用 TCP，那么在出现丢包的时候，就可能会出现比较大的延时。</p>
<h3 id="udp-使用原则">UDP 使用原则</h3>
<p>通常情况下，UDP 的使用范围是较小的，在以下的场景下，使用 UDP 才是明智的：</p>
<ul>
<li>实时性要求很高，并且几乎不能容忍重传。例子：NTP 协议，实时音视频通信，多人动作类游戏中人物动作、位置</li>
<li>TCP 实在不方便实现多点传输的情况</li>
<li>需要进行 NAT 穿越</li>
<li>对网络状态很熟悉，确保 UDP 网络中没有氓流行为，例如疯狂抢带宽</li>
<li>熟悉 UDP 编程</li>
</ul>
<h2 id="参考">参考</h2>
<ul>
<li>[1] <a href="http://blog.csdn.net/dog250/article/details/6896949http://blog.csdn.net/dog250/article/details/6896949" target="_blank" rel="noopener noreffer">Netfilter,iptables/OpenVPN/TCP guard</a></li>
</ul>]]></description>
</item></channel>
</rss>
