<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>TechKoala</title>
        <link>https://www.techkoala.top/</link>
        <description>TechKoala&#39;s自留地，分享一些笔记，包括但不限于Linux、虚拟机、软件、计算机网络等相关内容</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 30 Dec 2019 16:53:54 &#43;0800</lastBuildDate>
            <atom:link href="https://www.techkoala.top/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>NAT系列1：认识NAT</title>
    <link>https://www.techkoala.top/nat/</link>
    <pubDate>Tue, 14 Jul 2020 23:25:54 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://www.techkoala.top/nat/</guid>
    <description><![CDATA[<pre><code>一文概览NAT
</code></pre>
<h2 id="nat">NAT</h2>
<p>NAT（Network Address Translation，网络地址转换）在计算机网络中是一种在IP数据包通过路由器或防火墙时重写来源IP地址或目的IP地址的技术。这种技术被普遍使用在有多台主机但只通过一个公有IP地址访问互联网的私有网络中。</p>
<p>NAT从大类上都可以分为两类：<code>静态NAT</code>和<code>动态NAT</code>。</p>
<p><code>静态NAT</code>是管理员手动创建和维护映射，通常与NAT的入站类型相关联。</p>
<p><code>动态NAT</code>是路由器根据需要自动创建和维护映射，通常与NAT的出站类型相关联。</p>
<p>每个TCP/IP数据包都包含一个<code>源IP地址</code>、<code>源端口</code>、<code>目的IP地址</code>和<code>目的端口</code>。所有类型的NAT都会使用这些值创建NAT映射。</p>
<pre><code>例如，一个IP为`192.168.0.1`的内部客户机使用端口`56876`，经过NAT转变后IP变
为3.3.3.3（翻译后的源IP）和端口56876（源端口）连接到IP 2.2.2.2（目的IP地
址）的80端口（目的端口）。NAT使用原始内部IP和端口、翻译后IP和端口这4个值创建
一个映射。当数据包从网站返回到路由器时，使用与该映射相关值，NAT将数据包转发到
内部客户端。
</code></pre>
<h2 id="nat的四种类型">NAT的四种类型</h2>
<h3 id="全锥型natfull-cone-nat">全锥型NAT（Full Cone NAT)</h3>
<figure><a class="lightgallery" href="/images/Network/NAT/Full_Cone_NAT.png" title="/images/Network/NAT/Full_Cone_NAT.png" data-thumbnail="/images/Network/NAT/Full_Cone_NAT.png" data-sub-html="<h2>全锥型NAT</h2>">
        
    </a><figcaption class="image-caption">全锥型NAT</figcaption>
    </figure>
<p>全锥型NAT是静态NAT，也是唯一一种永久开放端口的NAT，允许从<strong>任何外部主机</strong>进行入站连接。全锥型NAT将一个公共IP地址和端口映射到LAN IP和端口。任何外部主机都可以通过映射的NAT IP和端口向LAN IP发送数据。但是，如果它试图通过不同的端口发送数据，就会失败。这种类型的NAT也被称为端口转发。这是受限制最少的NAT类型，唯一的要求是连接在一个特定的端口（客户端打开的端口）。</p>
<pre><code>例如，我的电脑有一个网站在80端口上运行，我创建了一个一对一的规则，将路由器的
WAN IP 1.1.1.1映射到192.168.0.1，端口80映射到80端口。凡是在80端口向
1.1.1.1发送数据的外部主机都会被NAT转发到192.168.0.1 80端口。
</code></pre>
<p><strong>注意</strong>：端口号不必相同；我可以在56456端口上运行我的网站，但创建NAT映射，将80端口转发到56456端口。这样，外部客户端就会认为我的网站在80端口上，而在任何其他端口上的连接尝试都会被丢弃。</p>
<h3 id="受限锥形natrestricted-cone-nat">受限锥形NAT（Restricted Cone NAT）</h3>
<figure><a class="lightgallery" href="/images/Network/NAT/Restricted_Cone_NAT.png" title="/images/Network/NAT/Restricted_Cone_NAT.png" data-thumbnail="/images/Network/NAT/Restricted_Cone_NAT.png" data-sub-html="<h2>受限锥形NAT</h2>">
        
    </a><figcaption class="image-caption">受限锥形NAT</figcaption>
    </figure>
<p>受限锥体NAT是动态NAT，它的工作方式与全锥型NAT相同，但会对进站的IP地址施加额外的限制。根据限制，唯一的要求是数据包必须从映射的端口进入，并且来自内部客户端已发送数据包的IP地址。<strong>亦即需要内部主机首先发起连接的外部主机，才能被接受入站。</strong></p>
<pre><code>例如，我的电脑与一个网站(56.45.34.78)进行外向连接，源IP为192.168.0.1，源端
口为56723。NAT使用源端口56723创建一个（动态）映射到我的电脑。使用目的端口
56723（这是出站NAT的源端口）到达的源IP为56.45.34.78（网站IP）的数据包将被接
受，接着网站返回数据至我的PC。任何其他IP即使使用正确的56723端口进行连接尝试将
被丢弃。同样，即使正确的IP使用56723以外的目的端口进行的连接尝试也将被丢弃。
</code></pre>
<h3 id="端口受限锥型natport-restricted-cone-nat">端口受限锥型NAT（Port Restricted Cone NAT)</h3>
<figure><a class="lightgallery" href="/images/Network/NAT/Port_Restricted_Cone_NAT.png" title="/images/Network/NAT/Port_Restricted_Cone_NAT.png" data-thumbnail="/images/Network/NAT/Port_Restricted_Cone_NAT.png" data-sub-html="<h2>端口受限锥型NAT</h2>">
        
    </a><figcaption class="image-caption">端口受限锥型NAT</figcaption>
    </figure>
<p>端口受限锥型NAT是动态NAT，它的作用与受限锥形NAT完全相同，但同时对端口进行限制。受限锥形NAT接受来自外部主机任何源端口的连接，而端口受限锥型NAT则进一步要求外部主机的源端口是固定的。</p>
<pre><code>例如，我的电脑在80端口（目标端口）上向网站IP 217.87.69.8建立了一个外向连接。
NAT将我的源IP 192.168.0.1映射到WAN IP 1.1.1.1和源端口56723。当网站发回
数据包时，它的源IP必须是217.87.69.8，目的端口是56723（就像一个受限锥型NAT），
但除此之外，还要求源端口必须是80。如果这三者中的任何一个不一样，端口受限锥型NAT
就会放弃连接。
</code></pre>
<h3 id="对称型natsymmetric-nat">对称型NAT（Symmetric NAT）</h3>
<figure><a class="lightgallery" href="/images/Network/NAT/Symmetric_NAT.png" title="/images/Network/NAT/Symmetric_NAT.png" data-thumbnail="/images/Network/NAT/Symmetric_NAT.png" data-sub-html="<h2>对称型NAT</h2>">
        
    </a><figcaption class="image-caption">对称型NAT</figcaption>
    </figure>
<p>对称型NAT是动态NAT，它限制的方式与端口受限锥型NAT完全相同，但处理NAT转换的方式不同。目前讨论的所有类型的NAT在NAT连接时都<strong>不会改变源端口</strong>。</p>
<pre><code>例如，当客户端使用IP 192.168.0.1和源端口56723访问互联网时，NAT将源IP改变为
56.35.67.35，但保持端口号不变，这被称为端口保留。
</code></pre>
<p>而对称型NAT会将端口改为<strong>随机生成的新端口</strong>，甚至是同一客户端到不同目的地的连接也会发生。<strong>亦即为每个连接创建唯一的映射</strong></p>
<pre><code>例如，在端口受限锥型NAT的例子上进行扩展，我的PC向网站IP 217.87.69.8和
56.76.87.98建立两个出站连接。我的电脑使用源IP 192.168.0.1和源端口56723进行
两个连接。到目前为止，在所有类型的NAT上，这两个连接都会被NAT化，只改变源IP地址
而保持源端口不变。然而这次，对称型NAT没有将源端口保留为56723，而是将其中一个连
接的源端口改为45765，另一个连接的源端口改为53132（随机）。这就为每个连接创建了
唯一的映射，来自这些目的地的流量必须通过各自的端口进入。所以217.87.69.8必须将
数据包发送到目的端口45765，56.76.87.98必须将数据包发送到端口53132，此外还需
要遵循端口受限锥型NAT的要求。
</code></pre>
<h2 id="对nat的正面评价">对NAT的正面评价</h2>
<ol>
<li>
<p>NAT在一定程度上缓解了IPv4地址短缺的问题，让更多的设备（间接）接入了互联网。</p>
</li>
<li>
<p>NAT全双工连接支持的缺少在一些情况下可以看作是一个有好处的特征而不是一个限制。在一定程度上，NAT依赖于本地网络上的一台机器来初始化和路由器另一边的主机的任何连接，它可以阻止外部网络上的主机的恶意活动。这样就可以阻止网络蠕虫病毒来提高本地系统的可靠性，阻挡恶意浏览来提高本地系统的私密性。很多具有NAT功能的防火墙都是使用这种功能来提供核心保护的。另外，它也为UDP的跨局域网的传输提供了方便。</p>
</li>
</ol>
<h2 id="对nat的批评">对NAT的批评</h2>
<ol>
<li>
<p>在一个具有NAT功能的路由器下的主机并没有获得真正的IP地址，并且不能参与一些因特网协议，一些需要初始化从外部网络创建的TCP连接和无状态协议（比如UDP）无法实现。除非NAT路由器管理者预先设置了规则，否则送来的数据包将不能到达正确的目的地址。</p>
</li>
<li>
<p>端对端连接是被IAB委员会（Internet Architecture Board）支持的核心因特网协议之一，因此有些人据此认为NAT是对公用因特网的一个破坏。一些因特网服务提供商（ISP）只向他们的客户提供本地IP地址，所以他们必须通过NAT来访问ISP网络以外的服务，并且这些公司能不能算的上真正的提供了因特网服务的话题也被谈起。</p>
</li>
<li>
<p>NAT使得IP协议从面向无连接变成立面向连接。NAT必须维护专用IP地址与公用IP地址以及端口号的映射关系。在TCP/IP协议体系中，如果一个路由器出现故障，不会影响到TCP协议的执行。因为只要几秒收不到应答，发送进程就会进入超时重传处理。而当存在NAT时，最初设计的TCP/IP协议过程将发生变化，Internet可能变得非常脆弱。</p>
</li>
<li>
<p>NAT违反了基本的网络分层结构模型的设计原则。因为在传统的网络分层结构模型中，第N层是不能修改第N+1层的报头内容的。NAT破坏了这种各层独立的原则。</p>
</li>
<li>
<p>NAT同时存在对高层协议和安全性的影响问题。RFC对NAT存在的问题进行了讨论。NAT的反对者认为这种临时性的缓解IP地址短缺的方案推迟了IPv6迁移的进程，而并没有解决深层次的问题，他们认为是不可取的。</p>
</li>
</ol>
<h2 id="参考">参考</h2>
<ul>
<li>
<p>[1] <a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2" target="_blank" rel="noopener noreffer">网络地址转换</a></p>
</li>
<li>
<p>[2] <a href="https://think-like-a-computer.com/2011/09/19/symmetric-nat/" target="_blank" rel="noopener noreffer">What you need to know about symmetric NAT</a></p>
</li>
<li>
<p>[3] <a href="https://portforward.com/nat-types/" target="_blank" rel="noopener noreffer">NAT Types Defined</a></p>
</li>
</ul>]]></description>
</item><item>
    <title>深入浅出DNS解析</title>
    <link>https://www.techkoala.top/dns_update/</link>
    <pubDate>Thu, 02 Jul 2020 15:48:24 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://www.techkoala.top/dns_update/</guid>
    <description><![CDATA[<pre><code>DNS如何工作？当我们更新网站的DNS记录的时候到底发生了什么？更新后必须等待48小时才能生效吗？
为什么有的人看到的是新IP，有的人看到的是旧IP？
</code></pre>
<h2 id="dns分类">DNS分类</h2>
<p>我们知道，DNS服务器有两种：权威服务器（authoritative）和递归服务器（recursive）</p>
<p><code>权威DNS服务器（也称为名称服务器，NS，nameserver）</code>具有其所负责的每个域的IP地址数据库。</p>
<p>例如，<code>github.com</code>的权威DNS服务器是<code>NS-421.awsdNS-52.com</code></p>
<p>您可以像这样要求它提供<code>github.com</code>的IP:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">dig @NS-421.awsdNS-52.com github.com
</code></pre></td></tr></table>
</div>
</div><p><code>递归DNS服务器</code>，本身并不知道谁拥有什么IP地址。它们通过询问正确的权威DNS服务器，找出域名的IP地址，然后缓存这个IP地址，以备再次询问。8.8.8.8是一个递归DNS服务器。</p>
<p>当人们访问你的网站时，他们可能会向递归DNS服务器进行DNS查询。那么，递归DNS服务器是如何工作的呢?</p>
<h3 id="递归dns服务器如何工作">递归DNS服务器如何工作</h3>
<p>以<code>8.8.8.8</code>为例，如果我们向其请求<code>github.com</code>的IP地址（A记录），如果它存在缓存，那么就直接返回缓存结果。然而，缓存是有期限的，如果所有缓存都过期了呢？那么情况是这样的：</p>
<ol>
<li>
<p>递归服务器内部硬编码（hardcoded）有根DNS服务器<code>.</code>的IP地址（参见[2][3]），选择一个根DNS服务器，例如<code>198.41.0.4</code></p>
</li>
<li>
<p>询问根DNS服务器有关<code>com.</code>的NS</p>
<p>此步可以使用如下方法模拟：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ dig @198.41.0.4 github.com

...
com.			172800	IN	NS	a.gtld-servers.net.
...
a.gtld-servers.net.	172800	IN	A	192.5.6.30
...
</code></pre></td></tr></table>
</div>
</div><p>可以看到，这里我们得到一个<code>com.</code>的权威NS<code>a.gtld-servers.net.</code>及其IP地址<code>192.5.6.30</code></p>
<p><strong>注</strong>：实际上，99.99%的情况下，此步我们就将得到<code>github.com</code>的A记录，但为了展示DNS解析进程，我们假设这里没有得到。</p>
</li>
<li>
<p>询问该权威NS有关<code>github.com</code>的NS</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ dig @192.5.6.30 github.com

...
github.com.		172800	IN	NS	NS-421.awsdNS-52.com.
NS-421.awsdNS-52.com.	172800	IN	A	205.251.193.165
... 
</code></pre></td></tr></table>
</div>
</div><p>这里，我们得到的<code>github.com.</code>NS<code>NS-421.awsdNS-52.com.</code>及其IP地址<code>205.251.193.165</code></p>
</li>
<li>
<p>询问该NS有关<code>github.com</code>的A记录</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ dig @205.251.193.165 github.com

github.com.		60	IN	A	140.82.112.4
</code></pre></td></tr></table>
</div>
</div><p>至此，在假设没有缓存的情况下，我们通过完整的流程（实际上绝大多数情况不需要完整进行）获得了<code>github.com</code>的IP地址。</p>
</li>
</ol>
<p>此外，使用<code>$ dig @8.8.8.8 +trace github.com</code>可以一次性显示上述所有步骤。</p>
<h2 id="更新dns记录">更新DNS记录</h2>
<p>更新DNS记录时，有两种情况：</p>
<ol>
<li>
<p>保持相同的NS</p>
</li>
<li>
<p>变更NS</p>
</li>
</ol>
<h3 id="首先谈谈生存时间ttlstime-to-live">首先谈谈生存时间（TTLs，time to live）</h3>
<p>上面已经说到，DNS服务器一般存有缓存，而控制缓存是否过期的参数就是TTL。</p>
<p>我们假设得到一个查询结果：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ dig @205.251.193.165 github.com

github.com.		60	IN	A	140.82.112.4
</code></pre></td></tr></table>
</div>
</div><p>这里的60（秒）即表示TTL，这是一个很短的TTL。理论上，如果每个用户都遵循DNS标准，那么<code>github.com</code>在更改了IP地址后，每个用户都应该在60秒内得到这个新的地址。但实际上呢？</p>
<h3 id="更新同一ns上的dns记录">更新同一NS上的DNS记录</h3>
<p>假设我们已经在域名商处更新了新的DNS记录<code>test.jvNS.ca</code>&ndash;&gt;<code>1.2.3.4</code>，试着查询：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ dig @8.8.8.8 test.jvNS.ca

test.jvNS.ca.		299	IN	A	1.2.3.4
</code></pre></td></tr></table>
</div>
</div><p>如果此前没有设置过DNS记录，因为没有缓存，所以立刻生效了。这里可以看到TTL是299。那么，修改IP为<code>5.6.7.8</code>呢。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ dig @8.8.8.8 test.jvNS.ca

test.jvNS.ca.		144	IN	A	1.2.3.4
</code></pre></td></tr></table>
</div>
</div><p>可以看到，IP并没有发生改变且TTL表示缓存还将存在144秒。而且，多次查询，你可能会发现，有时候可以得到新的IP，但有的时候又是旧的IP。</p>
<p>这里是因为像<code>8.8.8.8</code>这样的DNS服务器采用了负载均衡，每次查询可能被分配到不同的后端服务器，而他们的缓存不尽相同。</p>
<p>等待5分钟后，所有的缓存都更新了，再次查询，将会始终返回新IP。</p>
<h3 id="ttl并非总是可靠">TTL并非总是可靠</h3>
<p>与大多数互联网协议一样，并不是所有的终端都服从DNS规范（包括<code>8.8.8.8</code>这样的大型DNS也不尊重TTL）。一些ISP的DNS服务器会将缓存记录的时间比TTL规定的时间长，比如可能是2天而不是5分钟。而且人们总是可以在他们的/etc/hosts中硬编码旧的IP地址。</p>
<p>此外，应用程序（例如浏览器）都内置了自己的DNS缓存，或者本地网关也存在缓存。</p>
<p>这也是为什么，即便正确地设置了对应的TTL（大部分DNS将会在短时间内更新缓存），有些DNS服务器仍然需要更长时间生效，这也导致我们的查询也并不总是会得到新的IP地址。</p>
<h3 id="连同ns一起更新">连同NS一起更新</h3>
<p>假设此前的NS为<code>dNS1.p01.NSone.net</code>，现在我们把他修改为谷歌的NS<code>NS-cloud-b1.googledomaiNS.com</code>。</p>
<p>通常，当你修改完成后，你的域名商会提示你：“修改将在48小时内生效”。</p>
<p>然后设置一个新的A记录指向<code>1.2.3.4</code></p>
<p>dig看看：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ dig @8.8.8.8 examplecat.com

examplecat.com.		17	IN	A	104.248.50.87
</code></pre></td></tr></table>
</div>
</div><p><code>8.8.8.8</code>没有变化，询问别的DNS：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ dig @1.1.1.1 examplecat.com

examplecat.com.		299	IN	A	1.2.3.4
</code></pre></td></tr></table>
</div>
</div><p><code>1.1.1.1</code>更新了。</p>
<p>造成这样不同结果的原因，可能是此前并没有人询问过<code>1.1.1.1</code>，所以他没有缓存，能立刻得到新的IP。</p>
<p>而如果我们向新的NS查询，肯定会得到新的IP记录：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ dig @NS-cloud-b1.googledomaiNS.com examplecat.com

examplecat.com.		300	IN	A	1.2.3.4
</code></pre></td></tr></table>
</div>
</div><h3 id="ns的ttl要长很多">NS的TTL要长很多</h3>
<p>域名商提示：“修改将在48小时内生效”的原因是NS记录（告诉递归NS应该向哪个NS查询）的TTL要长的多。</p>
<p>回到上一节中，我们的查询结果显示：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ dig @192.5.6.30 github.com

...
github.com.		172800	IN	NS	NS-421.awsdNS-52.com.
NS-421.awsdNS-52.com.	172800	IN	A	205.251.193.165
...
</code></pre></td></tr></table>
</div>
</div><p>172800秒是48小时！这就是为什么更改NS后需要更长的时间来生效。</p>
<h3 id="ns如何得到更新">NS如何得到更新？</h3>
<p>更新NS后，我们向根服务器查询的话就会到得到这样的结果：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ dig NS @j.gtld-servers.net examplecat.com

examplecat.com.		172800	IN	NS	NS-cloud-b1.googledomaiNS.com
</code></pre></td></tr></table>
</div>
</div><p>你可能会疑惑，新的NS记录是如何在根服务器处更新的呢？是因为当你在域名商那里更改你域名的NS后，他们会负责将这个给更改告知根服务器。</p>
<p>通常这个更新将在几分钟内就生效，但是对于其他一些顶级域名（TLD）（非.com）可能速度稍微慢一些。</p>
<h2 id="总结">总结</h2>
<p>本文展示了DNS的解析过程以及我们更新DNS记录时发送了什么，希望有助于你理解这一过程。</p>
<h2 id="说明">说明</h2>
<p><strong>注</strong>：本文属于<code>Translation</code>系列文章，本系列文章<strong>主要内容</strong>来源于博主对优秀外文文章地翻译和校对，这里并不一定遵循原文的叙述逻辑，内容上也会有一定的增删，原文请见参考。</p>
<p>译文的目的一方面是加深自己学习的印象，另外一方面是希望能够共享优质的内容。</p>
<h2 id="参考">参考</h2>
<ul>
<li>
<p>[1] <a href="https://jvNS.ca/blog/how-updating-dNS-works/" target="_blank" rel="noopener noreffer">What happeNS when you update your DNS?</a></p>
</li>
<li>
<p>[2] <a href="https://github.com/NLnetLabs/unbound/blob/6e0756e819779d9cc2a14741b501cadffe446c93/iterator/iter_hints.c#L131" target="_blank" rel="noopener noreffer">unbound’s source code</a></p>
</li>
<li>
<p>[3] <a href="https://github.com/NLnetLabs/unbound/blob/6e0756e819779d9cc2a14741b501cadffe446c93/iterator/iter_hints.c#L131" target="_blank" rel="noopener noreffer">iana root files</a></p>
</li>
</ul>]]></description>
</item><item>
    <title>Nagle算法</title>
    <link>https://www.techkoala.top/turn_off_nagle/</link>
    <pubDate>Sun, 28 Jun 2020 10:44:16 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://www.techkoala.top/turn_off_nagle/</guid>
    <description><![CDATA[<pre><code>简要介绍Nagle算法
</code></pre>
<h2 id="nagle算法">Nagle算法</h2>
<p>Nagle算法通过减少网络发包频率从而提高TCP/IP网络的效率。</p>
<p>主要解决由于TCP包头大小，导致频繁发送小数据包有效数据内容太少，开销过大段的问题。</p>
<p>Nagle算法是将大量等待发送的小数据包合并起来，然后一次性全部发送出去。具体地说，只要有一个发送方没有收到任何确认的数据包，发送方就应该一直缓冲它的输出，直到它有一个完整的数据包的输出，这样就允许一次发送所有的输出。</p>
<p>其思路可以由下面的步骤所描述：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">if there is new data to send then
    if the window size ≥ MSS and available data is ≥ MSS then
        send complete MSS segment now
    else
        if there is unconfirmed data still in the pipe then
            enqueue data in the buffer until an acknowledge is received
        else
            send data immediately
        end if
    end if
end if
</code></pre></td></tr></table>
</div>
</div><p>Nagle算法可能导致期望实时响应和低延迟的应用程序体验不佳。</p>
<p>诸如网络多人视频游戏或鼠标在远程控制的操作系统中移动等应用程序，期望立即发送操作，而算法故意延迟传输，以牺牲延迟为代价提高带宽效率。因此，具有低带宽时间敏感传输的应用程序通常用于绕过 Nagle 延迟的 ACK 延迟。</p>
<h2 id="windows下关闭nagle算法">Windows下关闭Nagle算法</h2>
<ol>
<li>
<p>打开注册表编辑器</p>
</li>
<li>
<p>打开如下路径<code>计算机\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Interfaces</code></p>
<a class="lightgallery" href="/images/Network/regedit.png" title="/images/Network/regedit.png" data-thumbnail="/images/Network/regedit.png">
        
    </a>
</li>
<li>
<p>依次点击下方注册表项，检查右窗格中是否包含<code>DhcpIPAddress</code>值；</p>
</li>
<li>
<p>在包含有<code>DhcpIPAddress</code>的子项下，分别建立两个<code>DWORD(32)</code>值，依次命名为<code>TcpAckFrequency</code>和<code>TCPNoDelay</code>，键值全部设为<code>1</code>。</p>
<p><strong><code>注意</code></strong> 包含<code>DhcpIPAddress</code>的子项可能不只一个，所有的都要添加。</p>
</li>
</ol>
<h2 id="参考">参考</h2>
<ul>
<li>
<p>[1] <a href="https://en.wikipedia.org/wiki/Nagle%27s_algorithm" target="_blank" rel="noopener noreffer">Nagel算法维基百科</a></p>
</li>
<li>
<p>[2] <a href="https://www.ietf.org/rfc/rfc896.txt" target="_blank" rel="noopener noreffer">RFC896</a></p>
</li>
</ul>]]></description>
</item><item>
    <title>Linux安全分析与加固</title>
    <link>https://www.techkoala.top/linux_security/</link>
    <pubDate>Sun, 07 Jun 2020 23:22:43 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://www.techkoala.top/linux_security/</guid>
    <description><![CDATA[<a class="lightgallery" href="/images/Linux/linux.png" title="/images/Linux/linux.png" data-thumbnail="/images/Linux/linux.png">
        
    </a>
<pre><code>记录一些常见的Linux服务器安全问题分析以及防护措施
</code></pre>
<h2 id="日志分析">日志分析</h2>
<h3 id="常用日志文件">常用日志文件</h3>
<p><strong>Debian</strong>以及<strong>RHEL</strong>系的系统日志是由一个名为syslog的服务管理的，如以下日志文件都是由syslog日志服务驱动的：</p>
<p><code>/var/log/boot.log</code>：记录了系统在引导过程中发生的事件，就是Linux系统开机自检过程显示的信息</p>
<p><code>/var/log/lastlog</code> ：记录最后一次用户成功登陆的时间、登陆IP等信息</p>
<p><code>/var/log/messages</code> ：记录Linux操作系统常见的系统和服务错误信息</p>
<p><code>/var/log/secure</code> ：Linux系统安全日志，记录用户和工作组变坏情况、用户登陆认证情况</p>
<p><code>/var/log/syslog</code>：只记录警告信息，常常是系统出问题的信息，使用lastlog查看</p>
<p><code>/var/log/wtmp</code>：该日志文件永久记录每个用户登录、注销及系统的启动、停机的事件，使用last命令查看</p>
<p><code>/var/run/utmp</code>：该日志文件记录有关当前登录的每个用户的信息。如 who、w、users、finger等就需要访问这个文件</p>
<p><strong><code>/var/log/btmp</code>：记录Linux登陆失败的用户、时间以及远程IP地址</strong></p>
<p><strong><code>/var/log/auth.log</code>或<code>/var/log/secure</code>存储来自可插拔认证模块(PAM)的日志，包括成功的登录，失败的登录尝试和认证方式。</strong></p>
<pre><code>注：**Debian**系在/var/log/auth.log 中存储认证信息而**RHEL**系则在/var/log/secure 中存储。
</code></pre>
<p><strong>Archlinux</strong>使用<code>systemd</code>提供的日志系统（logging system），称为<code>journal</code>。使用 systemd 日志，无需额外安装日志服务（syslog）。</p>
<h3 id="相关日志查看命令">相关日志查看命令</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ cat /var/log/secure <span class="p">|</span> awk <span class="s1">&#39;/Failed/{print $(NF-3)}&#39;</span> <span class="p">|</span> sort <span class="p">|</span> uniq -c <span class="p">|</span> awk <span class="s1">&#39;{print $2&#34; = &#34;$1;}&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>查看尝试暴力登录root的IP及次数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ grep <span class="s2">&#34;Failed password for root&#34;</span> /var/log/auth.log <span class="p">|</span> awk <span class="s1">&#39;{print $11}&#39;</span> <span class="p">|</span> sort <span class="p">|</span> uniq -c <span class="p">|</span> sort -nr <span class="p">|</span> more
</code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="常见防护措施">常见防护措施</h2>
<h3 id="ssh">SSH</h3>
<h4 id="编辑ssh配置文件">编辑SSH配置文件</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ vim /etc/ssh/sshd_config
</code></pre></td></tr></table>
</div>
</div><p><strong>1、修改端口</strong></p>
<p><code>#Port 22 —&gt; Port xxxx</code></p>
<p><strong>2、关闭root登录</strong></p>
<p><code>PermitRootLogin yes -&gt; PermitRootLogin no</code></p>
<p><strong>3、使用证书登录</strong></p>
<ul>
<li>
<p><strong>若不存在证书首先执行下面步骤：</strong></p>
<p>在客户端生成密钥:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ ssh-keygen -t rsa
</code></pre></td></tr></table>
</div>
</div><p>把公钥拷贝至服务器:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ ssh-copy-id -i .ssh/id_rsa.pub server
</code></pre></td></tr></table>
</div>
</div><p>或手动将id_rsa.pub拷贝至服务器用户目录的.ssh中，并修改访问权限：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ scp .shh/id_rsa.pub server:~/.ssh
</code></pre></td></tr></table>
</div>
</div><p>服务器中：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ chmod <span class="m">400</span> authorized_keys
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>打开证书登录：</p>
<p><code>RSAAuthentication yes</code></p>
<p>开启公钥验证：</p>
<p><code>PubkeyAuthentication yes</code></p>
<p>验证文件路径：</p>
<p><code>AuthorizedKeysFile    .ssh/authorized_keys</code></p>
<p>禁止密码认证：</p>
<p><code>PasswordAuthentication no</code></p>
<p>禁止空密码：</p>
<p><code>PermitEmptyPasswords no</code></p>
<p><strong>最后，重启SSHD服务</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ systemctl restart sshd
</code></pre></td></tr></table>
</div>
</div><h3 id="用户以及用户组管理">用户以及用户组管理</h3>
<h4 id="无用用户用户组">无用用户、用户组</h4>
<p><strong>Linux系统中可以删除的默认用户和组大致有如下这些：</strong></p>
<p>可删除的用户，如<code>adm,lp,sync,shutdown,halt,news,uucp,operator,games,gopher</code>等。</p>
<p>可删除的组，如<code>adm,lp,news,uucp,games,dip,pppusers,popusers,slipusers</code>等。</p>
<h4 id="空口令账户">空口令账户</h4>
<p>使用如下命令检测空口令账户：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ awk -F: <span class="s1">&#39;$2==&#34;!!&#34; {print $1}&#39;</span> /etc/shadow
</code></pre></td></tr></table>
</div>
</div><p>然后查看<code>/etc/passwd</code>确认空口令用户是否可以登录，选择是否加固密码。</p>
<h4 id="登录失败后强制延时">登录失败后强制延时</h4>
<p>在<code>/etc/pam.d/system-login</code>中添加<code>auth optional pam_faildelay.so delay=4000000</code>，表示延时4秒（单位微秒）</p>
<h4 id="限制root权限">限制root权限</h4>
<p>可以为单个用户启用单个程序的 root 权限，而不用为了运行一个程序启用该用户对 root 的完整访问权。例如，要授予用户 alice 对特定程序的访问权限：</p>
<p>编辑<code>/etc/sudoers</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ visudo
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>若要指定visudo的默认编辑器，最好是修改<code>/etc/sudoers</code>中的<code>Defaults editor=xxxx</code></p>
<p>而不是使用</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ <span class="nv">EDITOR</span><span class="o">=</span>nano visudo
</code></pre></td></tr></table>
</div>
</div><p>因为任何程序都可以通过该命令指定作为编辑器，存在风险。</p>
</li>
</ul>
<p>添加：</p>
<p><code>alice ALL = NOPASSWD: /path/to/program</code></p>
<h3 id="关闭不必要的服务">关闭不必要的服务</h3>
<p><strong>例如：</strong> 某台Linux服务器用于www应用，那么除了httpd服务和系统运行是必须的服务外，其他服务都可以关闭。下面这些服务一般情况下是不需要的，可以选择关闭：</p>
<p><code>anacron、auditd、autofs、avahi-daemon、avahi-dnsconfd、bluetooth、cpuspeed、firstboot、gpm、haldaemon、hidd、ip6tables、ipsec、isdn、lpd、mcstrans、messagebus、netfs、nfs、nfslock、nscd、pcscd portmap、readahead_early、restorecond、rpcgssd、rpcidmapd、rstatd、sendmail、setroubleshoot、yppasswdd ypserv</code></p>
<h3 id="文件系统安全">文件系统安全</h3>
<p><strong>文件权限检查和修改</strong></p>
<p><strong>（1）查找系统中任何用户都有写权限的文件或目录</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">查找文件：$ find / -type f -perm -2 -o -perm -20 <span class="p">|</span>xargs ls -al
查找目录：$ find / -type d -perm -2 -o -perm -20 <span class="p">|</span>xargs ls –ld
</code></pre></td></tr></table>
</div>
</div><p><strong>（2）查找系统中所有含“s”位的程序</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">find / -type f -perm -4000 -o -perm -2000 -print <span class="p">|</span> xargs ls –al
</code></pre></td></tr></table>
</div>
</div><p>含有“s”位权限的程序对系统安全威胁很大，通过查找系统中所有具有“s”位权限的程序，可以把某些不必要的“s”位程序去掉，这样可以防止用户滥用权限或提升权限的可能性。</p>
<p><strong>（3）检查系统中所有suid及sgid文件</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ find / -user root -perm -2000 -print -exec md5sum <span class="o">{}</span> <span class="p">;</span>
$ find / -user root -perm -4000 -print -exec md5sum <span class="o">{}</span> <span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>将检查的结果保存到文件中，可在以后的系统检查中作为参考。</p>
<p><strong>（4）检查系统中没有属主的文件</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ find / -nouser -o –nogroup
</code></pre></td></tr></table>
</div>
</div><p>没有属主的孤儿文件比较危险，因此找到这些文件后，要么删除掉，要么修改文件的属主，使其处于安全状态。</p>
<h2 id="检测工具">检测工具</h2>
<h2 id="参考">参考</h2>
<ul>
<li>
<p>[1] Linux服务器为什么被黑？</p>
</li>
<li>
<p>[2] <a href="https://www.cnblogs.com/doublexi/p/9636506.html" target="_blank" rel="noopener noreffer">linux系统安全加固&ndash;账号相关</a></p>
</li>
<li>
<p>[3] <a href="https://wiki.archlinux.org/index.php/Security" target="_blank" rel="noopener noreffer">Security - Archlinux Wiki</a></p>
</li>
</ul>]]></description>
</item><item>
    <title>Huginn（Docker）数据备份与恢复</title>
    <link>https://www.techkoala.top/huginn_backup/</link>
    <pubDate>Wed, 27 May 2020 23:06:20 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://www.techkoala.top/huginn_backup/</guid>
    <description><![CDATA[<a class="lightgallery" href="/images/Huginn/Huginn.png" title="/images/Huginn/Huginn.png" data-thumbnail="/images/Huginn/Huginn.png">
        
    </a>
<pre><code>简单介绍使用Docker运行的Huginn数据的备份与恢复
</code></pre>
<h3 id="备份数据">备份数据</h3>
<p>使用命令在容器中生成备份：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ docker <span class="nb">exec</span> -it huginn mysqldump --single-transaction --opt -u root -ppassword huginn_production &gt; huginn_backupfile.sql
</code></pre></td></tr></table>
</div>
</div><p>或直接拷贝数据到容器外：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ docker <span class="nb">exec</span> -it  huginn mysqldump -u root -ppassword huginn_production &gt; /root/test_db.sql
</code></pre></td></tr></table>
</div>
</div><h3 id="恢复数据">恢复数据</h3>
<p>首先复制文件到daocker中：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ docker cp /home/xxxx/huginn_backupfile.sql huginn: /app/xxxxx/huginn_backupfile.sql
</code></pre></td></tr></table>
</div>
</div><p>然后进入docker：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ docker <span class="nb">exec</span> -ti huginn bash
</code></pre></td></tr></table>
</div>
</div><p>接下来恢复数据库:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ mysql -u root -ppassword huginn_production &lt; huginn_backupfile.sql
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>PVE安装Q&amp;A</title>
    <link>https://www.techkoala.top/pve_q_a/</link>
    <pubDate>Tue, 19 May 2020 15:31:34 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://www.techkoala.top/pve_q_a/</guid>
    <description><![CDATA[<pre><code>PVE安装过程中遇到的问题以及解决方法
</code></pre>
<h1 id="pve安装-qa">PVE安装 Q&amp;A</h1>
<p>近期将家里的服务器从Hyper-V迁移到PVE上。</p>
<p>目前安装有黑群晖、Openwrt、Ubuntu 18.09LTS</p>
<p>目前的网络拓扑图如下：</p>
<figure><a class="lightgallery" href="/images/PVE/%e6%8b%93%e6%89%91.png" title="/images/PVE/拓扑.png" data-thumbnail="/images/PVE/拓扑.png" data-sub-html="<h2>网络拓扑图</h2>">
        
    </a><figcaption class="image-caption">网络拓扑图</figcaption>
    </figure>
<p>将安装过程中遇到的问题以及解决方法整理如下：</p>
<h3 id="1-temporary-failure-in-name-resolution">1. Temporary failure in name resolution：</h3>
<p>由于开始使用路由器拨号，因此初次安装设置的DNS服务器为路由器地址，安装软路由后更改了地址，所以导致DNS服务器设置错误192.168.1.190&gt;192.168.1.1</p>
<h3 id="2-群晖挂载硬盘">2. 群晖挂载硬盘：</h3>
<p>PVE正确识别到了NTFS的一硬盘，但是群晖不能自动挂载。需要关机后，在PVE虚拟机管理界面，添加，然后重启才能识别。(否则显示为红色，同样的，移除硬件需要同样的操作)</p>
<h3 id="3-pve节点监视图不显示时间为1970-1-1">3. PVE节点监视图不显示，时间为1970-1-1：</h3>
<p>删除界面缓存文件即可：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Shell" data-lang="Shell">rm /var/lib/rrdcached/db/pve2-node
</code></pre></td></tr></table>
</div>
</div><h3 id="4-群晖socks代理">4. 群晖socks代理</h3>
<p>Openwrt安装luci-app-Privoxy，设置转发规则：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Shell" data-lang="Shell">/ ip:port .
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>Hugo搭配LoveIt使用问题</title>
    <link>https://www.techkoala.top/hugo_loveit_q_a/</link>
    <pubDate>Tue, 12 May 2020 21:54:02 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://www.techkoala.top/hugo_loveit_q_a/</guid>
    <description><![CDATA[<pre><code>使用hugo以及LoveIt搭建本博客遇到的问题以及解决方案
</code></pre>
<h3 id="1虚拟机中hugo-server无法远程访问">1.虚拟机中Hugo server无法远程访问</h3>
<p>hugo server默认只会bind localhost</p>
<p>使用：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ Hugo server --bind xxx.xxx.xxx.xxx
</code></pre></td></tr></table>
</div>
</div><p>指定虚拟机IP，即可通过同网域机器访问该web服务</p>
<h3 id="2使用git信息生成文章上一次修改时间">2.使用git信息生成文章上一次修改时间</h3>
<p>首先，启用git信息：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">enableGitInfo = true
</code></pre></td></tr></table>
</div>
</div><p>然后，启用gitRepo参数：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">gitRepo = &#34;/xxx/xxxx/.git/&#34;
</code></pre></td></tr></table>
</div>
</div><p>需要注意的是：</p>
<ul>
<li>
<p>这里.git应该init在hugo生成的项目根目录中</p>
</li>
<li>
<p>但是这样，如果只push public文件夹到Github上部署的话，网页上无法正确跳转对应的commit详情页。</p>
</li>
</ul>
<h3 id="3页面出现extra-stringxxxx">3.页面出现%!(EXTRA string=xxxx)</h3>
<p>LoveIt Github Issue提到该问题的<a href="https://github.com/dillonzq/LoveIt/issues/197" title="%!(EXTRA string=Text) in some text" target="_blank" rel="noopener noreffer">解决方案</a></p>
<p>但实际通过修改config.toml中的<code>defaultContentLanguage = &quot;zh&quot;</code>为<code>defaultContentLanguage = &quot;zh-cn&quot;</code>即可解决。</p>]]></description>
</item><item>
    <title>改变世界的条形码</title>
    <link>https://www.techkoala.top/brief_history_of_qrcode/</link>
    <pubDate>Tue, 12 May 2020 17:59:52 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://www.techkoala.top/brief_history_of_qrcode/</guid>
    <description><![CDATA[<pre><code>条形码以及二维码的过去与将来
</code></pre>
<p>注：本文是最早以TechKoala的名字所写的文章，发布于电脑爱好者2013年第06期。
说来当时以邮汇方式发的稿费至今没有收到，2333</p>
<p>  面对我们随时可以看见的条形码，说出来你也许会不信，如果没有这个家伙，整个世界的经济都无法正常运行。这些黑白条码不但能让机场不弄丢你的行李，能对快件的包裹进行跟踪，而且还能在网上对各种信件进行查询。它们既可以用在食品包装上，也可以用在图书的扉页。这个时候看看手上的《电脑爱好者》杂志，你发现了吗？</p>
<h3 id="条形码的由来">条形码的由来</h3>
<p>  三十多年前的一天，一位名叫道森的购物者走进马什超市，购买了一包箭牌口香糖，扫扫条形码然后付钱。这在今天稀疏平常的事，当时却是标志性事件—由此，条形码迎来了它的里程碑，从此走到你我的眼前。</p>
<figure><a class="lightgallery" href="/images/Brief_history_of_QRCode/wood.jpg" title="/images/Brief_history_of_QRCode/wood.jpg" data-thumbnail="/images/Brief_history_of_QRCode/wood.jpg" data-sub-html="<h2>伍德蓝德</h2>">
        
    </a><figcaption class="image-caption">伍德蓝德</figcaption>
    </figure>
<p>  说到条形码，就不得不说它的发明者——伍德蓝德。他出生于新泽西州，从小便对技术发明具有浓厚的兴趣，具备非凡的动手能力。他生长在二战前后，战争期间，他不得不中断学业，参与研发原子弹的曼哈顿工程，这个看似八竿子打不着边的事，却使他对发明愈发迷恋。二战之后，美国经济快速发展，规模宏大的超市面临着一个巨大的问题，他们无法精确掌握库存情况，唯一的办法是手工清理，但耗时又费力。于是他们向德雷赛尔大学求助，恰巧伍德蓝德得知，于是，伍德蓝德开始与自己的朋友苏沃一起研究这个解决方案。蓝德本来是出于商业目的，但随着研究的深入，这项工作彻底改变了他的人生。类似历史上的诸多发明，开始时，蓝德遇到了许多次失败，但他没有放弃。他毅然辍学全心投入，坚信成功不远，但总差那么一层窗户纸。后来，他去了迈阿密的住所放松，那里有优美的居住环境、安静的思考空间，他期待能有灵感迸发。</p>
<p>  老天不负有心人。有一天，他在沙滩坐定，苦苦思索：“如何才能给每件物品分类呢？编号？对！莫尔斯电码？可是这样太复杂了，一般人也没办法分辨。”想到此，他开始无聊地在沙滩上用手画沙子，一条一条，突然，一个神奇的图案出现在蓝德脑海—如果用粗细、间距不同的竖线构成图案，那就可以实现对商品编码。就这样，条码的原型在沙滩上诞生了。待到出现文章开头的一幕时，已经过去了三十多年，可喜的是，我们的主人公是一位有耐心的人。</p>
<h3 id="条形码的标准与应用">条形码的标准与应用</h3>
<p>  与现在的条形码不同，蓝德发明的第一条条形码不是由线条构成，而是一组同心圆，通过照片扫描器读取。它形如箭靶，美国人称其为“公牛眼”。遗憾的是，以美国当时的工艺和经济水平，他们还没有能力印制出这种编码。</p>
<figure><a class="lightgallery" href="/images/Brief_history_of_QRCode/first_code.png" title="/images/Brief_history_of_QRCode/first_code.png" data-thumbnail="/images/Brief_history_of_QRCode/first_code.png" data-sub-html="<h2>公牛眼</h2>">
        
    </a><figcaption class="image-caption">公牛眼</figcaption>
    </figure>
<p>  后来，伍德蓝德加入了IBM公司，并把自己的专利卖给了IBM。然而，伟大的成果却并非属于IBM，几经转手，机遇来到了RCA公司。直到条形码大展宏图时，IBM公司里的人才知道：“哦，原来发明条形码的人就在我们公司。”</p>
<p>  我们目前所知的第一个商用条形码出现于1966年，但人们很快就意识到应该为其制定出一个行业标准。</p>
<p>  两年后的夏天，应国家食物连锁协会要求，Logicon公司开发出了食品工业统一码（UGPIC）。随后，美国统一编码协会建立了UPC码系统，并且实现了该码制的标准化。UPC码首先在杂货零售业中试用，俄亥俄州的Marsh超级市场安装了由NCR（IBM公司的前身）制造的第一台UPC扫描器，而第一个被收银员扫描的便是文章开头所说的标价69美分的十片装箭牌口香糖。</p>
<p>  直到现在，我们都不可否认的是，正是零售业的成功应用才促进了条形码技术的发展。</p>
<p>  目前，全球每天大约要扫描80亿次条形码。而普华永道公司的一项研究报告表明，条形码每年仅在超市和大众零售领域就能为客户、零售商和制造商节约300亿美元的成本。令人感到遗憾的是，伍德兰德的朋友，条形码联合发明人苏沃并没有亲眼看到条形码的商业化应用，他在自己38岁的时候（1962年）英年早逝。而伍德蓝德则在1992年被当时的美国总统布什授予了国家科技奖章。</p>
<p>  令人遗憾的是，前不久，伍德蓝也不幸地告别了人世。据《纽约时代》报道，他于美国当地时间2012年12月9日在自己新泽西的家中逝世，享年91岁。蓝德的女儿苏珊评价父亲说：“他参与了整个系统的设计，从使用者的站立方式、激光扫描仪高度到如何保护人们的眼睛不受激光刺激，他是一个绝对的完美主义者。”</p>
<h3 id="条形码的未来">条形码的未来</h3>
<p>  今天，条形码已经占据我们生活的每个角落，从超市购买的食品到手中握住的杂志，我们依靠条形码管理我们的生活，条形码技术也在不断进步。</p>
<p>  其实，如今风生水起的二维码也属于条形码，作为后起之秀，它比它的前辈更进一步。自从它出现以来，得到了人们的广泛关注，发展十分迅速。</p>
<p>  二维条形码最早发明于日本，它是用某种特定的几何图形按一定规律在平面（二维方向上）分布的黑白相间的图形记录数据符号信息的，在代码编制上巧妙地利用构成计算机内部逻辑基础的“0”、“1”比特流的概念，使用若干个与二进制相对应的几何形体来表示文字数值信息，通过图像输入设备或光电扫描设备自动识读以实现信息自动处理。它具有条形码技术的一些共性：每种码制有其特定的字符集；每个字符占有一定的宽度；具有一定的校验功能等。同时还具有对不同行的信息自动识别功能、处理图形旋转变化等特点。</p>
<p>  一维条形码虽然提高了资料收集与资料处理的速度，但由于受到资料容量的限制，一维条形码仅能标识商品，而不能描述商品，因此相当依赖电脑网络和资料库。在没有资料库或不便连网的地方，一维条形码很难派上用场。此外一维条形码有一个明显的缺点，即垂直方向不携带资料，故资料密度偏低。当初这样设计有二个目的：（1）为了保证局部损坏的条形码仍可正确辨识；（2）使扫描容易完成。</p>
<p>  要提高资料密度，又要在一个固定面积上印出所需资料，可用二种方法来解决：（1）在一维条形码的基础上向二维条形码方向扩展；（2）利用图像识别原理，采用新的几何形体和结构设计出二维条形码。前者发展出堆叠式（Stacked）二维条形码，后者则有矩阵式（Matrix）二维条形码之发展，构成现今二维条形码的两大类型：</p>
<p><code>堆叠式二维条形码的编码原理是建立在一维条形码的基础上，将一维条形码的高度变窄，再依需要堆成多行，其在编码设计、检查原理、识读方式等方面都继承了一维条形码的特点，但由于行数增加，对行的辨别、解码算法及软件则与一维条形码有所不同。较具代表性的堆叠式二维条形码有PDF417、Code16K、Supercode、Code49等。</code></p>
<p><code>矩阵式二维条形码是以矩阵的形式组成，在矩阵相应元素位置上，用点的出现表示二进制的“1”，不出现表示二进制的“0”，点的排列组合确定了矩阵码所代表的意义。其中点可以是方点、圆点或其他形状的点。矩阵码是建立在电脑图像处理技术、组合编码原理等基础上的图形符号自动辨识的码制，已较不适合用“条形码”称之。具有代表性的矩阵式二维条形码有Datamatrix、Maxicode、Vericode、Softstrip、Code1、Philips Dot Code等。</code></p>
<p>  二维条形码的新技术在1980年代晚期逐渐被重视，在“资料储存量大”、“资讯随着产品走”、“可以传真影印”、“错误纠正能力高”等特性下，二维条形码在1990年代初期已逐渐被使用。现在，几乎所有的社交软件都具备扫一扫的功能，对着抽象的图案一扫，迎来一个多彩的世界已经成为许多人的习惯。</p>
<p>  马化腾在去年九月开幕的互联网大会的演讲中便说到：“从微信强化扫二维码的功能之后，我们希望把这个行为定义成更加普及，老百姓一看到码就去扫的概念。我们前几天还在网上看到一个新的名词，就是扫墓，看到墓碑有那个二维码，一扫描就看到这个墓碑的主人过去的生平介绍等等，这些都是非常典型的应用。”</p>
<p>  或许，墓碑的例子有些夸张，但是，你不能否认，条形码越来越贴近我们的生活，不再只是局限于购物。也许未来，我们的一切都涵盖在那小小的方寸之间。</p>
<hr>
<p>  碰巧，时隔多年把这篇文章重新整理出来的时候，回形针正好发布了一期关于二维码的视频：</p>
<div class="bilibili"><iframe src="//player.bilibili.com/player.html?bvid=BV1Y54y1D7cT&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe></div>

<p>  放在这里，作为补充。</p>]]></description>
</item><item>
    <title>Symbian的前世今生</title>
    <link>https://www.techkoala.top/brief_history_of_symbian/</link>
    <pubDate>Mon, 11 May 2020 22:57:01 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://www.techkoala.top/brief_history_of_symbian/</guid>
    <description><![CDATA[<a class="lightgallery" href="/images/symbian/symbian.jpg" title="/images/symbian/symbian.jpg" data-thumbnail="/images/symbian/symbian.jpg">
        
    </a>
<pre><code>聊聊Symbian的过去
</code></pre>
<p>注：这是一篇写于2013年的文章，时过境迁，仅表怀念。</p>
<p>  毫不夸张的说,今天我们所拥有的一切,都是建立在它的肩膀上。无论多少人咒骂它的臃肿，嫌弃它的卡顿，都无法改变它作为手机智能操作系统鼻祖的地位。当山寨机还在襁褓中时，当伪智能还在浪费人们的时间时，作为先驱的它便已上路。大多数人接触的第一款真正的智能手机系统，它把软件下载，游戏安装，刷机破解等诸多名词第一次带到了大众视野。它叫Symbian，也曾辉煌。三十年河东，三十年河西，科技领域本就没有常青树。虽然如今已经沦落，但不妨碍我们一起回味它曾经的辉煌。</p>
<h3 id="混沌之初symbian伊始">混沌之初，Symbian伊始</h3>
<p>​  Symbian，源自一家充满梦想的公司。</p>
<p>  1980年，potter在伦敦成立了Psion公司，这家以数字产品开发和研究为目的，为率先使用电子设备的大公司服务的小公司便是Symbian的生母。随着公司的发展，Psion开始浸淫移动终端市场，他们生产的各类移动设备不仅皮实耐用还能按需求定制，凭借这种“开放移动”的理念，Psion在上世纪90年代 成为了欧洲较成功的PDA生产商，进而促进了EPOC的诞生。在potter看来，EPOC是一种面向普通大众的便携系统。正如他的全称“A new epoch of personal convenience.”（一个人人方便使用电子产品的新时代），他被Psion给予了对于人机交互未来的憧憬。</p>
<p>  犹如一代闪电，EPOC划开了混沌的天空，不过真正的风暴才刚来临。</p>
<p>  1991年到1998年，Psion发布了几款给予EPOC 16的的设备，作为早期产品，免不了简陋无比，它们充其量只能算是PDA模块，只是方便了厂商研发新品。</p>
<p>  真正让EPOC走向成熟的是一位叫做Nicholas Myers 的程序设计师。1994年，他在构思下一代EPOC时，设定了开发适应21世纪技术性能的系统的目标。正是这样的思路。让他把握住了市场脉搏。1997年，他成为Psion旗下Symbian软件公司的CEO，其上任后发布的EPOC 32操作系统，比起前辈，已有了翻天覆地的变化。吸引了人们以及投资者的兴趣。今天我们吧Myers成为“Symbian之父”。</p>
<p>  EPOC 32与windows极为相似，它是一套32位的系统，支持多任务，拥有图形化美观的界面。鉴于当时几乎没有可以直接用于手机的操作系统，它的问世，一下子汇聚了厂商的目光。不过，任何一项新技术新产品的诞生都需要时间的推敲，智能手机系统作为新兴事物，没有哪家厂商敢冒险直接挺近。一番商榷之后，1998年，爱立信、诺基亚、摩托罗拉和Psion共同成立了一家公司，目的是推进手机和PDA的智能化，它就是我们今天熟知的“Symbian”。</p>
<h3 id="拉帮结派飞速发展">拉帮结派，飞速发展</h3>
<p>  联盟的成立不仅吸引了大量手机厂商，一些上有配件商，例如ARM和德州仪器都加入了合作计划。</p>
<p>  Symbian从一成立便秉持着开放的理念，任何组织和个人都能为其开发软件。但刚成立那几年，公司都未能推出一款真真意义上的产品，巨头们也只是作为附属项目在发展。直到1999年，Symbian OS v5平台作为第一款成熟的产品被设计出来，为了争夺“谁是世界上第一台智能手机”，爱立信没有经过完成的DEBUG，就匆忙的把他推向市场，生产出Erisson R380。同时期，摩托也推迟了自己的天拓A6188。可实际上，两者中无论哪个都不能算严格意义上的智能手机，它们连软件都不能自由安装，真正算起来，搭载了os v5.1的诺基亚9210才符合智能机最基本的定义，由此，诺基亚开始领先于其他厂商并保持到了最后。</p>
<p>  众所周知，利益面前必有纠纷。诺基亚的崛起必然伴随了很多厂商的陨落，同时，它的存在也让联盟中其他有实力的厂商感到了危机，这为后来阵营的割分埋下了导火索。</p>
<p>  Symbian成立之初提出了著名的三分法：Pearl(珍珠）、Quartz(石英）和Crystal（水晶）。分别对应手机的三大发展趋势：标砖键盘、触摸屏以及全键盘。诺基亚依靠Pearl迅速赢得了市场，逼迫索尼爱立信和摩托罗拉只能另寻他路&ndash;Quartz。于是，联盟分为了两大派系，一是以诺基亚牵头的S系列平台，再者便是索尼爱立信主打UIQ。诺基亚凭借标准键盘占据了大半江山，而后者则主攻触摸屏。这种同床异梦的现象愈演愈烈，直接导致了联盟崩溃的迫近。</p>
<p>  当然，上述现象只是苗头，整个联盟正处于高速发展阶段。2002年，微软的WM系统进入市场，这个原本被人们誉为“Symbian终结者”的系统，却远没有它的大哥一般占据市场，反而被后者打的满地找牙。与此同时，诺基亚更是凭借Pearl进一步扩展帝国的领土，N70、N73、N95的横空出世，为诺基亚扎实了自己的实力，待到Symbian王朝最鼎盛时，这个姓塞的家族占据了72%的智能手机市场，其中更是有九成乃至如日中天的诺基亚。直到现在，都没有哪一家厂商甚至哪一个操作系统打破这个纪录。</p>
<h3 id="兄弟反目联盟瓦解">兄弟反目，联盟瓦解</h3>
<p>  正如上文所说，一家独大必然引发隐患。而事实证明那一天来了。2008年，UIQ宣布倒闭。究其原因，一方面是由于它自身定位与市场的极大反差，而另一方面便是来自于诺基亚的压力。相比S60，开发者在这个平台上的收益远不及前者。应用程序的短缺自然局限了消费者的购买欲，如此一来，倒闭似乎只是时间问题了。诺基亚的持续壮大，扼杀了其他厂商的利润，长此以往，天平的过分了倾斜让别的厂商不得不退出Symbian的纷争。UIQ的倒闭，标志着诺基亚对于Symbian掌控的最大化，后者从此只有一个主人了。</p>
<p>  联盟名存实亡，但诺基亚为了避嫌，标榜着“开放”而成立了Symbian基金会，继续推向面向所有开发者开放的原则，明则共享资源，暗则染指一统智能市场。不幸的是，这是iPhone和Android问世了。后来的结果，各位看官一定也都清楚。诺基亚的美梦做早了，自大的它快走到了末路。</p>
<p>  多年以后，关于那个一统江湖的传说，早已沦为笑谈罢了。</p>
<h3 id="成也symbian败也symbian">成也Symbian，败也Symbian</h3>
<p>  船大难掉头。巨头对于市场末端的变化总是慢半拍。身处多年王位的诺基亚早已麻痹了大意。UIQ的倒闭，让其认为触摸屏不被市场接受，继续推进S60这个老迈的系统被诺基亚看做唯一路线。iPhone的面市彻底颠覆了人们对于智能手机的认识，一度让人们认为iPhone重新定义了智能手机。市场的反应也确实印证了这一点，我们的双手确实是最适合操作的工具。但固守己见的诺基亚貌似看不到这一变化，迟迟不肯跳出键盘的定式思维。虽然后来确实推出了几款诸如5800这样销量很不错的触屏手机，当一切来的太晚，苹果做大了，随后的绿皮机器人也成熟了，Symbian王朝彻底步入了晚年。</p>
<p>  失去市场号召力的诺基亚此时的地位一落千丈，对于Symbian的态度也是一日三变。曾一度把源代码挂在网站上任人下载，随后又宣布只面向企业用户开源。这时的诺基亚真的急了。不愿投奔机器人阵营沦落为硬件制作商的他，竟甘心跪倒在昔日手下败将的裙下。2011年12月，Symbian Belle正式更名为诺基亚Belle。诺基亚连名字都不行再见的Symbian从此已经不复存在。</p>
<p>  然而，这并不意味着Symbian彻底的灭亡。名字虽然没有了，但产品依旧没有改变，与其说它灭亡不如说它失去了原来那般强大的市场号召力。毕竟，凭借S40在低端市场的畅销，诺基亚还能在手机市场分的一杯羹。</p>
<h3 id="未来未来">未来？未来！</h3>
<p>  向微软投怀送抱之后，诺基亚在Symbian的建树彻底才枯思竭。以至于不得不推出808这样依靠单一买点为噱头吸引市场关注的“帐篷手机”。Symbian的今生今世已经无话可说。而未来又在何方？原本打算有所期盼的笔者，本来打算对它的未来有所展望和揣测，不幸的是，本文截稿前的1月24日，诺基亚公布了2012年第四季度最新的财政业绩报告显示，该季度诺基亚实现净利润2.02亿欧元，告别6连亏，但同时诺基亚官方宣称去年在巴塞罗那发布的808PureView将会是最后一款塞班手机，这也意味着塞班这一已经被使用了15年之久的智能手机操作系统终于将告别市场，而诺基亚在智能手机领域也终于百分之百微软化。 诺基亚CEO斯蒂芬·埃洛普表示：“2012财年上半年相对艰难，但第四财季表现强劲，设备和服务部门的运营利润率得到了改善。我们将继续执行既定的转移战略，包括继续提升产品竞争力，加速运营，管理成本等。”</p>
<p>  因此，至少在看得见的未来，Symbian已经没有了未来！</p>
<h3 id="末了">末了</h3>
<p>  无论多么强大的文明都有覆灭的一天，帝国如是，企业如是。在暗潮汹涌的科技领域，公司不能推出迎合市场口味，顺应市场变化的产品，迎来的就只有倒闭。在创新与颠覆这条路上，Symbian不是第一个倒下的，也不会是最后一个。</p>
<pre><code>P.S.谨以此文献给那些成长路上的人和事，Symbian没了，坛子没有了，但我们都还在。
    这些有关我们青春的事逝去也就随他去了，至少我们还有彼此。</code></pre>]]></description>
</item><item>
    <title>Github推送问题</title>
    <link>https://www.techkoala.top/github_push_issue/</link>
    <pubDate>Sun, 10 May 2020 11:25:57 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://www.techkoala.top/github_push_issue/</guid>
    <description><![CDATA[<pre><code>使用github时遇到的推送问题以及解决方法
</code></pre>
<p>​	首先，使用如下命令检查问题详情：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ ssh -vT git@github.com
</code></pre></td></tr></table>
</div>
</div><p>​	然后确认您的私钥已生成并加载到 SSH。 如果使用的是 OpenSSH 6.7 或更早版本：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># 在后台启动 ssh-agent</span>
$ <span class="nb">eval</span> <span class="s2">&#34;</span><span class="k">$(</span>ssh-agent -s<span class="k">)</span><span class="s2">&#34;</span>
&gt; Agent pid <span class="m">59566</span>
$ ssh-add -l
&gt; <span class="m">2048</span> a0:dd:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/you/.ssh/id_rsa <span class="o">(</span>RSA<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><p>​	如果使用的是 OpenSSH 6.8 或更新版本：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># 在后台启动 ssh-agent</span>
$ <span class="nb">eval</span> <span class="s2">&#34;</span><span class="k">$(</span>ssh-agent -s<span class="k">)</span><span class="s2">&#34;</span>
&gt; Agent pid <span class="m">59566</span>
$ ssh-add -l -E md5
&gt; <span class="m">2048</span> MD5:a0:dd:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/you/.ssh/id_rsa <span class="o">(</span>RSA<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="确认公钥已附加到账户">确认公钥已附加到账户</h2>
<p>​在后台启动 SSH 代理程序。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ <span class="nb">eval</span> <span class="s2">&#34;</span><span class="k">$(</span>ssh-agent -s<span class="k">)</span><span class="s2">&#34;</span>
&gt; Agent pid <span class="m">59566</span>
</code></pre></td></tr></table>
</div>
</div><p>​找到并记录公钥指纹。 如果使用的是 OpenSSH 6.7 或更早版本：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ ssh-add -l
&gt; <span class="m">2048</span> a0:dd:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/USERNAME/.ssh/id_rsa <span class="o">(</span>RSA<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><p>​如果使用的是 OpenSSH 6.8 或更新版本：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ ssh-add -l -E md5
&gt; <span class="m">2048</span> MD5:a0:dd:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/USERNAME/.ssh/id_rsa <span class="o">(</span>RSA<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><p>如果没有添加，则</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ ssh-add /xxx/.ssh/xxx
</code></pre></td></tr></table>
</div>
</div><pre><code>注：不知为何，使用自定义名字的密钥，每次git操作都要重新添加一次，尚不明确原因。
</code></pre>
<h2 id="添加到github">添加到Github</h2>
<p>​	<strong>Settings</strong> &raquo; <strong>SSH and GPG keys</strong> &raquo; 添加公钥即可</p>]]></description>
</item></channel>
</rss>
